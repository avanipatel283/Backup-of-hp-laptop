// Code - Fetch contacts linked with Deal, Account, Task and show it in view.
// For edit - publishes a msg to contact-actions
DSCRM.Core.registerModule("involved-contacts",["url","ajax","cache","util","alert"] ,function(sandbox) {
	
	var _self = null;
	
	var _private = {
			
			entityType : null,
			entityID : null, 
			arrayOfLinkedContacts : null,
			pageEl : null,
			phoneNoClass : null,
			emailClass : null,
			smsClass : null,
			involvedcontactID : null,
			arrayOfContactsNotInCache : [],
			LIMIT : 10,
			start : 0,
			end : 0,
			loadingPlaceholderForInvolvedContactsTemplate : dscrm.templates.contacts.loadingPlaceholderForInvolvedContacts,
			contactTemplate : dscrm.templates.contacts.contactInfo,
			documentTemplate : dscrm.templates.contacts.contactDocumentForm,
			mailInformation : null,
			isSMSEnabled : false,
			
			groupContactMethods : function(arrayOfContacts) {
				
				if(sandbox.util.isEmptyObject(arrayOfContacts))
					return arrayOfContacts;
				
				var arrayOfLinkedContactMethods = null,
					arrayOfPhone = [], arrayOfFax = [], 
					arrayOfEmail = [], arrayOfSocial = [],
					arrayOfWeb = [], arrayOfSms = [],
					sortedLinkedContactMethods = null;
				
				sandbox.dom.each(arrayOfContacts, function(index, contact) {
					
					arrayOfLinkedContactMethods = contact.linkedContactMethods;
					if(sandbox.util.isEmptyObject(arrayOfLinkedContactMethods))
						return true;
					
					sortedLinkedContactMethods = [];
					arrayOfPhone = []; arrayOfFax = []; arrayOfEmail = []; arrayOfSocial = [];
					arrayOfWeb = []; arrayOfSms = [];
					
					sandbox.dom.each(arrayOfLinkedContactMethods, function(index, contactMethod) {
						
						if(contactMethod.deleted)
							return true;
						
						switch(contactMethod.type) {
							case 'phone':
								arrayOfPhone.push(contactMethod);
								break;
							case 'fax':
								arrayOfFax.push(contactMethod);
								break;
							case 'email' :
								arrayOfEmail.push(contactMethod);
								break;
							case 'social' :
								arrayOfSocial.push(contactMethod);
								break;
							case 'web' :
								arrayOfWeb.push(contactMethod);
								break;
							case 'sms' :
								arrayOfSms.push(contactMethod);
								break;
							default :
								break;
						}				
					});
					
					sortedLinkedContactMethods = arrayOfPhone.concat(arrayOfEmail, arrayOfFax, arrayOfWeb, arrayOfSocial, arrayOfSms);
					contact.linkedContactMethods = sortedLinkedContactMethods;
				});
				
				return arrayOfContacts;
			},
			
			appendTagNames : function(contact) {
				
				if(sandbox.util.isEmptyObject(contact))
					return contact;
				
				var arrayOfTagIDs = contact.linkedTags;
				if(sandbox.util.isEmptyObject(arrayOfTagIDs))
					return contact;
				
				var mapOfTagsInCache = sandbox.cache.get("tags"),
					linkedTagNames = [];
				
				sandbox.dom.each(arrayOfTagIDs, function(index, tagID) {
					if(mapOfTagsInCache.hasOwnProperty(tagID))
						linkedTagNames.push(mapOfTagsInCache[tagID].name);
				});
				
				contact.linkedTagNames = linkedTagNames;
				
				return contact;
			},
			
			displayContacts : function(){
				
				//var arrayOfLinkedContactIDs = getLinkedContactIDs();
				
				/* Ordering for Involved Contacts section is based on the following list:
				 *1) Companies with tags
				 *2) Companies without tags
				 *3) Persons with tags
				 *4) Persons without tags
				 *Among each of the above categories, Contacts are ordered alphabetically. 
				 */
				
				var categoryMap = {1:[], 2: [], 3:[], 4:[]}, 
					contact = null,
					contacts = [],
					mapOfContactsInCache = sandbox.dom.extend(true, {}, sandbox.cache.get("contacts"));
				
				_private.arrayOfLinkedContacts.map(function(id) {
					
					contact = mapOfContactsInCache[id];
					
					if(contact.category == "company"){
						
						contact.name = contact.fullName;
						
						if(!sandbox.util.isEmptyObject(contact.linkedTags))
							categoryMap[1].push(_private.appendTagNames(contact));
						else
							categoryMap[2].push(contact);
						
					} else{

						contact.name = sandbox.util.getPersonName(contact.firstName, contact.lastName);
						
						if(!sandbox.util.isEmptyObject(contact.linkedTags))
							categoryMap[3].push(_private.appendTagNames(contact));
						else
							categoryMap[4].push(contact);
					}
				});
				
				sandbox.dom.each(categoryMap, function(priority, contactList){
					
					if(contactList.length == 0)
						return true;

					//to handle cases when there are company objects with name value null
					var newContactList = [], badContactList = [];
					contactList.map(function(tempContact){
						if(!!tempContact["name"])
							newContactList.push(tempContact);
						else
							badContactList.push(tempContact);
					});

					newContactList = sandbox.util.sortObjects(newContactList, "name");
					contactList = badContactList.concat(newContactList);
					contactList = _private.groupContactMethods(contactList);
				});
				
//				if(_pageEl.find("li.involvedcontacts ol li").length == _entityObj.linkedContacts.length)
//					sandbox.publish("contacts-detailpage-displayed", {type :_entityType, obj : _entityObj});
				
				var arrayOfHtml = [];
				
				sandbox.dom.each(categoryMap, function(priority, contactList) {
					arrayOfHtml.push(_private.contactTemplate({ arrayOfContacts : contactList , isSMSEnabled : _private.isSMSEnabled }));
				});		 
				
				//_pageEl = sandbox.dom("#account-involved-contacts");
				//_private.pageEl.find("div.spinner_loading, div.involved_dtl").remove();	
				
				_private.pageEl.find("div.involved_contacts_placeholder, div.involved_dtl").remove();
				_private.pageEl.find("h4").after(arrayOfHtml);
				
				//_pageEl.find("ol").empty().append(arrayOfHtml);
				_private.pageEl.find("[data-type='tags']").tokenfield().tokenfield("disable");
				
				_private.bindEvents();
				
				if(_private.entityType === 'deal') {
					sandbox.publish("load-similar-contacts", {entityID : _private.entityID, entityType : _private.entityType });
				}
				
				_private.fetchDocuments();
				_private.fetchTimeZoneInfo();

				sandbox.publish("initialize-tooltip-for-ellipsis", {pageEl : _private.pageEl,pageSection: "involved-contacts"});
				sandbox.publish("enable-or-disable-elements-for-entity", { entityType : _private.entityType, entityID : _private.entityID});
			},
			
			
			//TODO: this method is being called from only one place, it doesnt need to return anything and it can ignore doing if branchng and assume contactMap is an array
			setContactsInCache : function(contactMap){
				
				var contactsCache = sandbox.cache.get("contacts"), contactID = [];
				if(sandbox.util.isEmptyObject(contactMap))
					return contactID;
				
				if(sandbox.dom.isArray(contactMap)) {
					
					sandbox.dom.each(contactMap, function(index, contact){
						
						if(contact.type === "contact") {
							contactsCache[contact.id] = contact; contactID.push(contact);
						}else{
							var idx = _private.arrayOfLinkedContacts.indexOf(contact.id)
							if(idx != -1)
								_private.arrayOfLinkedContacts.splice(idx , 1)
						}
						
					});
					
				} else if(contactMap instanceof Object) {
					
					sandbox.dom.each(contactMap, function(key, contact){
						
						if(contact.type === "contact") {
							contactsCache[key] = contact; contactID.push(contact);
						}else{
							var idx = _private.arrayOfLinkedContacts.indexOf(contact.id)
							if(idx != -1)
								_private.arrayOfLinkedContacts.splice(idx , 1)
						}
							
					});
				}
				
				return contactID;
			},
			
//			getLinkedContactIDs : function() {
//			
//			var arrayOfLinkedContacts = null;
//			
//			switch(_entityType) {
//				case "deal" :
//					arrayOfLinkedContacts =  sandbox.cache.get("deals")[_entityID].linkedContacts;	
//					break;
//				case "account" :
//					arrayOfLinkedContacts =  sandbox.cache.get("accounts")[_entityID].linkedContacts;
//					break;
//				default :
//					break;
//			}
//			
//			return arrayOfLinkedContacts;
//		},
		
		getDomElement : function() {
			
			switch(_private.entityType) {
				case "deal" :
					_private.pageEl = sandbox.dom("#deal-involved-contacts");
					break;
				case "account" :
					_private.pageEl = sandbox.dom("#account-involved-contacts");
					break;
				case "task" :
					_private.pageEl = sandbox.dom("#task-involved-contacts");
					break;
				default :
					break;
			}
			
			if(_private.entityType == "deal" || _private.entityType == "account") {
				
				var appMode = sandbox.cache.get("appMode").toUpperCase();
				var salesPersonId = sandbox.cache.get("loggedInUserID");
				var synclioUserIDList =sandbox.cache.get("synclioUserIDMap");
				
				if(appMode == "LIVE" && synclioUserIDList.hasOwnProperty(salesPersonId))
					_private.isSMSEnabled = true;
				else if((appMode == 'STAGING' || appMode == 'DEV') && !sandbox.cache.get("isExternal"))
					_private.isSMSEnabled = true;
			} else
				_private.isSMSEnabled = false;
			
			return _private.pageEl;
		},
		
		getContactsNotInCache : function() {
			
			//var arrayOfLinkedContacts = getLinkedContactIDs();
			
			if(sandbox.util.isEmptyObject(_private.arrayOfLinkedContacts))
				return null;
			
			var mapOfContactsInfoInCache = sandbox.cache.get("contacts");
			
			sandbox.dom.each(_private.arrayOfLinkedContacts, function(index, contactID) {
				
				if(mapOfContactsInfoInCache.hasOwnProperty(contactID))
					return true;
				
				_private.arrayOfContactsNotInCache.push(contactID);
			});				
		},
		
		displayInvolvedContacts : function(data) {
			
			if(sandbox.util.isEmptyObject(data))
				return false;
							
			_private.entityType = data.entityType;
			_private.entityID = data.entityID;
			_private.arrayOfLinkedContacts = data.linkedContacts;
			
			_private.getDomElement();
			
			_private.start = 0; _private.end = 0; _private.arrayOfContactsNotInCache = [];
			
		//	_private.pageEl.find("div.spinner_loading, div.involved_dtl").remove();
			
			_private.pageEl.find("div.involved_contacts_placeholder, div.involved_dtl").remove();
			
			if(sandbox.util.isEmptyObject(_private.arrayOfLinkedContacts)) {
				sandbox.dom('.involvedcontacts').removeClass('hide').addClass('hide'); //Remove the involvedcontacts section if there are no linkedcontacts
				return true;
			}else
				sandbox.dom('.involvedcontacts').removeClass('hide');
			
			_private.getContactsNotInCache();
			
			if(sandbox.util.isEmptyObject(_private.arrayOfContactsNotInCache)) {
				_private.fetchTagsForContacts();
				return true;
			}
			
			_private.fetchSelectedContacts();
			return true;
		},
		
		fetchSelectedContacts : function(response) {
			
			if(sandbox.util.isEmptyObject(_private.arrayOfContactsNotInCache))
				return;
			
			if(!sandbox.util.isEmptyObject(response) && response.success) {
				
				if( response.uniqueRequestID != _private.entityType+_private.entityID )
					return;
					
				var mapOfContacts = response.contact;
				_private.setContactsInCache(mapOfContacts);
			}
			
			var totalNoOfContacts = _private.arrayOfContactsNotInCache.length;
			
			if(totalNoOfContacts === _private.end) {
				
				//fetchTagsForContacts();
				_private.checkCacheAndFetchLinkedCompanyForPeople();
				return;
			} else {
				
				_private.start = _private.end;
				if((totalNoOfContacts - _private.end) > _private.LIMIT)
					_private.end = _private.start + _private.LIMIT;
				else
					_private.end = totalNoOfContacts;
			}
			
			var arrayOfContactID = _private.arrayOfContactsNotInCache.slice(_private.start, _private.end);
			
			var url = "/services/data/v2.0/objects/Contact/getReqContacts?ignore=deleted&apikey="+sandbox.cache.get("accountID"),
				data = {};
			
			data.contact = arrayOfContactID;
			data.uniqueRequestID = _private.entityType+_private.entityID;	
		//	_private.pageEl.find("div.spinner_loading, div.involved_dtl").remove();
		//	_private.pageEl.find("h4").after('<div class="spinner_loading"> <i class="icon-spinner icon-spin"></i> </div>');
			
			_private.pageEl.find("div.involved_contacts_placeholder, div.involved_dtl").remove();
			_private.pageEl.find("h4").after(_private.loadingPlaceholderForInvolvedContactsTemplate);
			
			sandbox.ajax.requestDCM({method:"POST", url: url, endpoint:"/getReqContacts", data: data, callBack: _private.fetchSelectedContacts});
		},
		
		checkCacheAndFetchLinkedCompanyForPeople : function() {
			
			_private.start = 0; _private.end = 0; _private.arrayOfContactsNotInCache = [];
			
			if(sandbox.util.isEmptyObject(_private.arrayOfLinkedContacts))
				return null;
			
			var mapOfContactsInfoInCache = sandbox.cache.get("contacts"), contact = null, linkedCompanyID = null;
			
			sandbox.dom.each(_private.arrayOfLinkedContacts, function(index, contactID) {
				
				linkedCompanyID = null;
				
				contact = mapOfContactsInfoInCache[contactID];
				if(contact.category === 'company')
					return true;
				
				linkedCompanyID = sandbox.util.isEmptyObject(contact.linkedContacts)?null:contact.linkedContacts[0];
				
				if(!linkedCompanyID)
					return true;
				
				if(mapOfContactsInfoInCache.hasOwnProperty(linkedCompanyID))
					return true;
					
				_private.arrayOfContactsNotInCache.push(linkedCompanyID);
			});				
			
			if(!sandbox.util.isEmptyObject(_private.arrayOfContactsNotInCache)) {			
				_private.fetchSelectedContacts();
				return;
			}		
			
			_private.fetchTagsForContacts();
		},
		
		fetchTagsForContacts : function() {
			
			//var linkedContactIDs = getLinkedContactIDs();
			
			if(sandbox.util.isEmptyObject(_private.arrayOfLinkedContacts))
				return;
			
		//	_private.pageEl.find("div.spinner_loading, div.involved_dtl").remove();
		//	_private.pageEl.find("h4").after('<div class="spinner_loading"> <i class="icon-spinner icon-spin"></i> </div>');
			
			_private.pageEl.find("div.involved_contacts_placeholder, div.involved_dtl").remove();
			_private.pageEl.find("h4").after(_private.loadingPlaceholderForInvolvedContactsTemplate);
			
			var data = {},
				url = "/services/data/v2.0/objects/Tags/getSelectedTags_v2?apikey=" + sandbox.cache.get("accountID");
			
			data.listEntityID = _private.arrayOfLinkedContacts;
			data.uniqueRequestID = _private.entityType+_private.entityID; 
			
			sandbox.ajax.requestDCM({method:"POST", url: url, data: data, endpoint:"/getSelectedTags_v2", callBack : _private.fetchTagsForContactsCallBack});
		},
		
		fetchTagsForContactsCallBack : function(response) {
			
			if(sandbox.util.isEmptyObject(response) || !response.status || response.uniqueRequestID != _private.entityType+_private.entityID )
				return;
			
			var tags = response.tags,
				tagsInfo = response.taginfo;
			
			if(sandbox.util.isEmptyObject(tags)) {
				_private.displayContacts();
				return;
			}
			
			var mapOfTagsInCache = sandbox.cache.get("tags");
			if(mapOfTagsInCache === null)
				mapOfTagsInCache = {};
			
			sandbox.dom.each(tags, function(index, tag) {
				mapOfTagsInCache[tag.id] = tag;
			});
			
			sandbox.cache.update({ tags :  mapOfTagsInCache });
			
			var mapOfTagsInfoInCache = sandbox.cache.get("tagsinfo");
			if(sandbox.util.isEmptyObject(mapOfTagsInfoInCache))
				mapOfTagsInfoInCache = {};
			
			var linkedTagIDs = null,
				entityID = null,
				mapOfContactsInCache = sandbox.cache.get("contacts"),
				contact = null, mapOfTagInfoForCache = {};
		
			sandbox.dom.each(tagsInfo, function(index, tagInfo) {
				
				linkedTagIDs = null;
				entityID = tagInfo.entityID;
				if(mapOfTagInfoForCache.hasOwnProperty(entityID))
					linkedTagIDs = mapOfTagInfoForCache[entityID];
				
				if(linkedTagIDs == null)
					linkedTagIDs = [];
				
				linkedTagIDs.push(tagInfo.tagID);
				mapOfTagInfoForCache[entityID] = linkedTagIDs;
			});
			
			sandbox.dom.each(mapOfTagInfoForCache, function(entityID, linkedTagIDs) {
				mapOfTagsInfoInCache[entityID] = linkedTagIDs;
				
				contact = mapOfContactsInCache[entityID];
				if(!sandbox.util.isEmptyObject(contact)) {
					contact.linkedTags = linkedTagIDs;
					mapOfContactsInCache[entityID] = contact;
				}
			});
		
			sandbox.cache.update({ tagsinfo : mapOfTagsInfoInCache});
			sandbox.cache.update({ contacts : mapOfContactsInCache });
			
			_private.displayContacts();
		},
		
		fetchDocuments : function() {
			
			if(sandbox.util.isEmptyObject(_private.arrayOfLinkedContacts))
				return;
			
			var data = {},
				url = "/services/crm/getDocumentsForEntities?apikey=" + sandbox.cache.get("accountID");
			
			data.listOfEntityID = _private.arrayOfLinkedContacts;
			data.entityType = "Contact";
			
			sandbox.ajax.requestDCM({method:"POST", url: url, endpoint:"/getDocumentsForEntities", data: data, callBack : _private.fetchDocumentsCallBack});
		},
		
		fetchDocumentsCallBack : function(response) {
			
			if(!response.success) {
				return;
			}
				
			var mapOfEntityToDocuments = response.mapOfEntityDocumentInfo,
				data = null;
			
			if(sandbox.util.isEmptyObject(mapOfEntityToDocuments)) {
				return;
			}
			
			sandbox.dom.each(mapOfEntityToDocuments, function(contactID, arrayOfDocuments) {
				
				sandbox.dom.each(arrayOfDocuments, function(documentID, document) {
					
					data = {};
					data.documentID = documentID;
					data.documentName = document.name;
					data.contactID = contactID;
					data.departmentID = document.departmentID;
					
					_private.pageEl.find("[data-id='"+contactID+"']").find("[data-type='document'][data-id='"+documentID+"']").find("span").empty().append(_private.documentTemplate(data));
				});
			});			
		},
		
		fetchTimeZoneInfo : function() {
			
			if(sandbox.util.isEmptyObject(_private.arrayOfLinkedContacts))
				return;
			
			if(sandbox.util.isEmptyObject(sandbox.cache.get("timeZoneDetails"))) {
				setTimeout(function(){
					_private.fetchTimeZoneInfo();
				},500);
				return;
			}
			
			var data = null, mapOfContactIDToAreaCode = {}, arrayOfAreaCodes = [];
			sandbox.dom.each(_private.arrayOfLinkedContacts, function(index, contactID) {
				
				data = _private.getLocalTime(contactID);
				
				if(sandbox.util.isEmptyObject(data)) {
					_private.pageEl.find("[data-id='"+contactID+"']").find("[data-type='timezone']").remove();
				} else if(!!data.timeZone) {
					_private.pageEl.find("[data-id='"+contactID+"']").find("[data-type='timezone']").find("span").html(data.timeZone);
				} else {
					
					mapOfContactIDToAreaCode[contactID] = data.areaCode;
					arrayOfAreaCodes.push(data.areaCode);
				}
							
			});
			
			if(!sandbox.util.isEmptyObject(mapOfContactIDToAreaCode)) {
				
				data = {};
				data.mapOfContactIDToAreaCode = mapOfContactIDToAreaCode;
				data.areaCodes = arrayOfAreaCodes;
				sandbox.publish("fetch-timezone-info", data);
			}
		},
		
		getLocalTimeString : function(offset, timeZoneID) {
			return ( sandbox.util.getLocalTime_v2(offset, 'E, MMM d,  h:mm a').str + " " + timeZoneID );
		},
		
		getLocalTime : function(contactID) {
			
			var localTime = null;
			var contact = sandbox.cache.get("contacts")[contactID];
			var timeZone = contact.timeZone;
			if(!!timeZone && timeZone !== 'None') {
				
				var timeZoneMapInCache = sandbox.cache.get("timeZoneDetails");
				var timeZoneID = timeZoneMapInCache[timeZone]['timeZoneID'];
				var offset = timeZoneMapInCache[timeZone]['Offset'];
				var data = {};
				data.timeZone = _private.getLocalTimeString(offset, timeZoneID);
				
				return data;
			}
			
			var linkedContactMethods = contact.linkedContactMethods;
			if(sandbox.util.isEmptyObject(linkedContactMethods)) {
				return null;
			}
			
			var phoneNo = null, areaCode = null;
			sandbox.dom.each(linkedContactMethods, function(index, contactMethod) {
				
				if(!!areaCode)
					return false;
					
				if(contactMethod.type !== 'phone')
					return true;
				
				phoneNo = contactMethod.value;
				if(phoneNo.length <= 3)
					return true;
				
				areaCode = phoneNo.substring(0,3);
			}); 
			
			if(!areaCode) 
				return null;
			
			var data = {};
			
			data.contactID = contactID;
			data.areaCode = areaCode;
			return data;		
		},
		
		updateLocalTime : function(data) {
			
			if(sandbox.util.isEmptyObject(data) || sandbox.util.isEmptyObject(data.mapOfContactIDToAreaCode))
				return;
			
			var arrayOfAreaCodes = data.areaCodes;
			var mapOfContactIDToAreaCode = data.mapOfContactIDToAreaCode;
			var mapOfAreaCodeToTimeZone = data.timeZone,
				timeZoneObj = null,
				localTime = null,
				contact = null;
			
			sandbox.dom.each(mapOfContactIDToAreaCode, function(contactID, areaCode) {
				
				timeZoneObj = mapOfAreaCodeToTimeZone[areaCode];
				
				if(sandbox.util.isEmptyObject(mapOfAreaCodeToTimeZone)) {
					_private.pageEl.find("[data-id='"+contactID+"']").find("[data-type='timezone']").remove();
					return true;
				}
				
				//TODO -  V5P for empty timeZoneObj need to check.
				
				if(!sandbox.util.isEmptyObject(timeZoneObj))
					localTime = _private.getLocalTimeString(timeZoneObj.Offset, timeZoneObj.timeZoneID);
			
				else {
					_private.pageEl.find("[data-id='"+contactID+"']").find("[data-type='timezone']").remove();
					return;
				}
				
				contact = sandbox.cache.get("contacts")[contactID];
				
				if(!sandbox.util.isEmptyObject(timeZoneObj))
				contact.timeZone = timeZoneObj.ID;
				
				
				_private.pageEl.find("[data-id='"+contactID+"']").find("[data-type='timezone']").find("span").html(localTime);
				
			});		
		},
		
		dialPhoneNo : function(e) {
			
			var phoneNo = sandbox.dom.trim(e.target.innerHTML);
			if(!phoneNo)
				return;
			
			sandbox.publish("dial-phoneNo", { entityType : _private.entityType, entityID : _private.entityID, phoneNo : phoneNo });
		},
		
		showEmailPopUp : function(event) {
			
			var email = sandbox.dom.trim(event.target.innerHTML);
			if(!email)
				return;
			
			_private.involvedcontactID = sandbox.dom(event.target).parent().parent().parent().attr("data-id");
			
			var dataForEmailPopup = {};
			
			dataForEmailPopup['entityType'] = _private.entityType;
			dataForEmailPopup['entityID']  = _private.entityID;
			dataForEmailPopup['contactID'] = _private.involvedcontactID;
			dataForEmailPopup["email-type"] ="reply";
			dataForEmailPopup["to"] = [email];
			//dataForEmailPopup['taskGroupsAsUsers']  = true;
			dataForEmailPopup['moduleName'] = sandbox.moduleName;
			
			if(_private.entityType == "task")
				dataForEmailPopup['subject'] = "Re: "+ sandbox.cache.get("tasks")[_private.entityID].comments;
						
			sandbox.publish("show-email-popup",dataForEmailPopup);
		},
		
		showSMSPopup : function(e){
					
			var contactID = sandbox.dom(e.target).parent().parent().parent().attr('data-id'),
			    to = sandbox.dom.trim(sandbox.dom(e.target).prev().text());
			
			sandbox.publish('send-sms',{ entityType : _private.entityType, entityID : _private.entityID, contactID : contactID,to : to});
		},
		
		showEditContactPopUp : function(event) {
			
			var contactID = sandbox.dom(event.target).parent().parent().attr("data-id"); 
			sandbox.publish("show-update-contact-popup", {id : contactID});
		},
		
		showDialogToConfirmForRemovingContact : function(event) {
			
			var contactID = sandbox.dom(event.target).parent().parent().attr("data-id");
			
			var data = {};
			data.contactID = contactID;
			sandbox.alert.dialog({text: "Are you sure you want to remove the contact ?", data: data, confirm: _private.removeContact});
		},
		
		bindEvents : function() {
			
			_private.pageEl.find(_private.phoneNoClass).off().on("click", _private.dialPhoneNo);
			
			_private.pageEl.find(_private.emailClass).off().on("click", _private.showEmailPopUp);
			
			_private.pageEl.find(_private.smsClass).off().on('click', _private.showSMSPopup);
			
			_private.pageEl.find("[data-btn='edit']").off().on("click", _private.showEditContactPopUp);
			
			_private.pageEl.find("[data-btn='remove']").off().on("click", _private.showDialogToConfirmForRemovingContact);
			
			_private.pageEl.find("[data-redirect='external']").off().on("click", function(e){
				e.preventDefault();
				_private.showWebPopup(sandbox.dom(e.currentTarget).text());
			})
		},
		
		removeContact : function(data) {
			
			var contactID = data.contactID;
			
			var url = null, urlMethod = null, callBack = null, endpoint = null;
			data = {};
			
			switch(_private.entityType) {
				case "deal" :
					
					data.dealID = _private.entityID;
					data.contactID = contactID;
					data.isAssociateContactOp = false;				
					url = "/relateContactToDeal"; urlMethod = "PUT";
					endpoint = "/relateContactToDeal";
					break;
				case "account" :
					
					data.accountObjID = _private.entityID;
					data.contactIdToRemove = contactID;
					data.property = "contactIdToRemove";				
					url = "/"+_private.entityID +"/updateAccount"; urlMethod = "PUT";
					endpoint = "/updateAccount";
					break;
				case "task" :
					
					data.taskID = _private.entityID;
					data.contactID = contactID
					url = "/removeContactFromTask?apikey="+ sandbox.cache.get("accountID"); urlMethod = "PUT";
					endpoint = "/removeContactFromTask";
					break;
				default :
					break;
			}
			
			sandbox.ajax.request({method : urlMethod, url: url, endpoint: endpoint, data : data, callBack: _private.removeContactCallBack});
			sandbox.alert.message({text:"Removing Contact..."});			
		},
		
		getToCcAndBccDetailForHistory : function(data){	
			
			var mapData = data.mapData;
			var historyComments = data.historyComments;
			
			var historyData = '';
			var to = '', cc = '', bcc = '', from = '', subject = '';
			
			if(!!mapData['from']) {
				from = mapData['from'];
				from = from.replace(/</g,'(');
				from = from.replace(/>/g,')');		
				historyData = '<div><b>From : </b><span class="history_from">'+from+'</span></div>';
			}
			
			if(!!mapData['subject']) {
				subject = mapData['subject'];
				historyData = historyData+'<div><b>Subject : </b><span class="history_subject">'+subject+'</span></div>';
			}
			
			if(!!mapData['to']) {
				to = mapData['to'];
				to = to.replace(/</g,'(');
				to = to.replace(/>/g,')');		
				historyData = historyData+'<div><b>To : </b><span class="history_to">'+to+'</span></div>';
			}
			
			if(!!mapData['cc']) {
				cc = mapData['cc'];
				cc = cc.replace(/</g,'(');
				cc = cc.replace(/>/g,')');
				historyData = historyData+'<div><b>Cc : </b><span class="history_cc">'+cc+'</span></div>';
			}
			
			if(!!mapData['bcc']) {
				bcc = mapData['bcc'];
				bcc = bcc.replace(/</g,'(');
				bcc = bcc.replace(/>/g,')');
				historyData = historyData+'<div><b>Bcc : </b><span class="history_bcc">'+bcc+'</span></div>';
			}
			
			if(!!historyData)
				historyComments = historyData + historyComments;

			return historyComments;
			
		},
		
		changeTaskStatusAfterSendMail : function(){
			
			var taskInfoForServer = {};
			taskInfoForServer["status"] = "replied";
			taskInfoForServer["operation"] = "update";

			sandbox.alert.message({text:"Updating Task..."});
			sandbox.ajax.request({url: "/updateATask/"+_private.mailInformation.entityID+"?apikey="+sandbox.cache.get("accountID")+"&isLoggedIn="+true, endpoint:"/updateATask", data:taskInfoForServer, callBack: _private.changeTaskStatusCallBack,method:"PUT"});

		},
		
		changeTaskStatusCallBack : function(response){
				
			if(!response.status)
				return;
			
			sandbox.publish("refresh-task-detail-header",response);
			_private.historyForInvolvedContactMailOperation();
			
		},
		
		emailSentCallBackForInvolvedContacts : function(data){
			
			if(sandbox.util.isEmptyObject(data))
				return;
			
			_private.mailInformation = data.mailInformation;
			
			if(_private.mailInformation.entityType == "task"){
				_private.changeTaskStatusAfterSendMail();
				return;
			}
			
				_private.historyForInvolvedContactMailOperation();
		},
		
		historyForInvolvedContactMailOperation : function(){
						
			sandbox.alert.message({text :" Updating Comments..please wait...", type:"success", time: 5000});

			var linkedEntityID = [];
						
			linkedEntityID.push(_private.mailInformation.entityID);
			
			var accountID = sandbox.cache.get("accountID");
			var historyComments  = "<b> Message : </b><br><br>" + _private.mailInformation.mailContents;
			var resolutionComments = _private.mailInformation.subject;
			
			var mapHistoryData = {}, emailAttachment = '',history={};
			
			mapHistoryData['subject'] = _private.mailInformation.subject;
			mapHistoryData['from'] = _private.mailInformation.from;
			mapHistoryData['to'] = _private.mailInformation.to;
			mapHistoryData['cc'] = _private.mailInformation.cc;
			mapHistoryData['bcc'] = _private.mailInformation.bcc;

			historyComments = _private.getToCcAndBccDetailForHistory({ mapData : mapHistoryData, historyComments :historyComments});			
			historyComments = "<div class='mailContents'>" + historyComments + "</div>";

			var listOfUploadedDocumentID = (_private.mailInformation.listOfUploadedDocumentID)?_private.mailInformation.listOfUploadedDocumentID:[];
			
			if(listOfUploadedDocumentID.length)
			{
			     for(var i = 0 ; i< listOfUploadedDocumentID.length; i++)
			    	 {
			    	 	var documentID = listOfUploadedDocumentID[i];
			    	 	var document = _private.mailInformation.documents[documentID];
			    	 	if(!!document)
							emailAttachment = emailAttachment + "<li data-document-id='"+documentID+"'  data-document-size='"+ document.size+"'  data-document-name='"+ document.name+"'> <label class=\"attachmentName\" style=\"text-decoration:underline; cursor: pointer\" onclick=\"downloadLinkedFile('"+ documentID + "')\"><strong style=\"color:#15c;\">"+document.name+"</strong><strong style=\"color:#777;\"> ("+Math.ceil((document.size)/1024)+"K) </strong></label></li>";
			    	 
			    	 }
			}

			if(emailAttachment != '' && !sandbox.util.isEmptyObject(emailAttachment))
			{
				emailAttachment = "<div class=\"outboundemail_attachment\"><p><b>" + listOfUploadedDocumentID.length + " Attachments</b></p><ul class=\"emailAttachment\">" + emailAttachment+"</ul></div>";
				historyComments = historyComments + emailAttachment;
			}

				history.departmentID = sandbox.cache.get("selectedDepartmentID");
				history.historyComments = historyComments;
				history.ownerID = sandbox.cache.get("loggedInUserID");
				history.ownerName = sandbox.cache.get("loggedInUserName");
				history.entityType = _private.mailInformation.entityType;
				history.type = 'sent';
				
				
				if(_private.mailInformation.entityType == "task")
						history.taskComments = sandbox.cache.get('tasks')[_private.mailInformation.entityID]['comments'];
				
				else{
					
					var contactName = '';
					var contactFromCache = sandbox.cache.get('contacts')[_private.involvedcontactID];
					
					if(contactFromCache['category'] == 'person')
						contactName = sandbox.util.getNameForContact(contactFromCache['firstName'], contactFromCache['lastName']);
					else if(contactFromCache['category'] == 'company')
						contactName = sandbox.util.getNameForContact(null,null,contactFromCache['fullName']);
					
					history.taskComments = 'Email ' + contactName + '(' + _private.mailInformation.to + ')';
				}
				
				if(_private.mailInformation.entityType == 'task'){
					
					history.type = 'outboundemail';
					history.taskID = _private.mailInformation.entityID;
					history.linkedContacts = [_private.involvedcontactID];
				}
				
				else if(_private.mailInformation.entityType == 'account'){
					history.linkedAccounts = linkedEntityID;
					history.linkedContacts = [_private.involvedcontactID];
				}
				
				else if(_private.mailInformation.entityType == 'deal'){
					history.linkedDeals = linkedEntityID;
					history.linkedContacts = [_private.involvedcontactID];
				}
								
				history.resolutionComments = _private.mailInformation.subject;
				
	 		    sandbox.ajax.requestDCM({url:"/services/data/v2.0/objects/History/insertHistory?apikey="+accountID, method:"POST", endpoint:"/insertHistory", data:history , callBack : _private.historyForMailOperationCallBack});
	 
		},
		
		historyForMailOperationCallBack : function(response){
			sandbox.publish("add-history",{ entityType : _private.mailInformation.entityType, entityID : _private.mailInformation.entityID, history : response.history});
		},
		
		removeContactCallBack : function(response) {
			
			if(!response.success) {
				sandbox.alert.message({text:"Try Again..."});
				return;
			}
			
			var deal = null, account = null, task = null, arrayOfContacts = null, linkedContacts = null;
			var mapOfContactsInCache = sandbox.cache.get("contacts"),contactID = response.contactID;
			
			arrayOfContacts = response.contacts;
			if(!sandbox.util.isEmptyObject(arrayOfContacts)) {
				
				sandbox.dom.each(arrayOfContacts, function(index, contact) {			
					mapOfContactsInCache[contact.id] = contact;
				});
				
				sandbox.cache.update({"contacts" : mapOfContactsInCache});
			}						
			
			switch(_private.entityType) {
				case "deal" :
					deal = response.deal;
					linkedContacts = deal.linkedContacts;
					sandbox.publish("refresh-deal-detail-header", { deal : deal});
					sandbox.publish("update-analytics", { category : "Delete", action : "Contact from Deal"});
					break;
				case "account" :				
					account = response.account;
					linkedContacts = account.linkedContacts;
					contactID = response['contactIdToRemove'];

					var contactIDToRemove = response.contactIdToRemove;
					
					mapOfContactsInCache =  sandbox.cache.get("contacts");
					var contactInCache =mapOfContactsInCache[contactIDToRemove];
					var linkedAccounts = contactInCache.linkedAccounts;
					
					var index = sandbox.dom.inArray(_private.entityID , linkedAccounts);
					
					if(index !== -1)
						linkedAccounts.splice(index,1);
					
					contactInCache.linkedAccounts = linkedAccounts;
					mapOfContactsInCache[contactIDToRemove] = contactInCache;
					sandbox.cache.update({"contacts" : mapOfContactsInCache});
					
					sandbox.publish("refresh-account-detail-header", { account : account });
					sandbox.publish("update-analytics", { category : "Delete", action : "Contact from Account"});
					break;
				case "task" :
					task = response.task;
					linkedContacts = task.linkedContacts;
					sandbox.publish("refresh-task-detail-header", { task : task});				
					break;
				default :
					break;
			}
			
			sandbox.publish("display-involved-contacts", { entityType : _private.entityType , entityID : _private.entityID, linkedContacts : linkedContacts});
			//to update alreadyLinkedContacts in contacts actions module
			sandbox.publish("linked-contacts-updated", {linkedContacts : linkedContacts});
			sandbox.publish('get-Activity-Log-For-Associations',{userName : sandbox.cache.get('loggedInUserName'), operation : "remove", subEntity:"Contact",
                url : '<a href="'+  sandbox.util.getEntityURL({ entityType : "contact", entityID : contactID}) +'" target = "_blank">'+ sandbox.util.getEntityURL({ entityType : "contact", entityID : contactID})+'</a>',
                entityType : _private.entityType, entityID : _private.entityID});
			
			sandbox.alert.hideMessage();
		},
		
		removeExistingDeal : function(e){
			
			var data = {};
			
			data["contactID"] = sandbox.url.entityID();
			data["dealID"] = sandbox.dom(event.target).parent().parent().attr("data-id");
			data["isAssociateContactOp"] = false;
			data["departmentID"] = sandbox.cache.get("selectedDepartmentID");
			
			sandbox.alert.message({text:"Saving...", type:"success"});
			sandbox.dom(".search-existing-deals").parent().parent().removeClass("open").parent().removeClass("open");
			sandbox.ajax.request({method : "PUT", url: "/relateContactToDeal", data : data, callBack: _private.removeExistingDeal_Callback});
		},
		
		removeExistingDeal_Callback : function(resultObject){
			
			
			var dealObj = resultObject.deal,
				contactID = resultObject.contactID,
				mapOfContactsInCache =  sandbox.cache.get("contacts"),
				contactObj = null, listOfLinkedDealsForContact = [];

			sandbox.publish("deal-updated",{id: dealObj.id, obj: dealObj});
			
			contactObj = mapOfContactsInCache[contactID];
			listOfLinkedDealsForContact = contactObj['linkedDeals'];

			
			
			var indexOfDealIdInList = sandbox.dom.inArray(dealObj.id,listOfLinkedDealsForContact);
			

			listOfLinkedDealsForContact.splice(indexOfDealIdInList,1);
			listOfLinkedDealsForContact.splice(indexOfDealIdInList,1);
			
			
			mapOfContactsInCache[contactID]['linkedDeals'] = listOfLinkedDealsForContact;
			sandbox.cache.update({ contacts : mapOfContactsInCache });

			
			sandbox.alert.message({text: "Contact has been removed successfully from this deal", time : 2000});
			sandbox.publish("contact-otherinfo-fetched", {obj: mapOfContactsInCache[contactID]});
			
			sandbox.publish('get-Activity-Log-For-Associations',{userName : sandbox.cache.get('loggedInUserName'), operation : "remove", subEntity:"Contact",
                url : '<a href="'+  sandbox.util.getEntityURL({ entityType : "contact", entityID : contactID}) +'" target = "_blank">'+ sandbox.util.getEntityURL({ entityType : "contact", entityID : contactID})+'</a>',
                entityType : "deal", entityID : dealObj.id});

			sandbox.publish("update-analytics", { category : "Delete", action : "Deal from Contact", label : sandbox.cache.get("loggedInUserEmail") + "-" + sandbox.cache.get("accountID") });
		},
		
		showWebPopup : function(webAddress){
			
			var myUrl = /https:/;
		
			var size=webAddress.search(myUrl);
			if ((size==-1))
			 { 
				  webAddress1 = webAddress.replace("http://","");
				  webAddress2 = webAddress1.replace("www.","");
				  
				  window.open('http://'+webAddress2);				
			 }
			else
				window.open(webAddress);
					
			
		}
		
		
		
	};
	
	var api = {
			
			init : function() {
				
				_self = this;
				_private.phoneNoClass = ".contact-phoneNo-dial";
				_private.emailClass = ".contact-email-sendmail"; 
				_private.smsClass = ".icon-comments-o";
				
				sandbox.subscribe("display-involved-contacts", _self.displayInvolvedContacts);
				sandbox.subscribe("fetched-timezone-info", _self.updateLocalTime);	
				sandbox.subscribe(sandbox.moduleName+"-email-sent",_private.emailSentCallBackForInvolvedContacts);//involved-contacts-email-sent
				sandbox.subscribe("remove-existing-deal", _private.removeExistingDeal);
			},
			
			destroy : function() {
				sandbox.unsubscribe();
			},
			
			displayInvolvedContacts : function(data) {			
				return _private.displayInvolvedContacts(data);
			},
			
			updateLocalTime : function(data) {
				_private.updateLocalTime(data);
			}
	};
	
	/* Exposing private methods for test suites - START */
	
	api._private = _private;
	
	/* Exposing private methods for test suites - END */
	
	return api;
});

//Code for - bind event for involved contact btns, Add Existing Contact - Deal, Account and Task 
DSCRM.Core.registerModule("contacts-actions", ["ajax", "cache", "util", "alert", "url"], function(sandbox) {
	
	var _self = null,
		_existingContactBtn = null,
		_newContactBtn = null,
		_contactActionsEl = null,
		_contactPopoverEl = null,
		_searchExistingContactsEl = null,
		_existingContactsListEl = null,
		_searchResultContactEl = null,
		_linkedAccount = {},
		_listOfLinkedContacts = [],
		_listOfAccountContactsNotInCache = [],
		_start = 0,
		_end = 0,
		_LIMIT = 10,
		_taskID = '',
		_isWaitingForAccountContact = true;
		_searchExistingContactsTemplates = dscrm.templates.search.searchResultsForExistingContacts,
		
	bindEventsForContactActions = function(data) {
		
		if(sandbox.util.isEmptyObject(data))
			return;
		
		var entityType = data.entityType, entityID = data.entityID,
			account = null;
			
		
		if(!entityType)
			return;
		
		//updating the linkedcontacts
		if(!sandbox.util.isEmptyObject(data.linkedContacts))
			_listOfLinkedContacts = data.linkedContacts;
		else
			_listOfLinkedContacts = [];
		
		
		switch(entityType.toLowerCase()) {
		
			case "deal" :
				_contactActionsEl = sandbox.dom("#deal-actions");
				 break;
			case "account" :
				_contactActionsEl = sandbox.dom("#account-actions");
				 break;
			case "contact" :
				_contactActionsEl = sandbox.dom("#contact-actions");
				 break;
			case "task" :
				_contactActionsEl = sandbox.dom("#task-actions");
				if(sandbox.util.isEmptyObject(data.linkedAccount)){
					//there wont be task-detail-linkedAccount-fetched if the task doesnt have linked account so resetting the linkedAccount and removing the add existing contact button from dom
					_linkedAccount = {};
					sandbox.dom('#task-involved-contacts').addClass('hide');
					_contactActionsEl.hide();
				}else
					_contactActionsEl.show();
				break;
			default :
				break;
		}
		
		_newContactBtn = _contactActionsEl.find(".add-new-contact-btn");
		_existingContactBtn = _contactActionsEl.find(".existing-contact-btn");		
		_searchExistingContactsEl = _contactActionsEl.find(".search-existing-contact");
		_existingContactsListEl = _contactActionsEl.find("ul.existing-contacts-search-results");
		_searchResultContactEl  = _contactActionsEl.find("ul.existing-contacts-search-results li");
		
		_newContactBtn.off().on("click", function(){
			sandbox.publish("show-new-contact-popup",{});
		});
		
		_existingContactBtn.off().on("click", function(e) {
			
			if(sandbox.dom(e.target).parent().parent().is("#task-actions") && _isWaitingForAccountContact){
				sandbox.alert.message({text:"Please wait, contacts are being fetched." ,time:3000});
				return;
			}
			
			if(sandbox.dom(e.target).parent().hasClass("open")) {
				sandbox.dom(e.target).parent().removeClass("open");
				_existingContactsListEl.empty();
				//hiding the contact-moreinfo incase user users keyboard nav and closes it
				hideMoreInfo();
				return;
			}
			
			_existingContactsListEl.empty();
			sandbox.dom(e.target).parent().removeClass("open").addClass("open");
			
			if(sandbox.dom(e.target).parent().parent().is("#task-actions"))
				getExistingContactsUnderAccount();
			else
				_searchExistingContactsEl.val('').focus();
			
		});

		_searchExistingContactsEl.off().on("keyup", function(e) {
			//Ignoring left and right keys
			if(e.which == 37 || e.which == 39 ){
				return;
			}
			//up/down key for navigating the list
			else if(e.which == 40 || e.which == 38){
				navigateSearchList(e);
				return;
			}
			//enter key to add the selected contact 
			else if(e.which == 13){
				_existingContactsListEl.find('li.selected-contact span.btn').trigger('click');
				return;
			}
			
			searchExistingContacts(e);
		});
		
		_existingContactsListEl.off().on("click", "li span.btn", function(e) {
			addExistingContactToEntity(e);
		});
		
	},
	
	checkAndCloseSearchList = function(e){
		if(sandbox.dom(e.target).parents(".existingcontact_holder").length == 0)
			closeSearchList(e);
	},
	
	showMoreInfo = function(target){
		
		var contactEl = _contactActionsEl.find(target),
			contactPopoverEl = null,
			contactID = contactEl.attr('id'),
			data = {},
			contactMethods  =[],
			contactObj,
			leadsCache = {},
			contactUrl = contactEl.find('a').attr('href');
		
		contactEl.addClass('selected-contact').siblings().removeClass('selected-contact');
		
		contactObj = sandbox.cache.get('contacts')[contactID];
		
		if(sandbox.util.isEmptyObject(contactObj))
			leadsCache = sandbox.cache.get("leads");
			
		if(!sandbox.util.isEmptyObject(leadsCache))
			 contactObj = leadsCache[contactID];
		
		if(contactEl.parents('#contacts').length > 0) {
			contactPopoverEl = sandbox.dom('#contacts').find('.contact-moreinfo');
			contactPopoverEl.css('left','340px');
		}else if(contactEl.parents('#accountDetail').length > 0){
			contactPopoverEl = sandbox.dom('#accountDetail').find('.contact-moreinfo');
		}else if(contactEl.parents('#dealDetail').length > 0){
			contactPopoverEl = sandbox.dom('#dealDetail').find('.contact-moreinfo');
		}else if(contactEl.parents('#taskDetail').length > 0){
			contactPopoverEl = sandbox.dom('#taskDetail').find('.contact-moreinfo');
		}
		
		
		if(sandbox.util.isEmptyObject(contactObj))
			return;
		
		if(contactObj['category'] === 'person') {
			data['name'] = sandbox.util.getPersonName(contactObj.firstName, contactObj.lastName);
		} else {
			data['name'] = contactObj.fullName;
		}
		
		data['entityType'] = contactObj['category'];
		data['type'] = contactObj['type'];
		
		if(contactUrl.indexOf('contact') != -1 || contactUrl.indexOf('lead') != -1){
			
			if(!sandbox.util.isEmptyObject(contactObj['linkedContactMethods'])){
				sandbox.dom.each(contactObj['linkedContactMethods'], function(key ,value){
					contactMethods.push(value);
				});
				data['contactMethods'] = contactMethods;
			}
			
			if(!sandbox.util.isEmptyObject(contactObj['linkedDeals']))
				data['linkedDeals'] = contactObj['linkedDeals'];
			if(!sandbox.util.isEmptyObject(contactObj['linkedAccounts']))
				data['linkedAccounts'] = contactObj['linkedAccounts'];
		
			data['createdDate'] = sandbox.util.formatDate(new Date(contactObj['createdDate']),'MM/dd/yy ');
			data['productName'] = sandbox.cache.getProductName(contactObj['brandID']);
		
		}else{
			return;
		}
		
		data['ID'] = contactID;
		data['staticContentUrl'] = sandbox.cache.get("commonDataStorageURL");
		
		contactPopoverEl.html(dscrm.templates.search.contactsMoreInfo(data));
		contactPopoverEl.removeClass('hide');
		
		var contactPopoverHeight = contactPopoverEl.height();
		
		var offset = contactEl.offset();
		
		
		
		//To move down the popover incase if the popover position is beyond viewport
		//var isPopoverVisible= sandbox.util.isElementInViewport(contactPopoverEl);
//		if(isPopoverVisible)
			contactPopoverEl.offset({ top: offset.top-(contactPopoverHeight/2), left: offset - 400});
//		else
//			contactPopoverEl.offset({ top: offset.top, left: offset - 300});
		
	},
	
	//Up/Down btn handlers
	navigateSearchList = function(e){
		
		//if search list has no items return
		if(_existingContactsListEl.children().length == 0)
			return;
		
		var selectedContactEl = _existingContactsListEl.find('.selected-contact'),
			firstContactEl = _existingContactsListEl.find('li:first-child'),
			lastContactEl  = _existingContactsListEl.find('li:last-child'),
			nextContactEl,
			prevContactEl;
		
		if(e.which == 40){
			// if no contact is currently selected in the search list, select the first li element in the search list  
			if(selectedContactEl.length == 0){
				_existingContactsListEl.find('li:first-child').addClass('selected-contact');
			}else{
				//get the next element, if its the last contact, get the first contact
			    nextContactEl = selectedContactEl.next('li').length ? selectedContactEl.next('li') : firstContactEl;
			    selectedContactEl.removeClass("selected-contact");
			    nextContactEl.addClass('selected-contact');
			}
			
		}
		else if(e.which == 38){
			
			if(selectedContactEl.length == 0){
				_existingContactsListEl.find('li:last-child').addClass('selected-contact');
			}else{
				//get the prev element, if its the first contact, get the last contact
			    prevContactEl = selectedContactEl.prev('li').length ? selectedContactEl.prev('li') : lastContactEl;
			    selectedContactEl.removeClass("selected-contact");
			    prevContactEl.addClass('selected-contact');
			}
			
		}
		
		//show contact-moreinfo for selected contact
		showMoreInfo("#"+_existingContactsListEl.find('.selected-contact').attr('id'));
		
	},
	
	closeSearchList = function(e){
		
		if(!_contactActionsEl)
			return;
		
		var _searchPanelEl = _contactActionsEl.find(".existingcontact_holder .dropdown-menu.open");
		
		//check whether the click is outside search panel
	    if (!_searchPanelEl.is(e.target) && _searchPanelEl.has(e.target).length === 0){
	    	//Hiding all contact-moreinfo popovers
	    	hideMoreInfo();
	    	//hiding the search dropdown
	    	hideSearchListing();
	    	//Removing the event handler
	    	//sandbox.dom(document).off('mouseup',checkAndCloseSearchList );
	    }
	    
	},
	
	hideSearchListing = function(){
		sandbox.dom(".existingcontact_holder.open").removeClass("open");
		//_contactActionsEl.find(".existingcontact_holder .dropdown-menu.open").removeClass("open")
		_existingContactsListEl.empty();
	},
		
	//For fetching contacts under an account in task detail page
	getExistingContactsUnderAccount = function(){
		var linkedContacts = _linkedAccount.linkedContacts;
		
		var mapOfContactsInfoInCache = sandbox.cache.get("contacts"), 
			arrayOfContactsNotInCache = [], mapOfContactsInCache = {};
		
		sandbox.dom.each(linkedContacts, function(index, contactID) {
			
			if(mapOfContactsInfoInCache.hasOwnProperty(contactID)){
				mapOfContactsInCache[contactID] = mapOfContactsInfoInCache[contactID];
				return true;
			}
			
			arrayOfContactsNotInCache.push(contactID);
		});
		
		_existingContactsListEl.empty().append("<li> <span class='icon-spinner loading-search-list'> Loading..</span></li>");
		_existingContactsListEl.parent().removeClass("open").addClass("open");
		
		
		showExistingContactsUnderAccount(mapOfContactsInCache);
		
	},
	
	showExistingContactsUnderAccount = function(mapOfContactsInfo) {
				
		if(sandbox.util.isEmptyObject(mapOfContactsInfo))
			return;
		
		var data = {}, listOfData = [];
		sandbox.dom.each(mapOfContactsInfo, function(contactID, contact){
		
		//getting contacts already linked with task
			
		var taskLinkedContacts = sandbox.cache.get("tasks")[sandbox.url.entityID()].linkedContacts;	
			
		//ignore showing the contact is already linked to the task
		if ( sandbox.dom.inArray( contactID, taskLinkedContacts) > -1 )
			return;
			
		data = {};
		data.contactID = contactID;
		data.category = contact.category;
		
		if(contact.category === 'person') {
			data.name = sandbox.util.getPersonName(contact.firstName, contact.lastName);
		} else {
			data.name = contact.fullName;
		}
		
		//TODO:not sure what this block does
		if(sandbox.url.page() == 'contact') {
			if(contact.category == 'person')
				listOfData.push(data);
		}
		else
			listOfData.push(data);
		});
		
		_existingContactsListEl.empty().append(_searchExistingContactsTemplates({contactsList: listOfData, appURL : sandbox.cache.get("appURL") }));
		_existingContactsListEl.parent().removeClass("open").addClass("open");
		
		//For showing contact-moreinfo popover
		_contactActionsEl.on("mouseenter","ul.existing-contacts-search-results li",function(e){
			showMoreInfo(e.currentTarget);
		});
		
		//For hiding contacts-moreinfo during mouseout
		_contactActionsEl.on("mouseleave","ul.existing-contacts-search-results", function(){
			hideMoreInfo();
		});
		
	},
	//End for task page contacts listing
	searchExistingContacts = sandbox.util.debounce(function(e) {
		
		if (e.keyCode==38 || e.keyCode==40)
			return;
		
		var searchString = e.target.value;
		if(searchString.length < 3) 
			return;
		
		_existingContactsListEl.empty().append("<li> <span class='loading-search-list icon-spinner'> Loading..</span></li>");
		_existingContactsListEl.parent().removeClass("open").addClass("open");
		
		var data = {};
		data['searchBy'] = 'all';
		data['queryString'] = searchString;
		data['departmentID'] = sandbox.cache.get("selectedDepartmentID");
		
		var url = "/search/searchForContact_v1";
		sandbox.ajax.request({method: "POST", url : url, endpoint: "/searchForContact_v1", data : data, callBack : searchExistingContactsCallback});		
	}, 250),
	
	searchExistingContactsCallback = function(response) {
		
				
		if(!response.success) {
			return;
		}
		
		var queryString = response.queryString,
			arrayOfContacts = response.contact,
			contactsCache = null;
		
		if(sandbox.util.isEmptyObject(arrayOfContacts)) {
			_existingContactsListEl.empty();
			return;
		}
		
		var contactsCache = sandbox.cache.get("contacts");
		var leadsCache = sandbox.cache.get("leads");
		
		if(sandbox.dom.isArray(arrayOfContacts)) {
			
			sandbox.dom.each(arrayOfContacts, function(index, contact){
				
				if(contact.type === "contact")
					contactsCache[contact.id] = contact;
				else if(contact.type === "lead")
					leadsCache[contact.id] = contact;
					
			});
		}
		
		showSearchExistingContactsResults(arrayOfContacts);
	},
	
	showSearchExistingContactsResults = function(arrayOfContacts) {
				
		if(sandbox.util.isEmptyObject(arrayOfContacts))
			return;
		
		var data = {}, listOfData = [];
		
		sandbox.dom.each(arrayOfContacts, function(index, contact){
						
			data = {};
			data.contactID = contact.id;
			data.category = contact.category;
			
			//ignore contacts that are already linked
			if ( sandbox.dom.inArray( contact.id, _listOfLinkedContacts) > -1 )
				return true;
			
			if(contact.category ==='person') {
				data.name = sandbox.util.getPersonName(contact.firstName, contact.lastName);
			} else {
				data.name = contact.fullName;
			}
			
			if(sandbox.url.page() === 'contact') {
				if(contact.category == 'person')
					listOfData.push(data);
			}
			else
				listOfData.push(data);
		});
				
		_existingContactsListEl.empty().append(_searchExistingContactsTemplates({contactsList: listOfData, appURL : sandbox.cache.get("appURL") }));
		_existingContactsListEl.parent().removeClass("open").addClass("open");
		_contactActionsEl.on("mouseenter","ul.existing-contacts-search-results li",function(e){
			showMoreInfo(e.currentTarget);
		});
		
		//For hiding contacts-moreinfo during mouseout
		_contactActionsEl.on("mouseleave","ul.existing-contacts-search-results", function(){
			hideMoreInfo();
		});
		
	},
	
	hideMoreInfo = function(){
		//Hiding every .contact-moreinfo irrespective of page
		sandbox.dom('.contact-moreinfo').addClass('hide');
	},
	
	addExistingContactToEntity = function(event) {
		
		var contactID = sandbox.dom(event.target).parent().attr("id");
		
		var entityType = sandbox.url.page(), entityID = sandbox.url.entityID(), url = null, urlMethod = null, callBack = null, endpoint = null;
		
		var data = {};
		
		data.contactID = contactID;		
		
		switch(entityType) {
			case "deal" :
				
				var deal = sandbox.cache.get("deals")[entityID];
				var linkedContacts = deal.linkedContacts;
				
				if( !sandbox.util.isEmptyObject(linkedContacts) && linkedContacts.indexOf(contactID) !== -1) {
					sandbox.alert.message({text:"Contact already exist", time : 4000});
					return;
				}
				
				data.dealID = entityID;	
				data.isAssociateContactOp = true;
				data.departmentID = sandbox.cache.get("selectedDepartmentID");
				url = "/relateContactToDeal"; urlMethod = "PUT";
				endpoint = "/relateContactToDeal";

				break;
				
			case "task" :
			
				var task = sandbox.cache.get("tasks")[entityID];
				var linkedContacts = task.linkedContacts;
				
				if(!sandbox.util.isEmptyObject(linkedContacts) && linkedContacts.indexOf(contactID) != -1) {
					sandbox.alert.message({text : "Contact already associated with the task...Try again with another Contact...", time : 6000});
					return;
				}
				
				data.contactID = contactID;
				data.taskID = entityID;
				url = "/addExistingContactToTask"; urlMethod = "POST";
				endpoint = "/addExistingContactToTask";
				
				break;
			case "account" :
				//TODO:Throws error account not in cache
				var account = sandbox.cache.get("accounts")[entityID];
				var linkedContacts = account.linkedContacts;
				
				if(!sandbox.util.isEmptyObject(linkedContacts) && linkedContacts.indexOf(contactID) !== -1) {
					sandbox.alert.message({text:"Contact already exist", time : 4000});
					return;
				}
				
				data.property = "contactIdsToAdd";
				data.contactIdsToAdd = [contactID];
				data.departmentID = sandbox.cache.get("selectedDepartmentID");
				
				url = "/"+ entityID +"/updateAccount"; urlMethod = "PUT";
				endpoint = "/updateAccount";
				
				break;			
			case "contact":
				
				var company = sandbox.cache.get("contacts")[entityID],
					linkedContacts = company.linkedContacts,
					linkedContactsNew = [], linkedContactsMap = {}, contactObjForUpdate = {};
				
				if(!sandbox.util.isEmptyObject(linkedContacts))
					linkedContactsNew = sandbox.dom.extend([], linkedContacts);
				
				if(linkedContacts.indexOf(contactID) !== -1) {
					sandbox.alert.message({text:"This person is already associated with the company", time : 4000});
					return;
				}
				
				if(!sandbox.dom.isEmptyObject(sandbox.cache.get("contacts")[contactID])) {
					var linkedContactsOfPerson = sandbox.cache.get("contacts")[contactID]['linkedContacts'];
					
					if(!sandbox.dom.isEmptyObject(linkedContactsOfPerson) && linkedContactsOfPerson.length > 0){
						sandbox.alert.message({text:"Cannot associate one person to multiple companies", time : 4000});
						return;
					}
				}
				
				//hiding contact-moreinfo popover
				hideMoreInfo();
				
				data = {};
				
				linkedContactsNew.push(contactID);
				
				linkedContactsMap['linkContacts'] = linkedContactsNew;
				contactObjForUpdate['linkedContacts'] = linkedContactsMap;
				
				data['contactID'] = entityID;
				data['contactObj'] = contactObjForUpdate;
				data['inputId'] = "linkedContacts";
				data['personID'] = contactID;
				
				url = "/addExistingPersonToCompany"; urlMethod = "POST";
				endpoint: "/addExistingPersonToCompany";
			default :
				break;
		}
		
		_existingContactsListEl.parent().removeClass("open").parent().removeClass("open");
		
		sandbox.alert.message({text:"Adding Contact..."});
		sandbox.ajax.request({method : urlMethod, url: url, endpoint: endpoint, data : data, callBack: addExistingContactToEntityCallBack});							
	},
	
	addExistingContactToEntityCallBack = function(response) {
		
		if(!response.success) {
			sandbox.alert.message({text:"Try Again..."});
			return;
		}
		
		
		
		var entityType = sandbox.url.page(), entityID = sandbox.url.entityID(), deal = null, 
			account = null, contactsMap = null, arrayOfContacts = null, task = null, linkedContacts = null,
			contactID = response.contactID;
		
		arrayOfContacts = response.contacts;
		var mapOfContactsInCache = sandbox.cache.get("contacts");
		
		if(!sandbox.util.isEmptyObject(arrayOfContacts)) {
			sandbox.dom.each(arrayOfContacts, function(index, contact) {			
				mapOfContactsInCache[contact.id] = contact;
			});
		}
		
		sandbox.alert.hideMessage();
		
		sandbox.cache.update({"contacts" : mapOfContactsInCache});
		
		switch(entityType) {
			case "deal" :
				deal = response.deal;
				linkedContacts = deal.linkedContacts;
				sandbox.publish("deal-updated",{id : entityID, obj : deal});
				sandbox.publish("refresh-deal-detail-header", { deal : deal});
				sandbox.publish("display-involved-contacts", { entityType : entityType , entityID : entityID, linkedContacts : linkedContacts});
				break;
				
			case "account" :				
				account = response.account;
				linkedContacts = account.linkedContacts;
				contactID = response['contacts'][0]['id'];
				sandbox.publish("account-updated",{id : entityID, obj : account});
				sandbox.publish("refresh-account-detail-header", { account : account });
				sandbox.publish("display-involved-contacts", { entityType : entityType , entityID : entityID, linkedContacts : linkedContacts});
				break;
				
			case "task" :
				
				task = response.task;
				linkedContacts = task.linkedContacts;
				contactID = response.contact.id;
				sandbox.publish("task-updated",{id : entityID, obj : task});
				sandbox.publish("refresh-task-detail-header",{task : response.task});
				sandbox.publish("display-involved-contacts", { entityType : entityType, entityID : entityID	, linkedContacts : linkedContacts});
				break;
				
			case "contact" :
				
				var personID = response['personID'];
				
				if(response['isPersonAlreadyLinked']) {
					sandbox.alert.message({text:"Cannot associate one person to multiple companies", time : 4000});
					return;
				}
				
				if(!sandbox.util.isEmptyObject(mapOfContactsInCache[personID]))
					mapOfContactsInCache[personID]['linkedContacts'] = [response['contactID']];
				
				if(response['isPersonLead'] && !sandbox.util.isEmptyObject(sandbox.cache.get("leads")[personID]))
					delete sandbox.cache.get("leads")[personID];
				
				sandbox.publish("contact-otherinfo-fetched", {obj: mapOfContactsInCache[entityID]});
			default :
				break;
		}
		
		//update the linkedcontacts 
		_listOfLinkedContacts = linkedContacts;
		sandbox.publish('linked-contacts-updated',{linkedContacts : linkedContacts});
		
		
		sandbox.publish('get-Activity-Log-For-Associations',{userName : sandbox.cache.get('loggedInUserName'),
			                                           operation : "existing", subEntity:"Contact",
			                                           url : '<a href="'+  sandbox.util.getEntityURL({ entityType : "contact", entityID : contactID}) +'" target = "_blank">'+ sandbox.util.getEntityURL({ entityType : "contact", entityID : contactID})+'</a>',
			                                           entityType : entityType, entityID : entityID});
		
		sandbox.alert.hideMessage();
		sandbox.publish("add-update-contacts-popup-hide-popup",{});
		
	},
	
	updateListOfLinkedAccount = function(data){
		_listOfLinkedContacts = data.linkedContacts;
	},
	
	updateLinkedAccount = function(data){
		_taskID = data.task.id
		
		//update the linkedAccount object based on current task detail page opened also enable the add existing contacts button if there are atleast 1 linked contact in an account
		_linkedAccount = data.account;
		
		//show task actions based on the the no of contacts in linked account
		if(sandbox.util.isEmptyObject(data.account.linkedContacts))
			sandbox.dom('#task-actions').addClass('hide');
		else
			sandbox.dom('#task-actions').removeClass('hide');
		
		//check contacts cache and add linked contact not in cache 10 by 10
		_isWaitingForAccountContact = true;
		fetchAccountContactsNotInCache("init");
	
	},
	
	fetchAccountContactsNotInCache = function(response){
		
		if(sandbox.util.isEmptyObject(_linkedAccount.linkedContacts)){
			_isWaitingForAccountContact = false;
			return;
		}
		
		//reset the loop variable and setting generating list of linked contact not in cache
		if(response == "init"){
			_start = 0;
			_end = 0;
			_listOfAccountContactsNotInCache = [];
			var contactsCache = sandbox.cache.get("contacts");
			
			sandbox.dom.each( _linkedAccount.linkedContacts , function(idx, contactID) {
				
				if(!contactsCache.hasOwnProperty(contactID))
					_listOfAccountContactsNotInCache.push(contactID);
				
			});
			
			if(sandbox.util.isEmptyObject(_listOfAccountContactsNotInCache)){
				_isWaitingForAccountContact = false;
				return;
			}
			
		}
		
		if(!sandbox.util.isEmptyObject(response) && response.success) {
			
			if(response.uniqueRequestID != sandbox.url.page()+sandbox.url.entityID()){
				_isWaitingForAccountContact = false;
				return;
			}
				
			var arrayOfContacts = response.contact;
			var contactsCache = sandbox.cache.get("contacts");
			
			sandbox.dom.each(arrayOfContacts, function(index, contact){
				
				if(contact.type === "contact")
					contactsCache[contact.id] = contact;
				
			});
		}
		
		var contactsCount = _listOfAccountContactsNotInCache.length
		
		if(contactsCount === _end) {
			_isWaitingForAccountContact = false;
			return;
		}else{
			_start = _end;
			if((contactsCount - _end) > _LIMIT)
				_end = _start + _LIMIT;
			else
				_end = contactsCount;
		}
		
		var arrayOf10Contacts = _listOfAccountContactsNotInCache.slice(_start, _end);
		
		var url = "/services/data/v2.0/objects/Contact/getReqContacts?ignore=deleted&apikey="+sandbox.cache.get("accountID"),
			data = {};
	
		data.contact = arrayOf10Contacts;
		data.uniqueRequestID = "task"+_taskID;	
		
		sandbox.ajax.requestDCM({method:"POST", url: url, endpoint:"/getReqContacts", data: data, callBack: fetchAccountContactsNotInCache});
		
	};
	
	return {
		
		init : function() {
			
			_self = this;
			sandbox.subscribe("bind-events-for-contact-actions", _self.bindEventsForContactActions);
			//Added for task detail page linked 
			sandbox.subscribe("task-detail-linkedAccount-fetched", updateLinkedAccount);
			//added for updating _listoflinkedcontacts after a contact is added in involved contacts section
			sandbox.subscribe("linked-contacts-updated", updateListOfLinkedAccount)
			sandbox.subscribe("contact-actions-update-account", updateLinkedAccount);
			
			sandbox.dom(document).on("mouseup", checkAndCloseSearchList);
		},
		
		bindEventsForContactActions : function(data) {
				bindEventsForContactActions(data);
		},
		
		destroy : function() {
				sandbox.unsubscribe();
		}
		
	};
	
});


//Code for - New Contact - Deal, Account , Update Contact - Deal, Account, Task
DSCRM.Core.registerModule("add-update-contacts-popup", ["ajax","cache","util","alert", "url"], function(sandbox) {
	
	var _self = null,
		_contactIDForUpdate = null,
		_mapOfStandardCMTitles = {},
		_mapOfStandardLocationTitles = {},
		_mapOfStandardCMTitleToLabel = {},
		_mapOfStandardLocationTitleToLabel = {},
		_addOrUpdatePopUpEl = null,
		_addOrUpdatePopUpHeaderEl = null,
		_addOrUpdatePopUpBodyEl = null,
		_addOrUpdatePopUpFooterEl = null,
		_addOrUpdatePopUpSaveEl = null,
		_addOrUpdatePopUpCancelEl = null,
		_addOrUpdatePopUpHeaderID = null,
		_addOrUpdatePopUpBodyID = null,
		_addOrUpdatePopUpPhotoUploadID = null,
		_alreadyLinkedCompanyID = null,
		_uniqueRequestID = "",
		_sourceOptions = [],
		_contactIDForPopup = null,
		_isEditContactPopup = false,
		_addOrUpdatePopTemplate = dscrm.templates.contacts.addOrUpdateContactPopUpBody,
		_phoneForAddOrUpdateContactPopUp = dscrm.templates.contacts.phoneForAddOrUpdateContactPopUp,
		_faxForAddOrUpdateContactPopUp = dscrm.templates.contacts.faxForAddOrUpdateContactPopUp,
		_emailForAddOrUpdateContactPopUp = dscrm.templates.contacts.emailForAddOrUpdateContactPopUp,
		_socialForAddOrUpdateContactPopUp = dscrm.templates.contacts.socialForAddOrUpdateContactPopUp,
		_websiteForAddOrUpdateContactPopUp = dscrm.templates.contacts.websiteForAddOrUpdateContactPopUp,
		_addressForAddOrUpdateContactPopUp = dscrm.templates.contacts.locationForAddOrUpdateContactPopUp,
		_companyOptionsForAddOrUpdateContactPopUp = dscrm.templates.contacts.companyOptionsForAddOrUpdateContactPopUp,
		
	loadTagsUnderAccount = function() {
		
		var tagsCache = sandbox.cache.get("tags"),
			tags = [], source = [], linkedTagNames = [], 
			filteredTagsCache = sandbox.util.filterByDepartmentID(tagsCache);
		
		if(!sandbox.util.isEmptyObject(filteredTagsCache)) {
			
			sandbox.dom.each(filteredTagsCache, function(tagID, tagInfo) {
				source.push(tagInfo.name);
			});
		}
		
		tags = source;
		
		if(_isEditContactPopup && !!_contactIDForPopup) {
			var contact = sandbox.cache.get("contacts")[_contactIDForPopup];
			var arrayOfTagIDs = contact.linkedTags;
			
			if(!sandbox.util.isEmptyObject(arrayOfTagIDs)) {
				sandbox.dom.each(arrayOfTagIDs, function(index, tagID) {
					if(tagsCache.hasOwnProperty(tagID))
						linkedTagNames.push(tagsCache[tagID].name);			
				});
			}
			
			tags = sandbox.dom(tags).not(linkedTagNames).get();
		}
		
		_addOrUpdatePopUpEl.find("[data-type='tags'] input").tokenfield('destroy');
		_addOrUpdatePopUpEl.find("[data-type='tags'] input").tokenfield({
			  autocomplete: {
		    					source: tags,
		    					delay: 100,
		    					create : function(event, ui){
		    							_addOrUpdatePopUpEl.find("[data-type='tags'] input").on("tokenfield:createtoken", function (event) {
		    							tags = sandbox.dom(tags).not([event.attrs.value]).get();
		    							_addOrUpdatePopUpEl.find("[data-type='tags'] input").data("bs.tokenfield").$input.autocomplete({source: tags });
		    		  			  });
		    		  			  
		    							_addOrUpdatePopUpEl.find("[data-type='tags'] input").on('tokenfield:removetoken', function (event) {
		    							tags = sandbox.dom.merge( tags , [event.attrs.value] );
		    		    				_addOrUpdatePopUpEl.find("[data-type='tags'] input").data("bs.tokenfield").$input.autocomplete({source: tags });
		    		  			  });
		    		    		  
		    		    		  }
				  			},
			  showAutocompleteOnFocus: true,
			  allowEditing: false
			
		});
		
		_addOrUpdatePopUpEl.find("[data-type='tags'] input").on('tokenfield:createtoken', function(event){
			
			var existingTokens = $(this).tokenfield('getTokens');
			
			if(sandbox.util.containsSpecialChars(event.attrs.value)){
				event.preventDefault();
				sandbox.alert.message({text:"Tag name contains invalid character", type: "warning", time : 3000});
				return;
			}
			
		    sandbox.dom.each(existingTokens, function(index, token) {
		        if (token.value === event.attrs.value)
		            event.preventDefault();
		    });
		    
		    var tagName = event.attrs.value;
			
			if(existingTokens.indexOf(tagName) !== -1) {
				sandbox.alert.message({text:"Same tag can't be added again", type: "warning", time : 4000});
				event.preventDefault();
			}
		    
		});
	},
	
	loadDefaultHtmlForCategory = function(category) {
		
		if(!category)
			return;
		
		var staticContentURL = sandbox.cache.get("staticContentURL"), image = null;
		
		switch(category) {
			case 'person' :
				image = staticContentURL + "/images/personlogo_icon.png";
				break;
			case 'company' :
				image = staticContentURL + "/images/companylogo_icon.png";
				break;
			default :
				break;
		}
		
		var data = {};		
		data.enablePhotoUpload = false;
		data.category = category;
		data.photoID = image;
		data.products = sandbox.cache.get("productNames");
		data.sourceOptions = _sourceOptions;
		
		var entityType = sandbox.url.page(), entityID = sandbox.url.entityID();
		if(entityType === "contact") {
			
			var company = sandbox.cache.get("contacts")[entityID];
			var companyInfoToUI = {};
			companyInfoToUI.name = company.fullName;
			companyInfoToUI.newcompanyid = company.id;
			companyInfoToUI.disableEdit = true;
			data.companyInfo = companyInfoToUI;
			data.enableHeader = true;
			data.companyHeaderDisabled = true;
		} else{
			data.enableHeader = true;
			data.companyHeaderDisabled = false;
		}		
		
		var linkedContactMethods = [], contactMethod = {};
		contactMethod.type = "phone"; contactMethod.deleted = false; linkedContactMethods.push(contactMethod);
		contactMethod = {}; contactMethod.type = "email"; contactMethod.deleted = false; linkedContactMethods.push(contactMethod);
		data.linkedContactMethods = linkedContactMethods;
		
		var linkedLocations = [], location = {};
		location.deleted = false; linkedLocations.push(location);
		data.linkedLocations = linkedLocations;
				
		_addOrUpdatePopUpEl.find(_addOrUpdatePopUpHeaderID).remove(); 
		_addOrUpdatePopUpEl.find(_addOrUpdatePopUpBodyID).remove();
		_addOrUpdatePopUpFooterEl.before(_addOrUpdatePopTemplate(data));
		_addOrUpdatePopUpHeaderEl = _addOrUpdatePopUpEl.find(_addOrUpdatePopUpHeaderID);
		_addOrUpdatePopUpBodyEl = _addOrUpdatePopUpEl.find(_addOrUpdatePopUpBodyID);
		
		_addOrUpdatePopUpEl.find("[data-select]").selectpicker('refresh');
		_addOrUpdatePopUpEl.find("[data-select='products-option']").selectpicker('setStyle', 'btn-sm', 'add');
		bindEventsForHeader();
		bindEventsForBody();
		
		_isEditContactPopup = false;
		loadTagsUnderAccount();
		
		sandbox.util.putCursorAtEnd(sandbox.dom(_addOrUpdatePopUpEl).find("input[type='text']:enabled").first());
	},
	
	showNewContactPopUp = function() {
		
		loadDefaultHtmlForCategory('person');
		_addOrUpdatePopUpEl.modal("show");	
		
		_addOrUpdatePopUpEl.css({"top": "", "left" : ""});
		
		_addOrUpdatePopUpEl.modal({ backdrop: "static", keyboard: false}); 
	 	
		_addOrUpdatePopUpEl.draggable({
	  	 	cursor: 'move'
	  	 }).addClass("popupDrag");
		sandbox.dom(document).off('focusin.modal');
		sandbox.dom(document).find(".modal-backdrop").addClass('hide');
		sandbox.dom(_addOrUpdatePopUpEl).find(".modal-header,.modal-footer").addClass('cursorMove');

		sandbox.util.putCursorAtEnd(sandbox.dom(_addOrUpdatePopUpEl).find("input[type='text']:enabled").first());
		
		bindEventsForHeader();
		bindEventsForBody();
		_addOrUpdatePopUpSaveEl.off().on("click", createContact);
		//for registering the opened popup
		sandbox.publish('popup-opened',{moduleName : sandbox.moduleName , hidePopupFn : "hidePopUp"});
		
	},
	
	hidePopUp = function() {		
		
		_contactIDForUpdate = null; _addOrUpdatePopUpHeaderEl = null; _addOrUpdatePopUpBodyEl = null;
		_addOrUpdatePopUpEl.modal("hide").find("div.modal-body").empty();	
		//hiding contact-moreinfo popover
		sandbox.dom('.contact-moreinfo').addClass('hide');
		//deregister opened popup
		sandbox.publish('popup-closed');
	},
	
	showHtmlBasedOnCategory = function(event) {
		
		var category = event.target.dataset.category;
		
		loadDefaultHtmlForCategory(category);		
	}, 
	
	removeSelectedHtml = function(event) {
				
		var selectedHtmlDiv = sandbox.dom(event.target).parent().parent();
		var ID = selectedHtmlDiv.attr("data-id");
		
		if(!!ID) {			
			selectedHtmlDiv.attr("data-deleted", true).css("display", "none");
		} else {			
			selectedHtmlDiv.remove();
		}
	},
	
	insertSelectedHtmlBasedOnType =  function(event) {
		
		var type = event.target.dataset.insert,
			data = { deleted : false}, template = null;
		
		//console.info("insertSelectedHtmlBasedOnType - type :" + type);
			
		switch(type) {
			case 'phone' :
				template = _phoneForAddOrUpdateContactPopUp;
				break;
			case 'fax' :
				template = _faxForAddOrUpdateContactPopUp;
				break;
			case 'email' :
				template = _emailForAddOrUpdateContactPopUp;
				break;
			case 'social' :
				template = _socialForAddOrUpdateContactPopUp;
				break;
			case 'website' :
				template = _websiteForAddOrUpdateContactPopUp;
				break;
			case 'address' :
				template = _addressForAddOrUpdateContactPopUp;
				break;
			default :
				break;
		}
		
		sandbox.dom("#add-or-update-contact-popup-body ul:eq(0)").append(template(data));
		
		if(type == "website")
			type = "web";
		
		sandbox.dom("#add-or-update-contact-popup-body").find("ul").find("li input[name='"+type+"']").focus();
		sandbox.dom("#add-or-update-contact-popup-body").find("ul").find("li input[name='"+type+"']").last()[0].scrollIntoView();

	},

	searchCompany = function(event) {
		
		if (event.keyCode === 38 || event.keyCode === 40 || event.keyCode === 37 || event.keyCode === 39)
			return;
		
		var searchQuery = sandbox.dom.trim(event.target.value);
		
		if(!searchQuery) {
			sandbox.dom(event.target).attr("data-companyid","");
			_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide").parent().removeClass("open");
			return;
		}
		
		if(searchQuery.length < 3)
			return;
		
		_uniqueRequestID = sandbox.util.generateUUID();
		
		var data = {}, url = null;
		data['queryString'] = searchQuery;
		data['searchBy'] = 'all';
		data['departmentID'] = sandbox.cache.get("selectedDepartmentID");
		data['uniqueRequestID'] = _uniqueRequestID;
		
		_alreadyLinkedCompanyID = sandbox.dom(event.target).attr("data-oldcompanyid") || "";
		
		_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown").find("ul").remove();
		_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("show");
		
		url = "/services/data/v2.0/objects/Search/searchForContact?apikey="+sandbox.cache.get("accountID");
		sandbox.ajax.requestDCM({method : "POST", url: url, endpoint:"/searchForContact", data : data, callBack: searchCompanyCallBack});
	},
	
	searchCompanyCallBack =  function(response) {
		
		if(!response.success) {
			_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide");
			return;
		}
		
		if(response.uniqueRequestID != _uniqueRequestID)
			return;
		
		var arrayOfContacts = response.contact;
		if(sandbox.util.isEmptyObject(arrayOfContacts)) {
			_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide").parent().removeClass("open");
			return;
		}
		
		var oldCompanyID = _addOrUpdatePopUpBodyEl.find("[data-type='company'] input[name='company']").attr("data-oldcompanyid");
			
		var arrayOfCompanies = [];
		sandbox.dom.each(arrayOfContacts, function(index, contact) {
			
			if(contact.category == 'person' || (!!oldCompanyID && contact.id === oldCompanyID))
				return true;
			
			arrayOfCompanies.push(contact);
		});
		
		if(sandbox.util.isEmptyObject(arrayOfCompanies)) {
			_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide").parent().removeClass("open");
			return;
		}			
		
		_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide");
		_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown").find("ul").remove();
		_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown")
												 .append(_companyOptionsForAddOrUpdateContactPopUp({contacts : arrayOfCompanies, appURL : sandbox.cache.get("appURL")}))
												 .removeClass("open").addClass("open");
		
		//_addOrUpdatePopUpBodyEl.find("[data-type='company'] input[name='company']").trigger("focusout");
	},
	
	appendTagNames = function(contact) {
		
		if(sandbox.util.isEmptyObject(contact))
			return;
		
		var arrayOfTagIDs = contact.linkedTags;
		if(sandbox.util.isEmptyObject(arrayOfTagIDs))
			return;
		
		var mapOfTagsInCache = sandbox.cache.get("tags"),
			linkedTagNames = [];
		
		sandbox.dom.each(arrayOfTagIDs, function(index, tagID) {
			if(mapOfTagsInCache.hasOwnProperty(tagID))
				linkedTagNames.push(mapOfTagsInCache[tagID].name);
		});
		
		contact.linkedTagNames = linkedTagNames;
		
		return contact;
	},
	
	preProcessContactMethods = function(contact) {
		
		var linkedContactMethods = contact.linkedContactMethods;
		if(sandbox.util.isEmptyObject(linkedContactMethods))
			return;
		
		var type = null, title = null, arrayOfCM = [], arrayOfPhone = [], arrayOfEmail = [], 
			arrayOfFax = [], arrayOfWeb = [], arrayOfSocial = [];
		
		sandbox.dom.each(linkedContactMethods, function(index, contactMethod) {
			
			if(contactMethod.deleted)
				return true;
			
			type = null; title = null;
			type = contactMethod.type;
			title = contactMethod.title;
			
			if(_mapOfStandardCMTitleToLabel.hasOwnProperty(type)) {
				
				var titleObj =  _mapOfStandardCMTitleToLabel[type];
				if(titleObj.hasOwnProperty(title))
					contactMethod.title = titleObj[title];
				else
					contactMethod.title = (!!title && title !=="null")? title:titleObj[type];
			}
			
			switch(type) {
				case 'phone':
					arrayOfPhone.push(contactMethod);
					break;
				case 'fax':
					arrayOfFax.push(contactMethod);
					break;
				case 'email' :
					arrayOfEmail.push(contactMethod);
					break;
				case 'social' :
					arrayOfSocial.push(contactMethod);
					break;
				case 'web' :
					arrayOfWeb.push(contactMethod);
					break;
				default :
					break;
			}
		});
		
		arrayOfCM = arrayOfPhone.concat(arrayOfEmail, arrayOfFax, arrayOfWeb, arrayOfSocial);
		
		contact.linkedContactMethods = arrayOfCM;
	},
	
	preProcessLocations = function(contact) {
		
		var linkedLocations = contact.linkedLocations;
		if(sandbox.util.isEmptyObject(linkedLocations))
			return;
		
		var title = null;
		sandbox.dom.each(linkedLocations, function(index, location) {
			
			if(location.deleted)
				return true;
			
			title = null;
			title = location.title;
			
			
			if(_mapOfStandardLocationTitleToLabel.hasOwnProperty(title)) {
				location.title = _mapOfStandardLocationTitleToLabel[title].title;
			} else {
				location.title = (!!title && title !=="null")?title : "Address";
			}								
		});
		
		contact.linkedLocations = linkedLocations;
	},
	
	showEditContactPopUp = function(data) {
		
		if(sandbox.util.isEmptyObject(data))
			return;
		
		_contactIDForUpdate = data.id;
		
		var contact = sandbox.dom.extend(true, {}, sandbox.cache.get("contacts")[_contactIDForUpdate]);
		
		contact.enableHeader = false;
		contact.companyHeaderDisabled = false;
		
		appendTagNames(contact);
		
		var staticContentURL = sandbox.cache.get("staticContentURL");
		
		switch(contact.category) {
			case 'person' :
				
				contact.enablePhotoUpload = true;
				
				if(!contact.photoID)
					contact.photoID = staticContentURL + "/images/personlogo_icon.png";
				break;
			case 'company' :
				
				contact.enablePhotoUpload = false;
				
				if(!contact.photoID)
					contact.photoID = staticContentURL + "/images/companylogo_icon.png";
				break;
			default :
				break;
		}
				
		if(contact.category == "company"){
			
			contact.name = contact.fullName;					
		} else{

			contact.name = sandbox.util.getPersonName(contact.firstName, contact.lastName);	
			
			var linkedContacts = contact.linkedContacts;
			if(!sandbox.util.isEmptyObject(linkedContacts)) {
				
				var company = null, companyID = null, companyInfoToUI = {};
				sandbox.dom.each(linkedContacts, function(index, contactID) {
					
					company = sandbox.cache.get("contacts")[contactID];
					if(!!companyID)
						return false;
					
					if(company.category !== 'company')
						return true;
					
					companyID = contactID;
				});
				
				company = sandbox.cache.get("contacts")[companyID];
				companyInfoToUI.name = company.fullName;
				companyInfoToUI.oldcompanyid = companyID;
				contact.companyInfo = companyInfoToUI; 
			}
		}
				
		preProcessContactMethods(contact);
		preProcessLocations(contact);
		
		contact.allTimeZones = sandbox.cache.get("timeZoneDetails");
		contact.sourceOptions = _sourceOptions;
		
		//_addOrUpdatePopUpEl.find(".modal-header, .modal-body").remove();
		_addOrUpdatePopUpEl.find(_addOrUpdatePopUpHeaderID).remove();
		_addOrUpdatePopUpEl.find(_addOrUpdatePopUpBodyID).remove();
		
		_addOrUpdatePopUpFooterEl.before(_addOrUpdatePopTemplate(contact));
		
		_addOrUpdatePopUpBodyEl = _addOrUpdatePopUpEl.find(_addOrUpdatePopUpBodyID);
		
		_addOrUpdatePopUpBodyEl.find("[data-select]").selectpicker('refresh').selectpicker('setStyle', 'btn-sm','add');
		//_addOrUpdatePopUpBodyEl.find("[data-type='tags'] input").tokenfield();
		
		_contactIDForPopup = contact.id;
		_isEditContactPopup = true;
		loadTagsUnderAccount();
		
		bindEventsForBody();
		_addOrUpdatePopUpSaveEl.off().on("click", updateContact);
		
		_addOrUpdatePopUpEl.modal("show");

		_addOrUpdatePopUpEl.css({"top": "", "left" : ""});
		
		_addOrUpdatePopUpEl.modal({ backdrop: "static", keyboard: false}); 
	 	
		_addOrUpdatePopUpEl.draggable({
	  	 	cursor: 'move'
	  	 }).addClass("popupDrag");
		sandbox.dom(document).off('focusin.modal');
		sandbox.dom(document).find(".modal-backdrop").addClass('hide');
		sandbox.dom(_addOrUpdatePopUpEl).find(".modal-header,.modal-footer").addClass('cursorMove');
		
	
		sandbox.util.putCursorAtEnd(sandbox.dom(_addOrUpdatePopUpEl).find("input[type='text']:enabled").first());
		//for registering the opened popup
		sandbox.publish('popup-opened',{moduleName : sandbox.moduleName , hidePopupFn : "hidePopUp"});
		sandbox.publish('hide-and-remove-tooltip');
	},
	
	bindEventsForHeader = function() {
		
		_addOrUpdatePopUpHeaderEl.find("[data-category]").off('click').on('click', function(event) {
			showHtmlBasedOnCategory(event);
		});
	},
	
	bindEventsForBody = function() {
		
		_addOrUpdatePopUpBodyEl.on("click", "[data-type] ul li a", function(event) {
			
			var title = event.target.innerHTML;

			if(title === 'Custom') {
				sandbox.dom(event.target).parent().parent().parent().find("input[data-type='title']").val("").trigger("click").focus();
			} else {
				sandbox.dom(event.target).parent().parent().parent().find("input[data-type='title']").val(event.target.innerHTML).trigger("change");
			}
		});
		
		_addOrUpdatePopUpBodyEl.on("click", "[data-type='contactMethod'] div button.icon-trash-o, [data-type='location'] div button.icon-trash-o", function(event) {
			removeSelectedHtml(event);
		});
		
		_addOrUpdatePopUpBodyEl.off("keyup", "[data-type='company'] input[name='company']").on("keyup", "[data-type='company'] input[name='company']", function(event) {
			
			var key = event.keyCode, liSelected, tempLi, first, last, newLi, selectedCompanyID, companyName,
				ul = sandbox.dom(event.target).siblings("ul.dropdown-menu"),
				inputEl = sandbox.dom(event.target),
				oldCompanyID = inputEl.attr("data-oldcompanyid");
			
			var companyName = inputEl.val();
				  companyName = sandbox.dom.trim(companyName);
				  

			if(companyName == "")
			{
				ul.remove();
				return;
			}	
			if(key == 13)
				return;
			
			if((key == 40 || key == 38) && ul.children().length > 0){
				
				liSelected = ul.find("li.selected-contact");
				first = ul.find("li:first-child");
				last = ul.find("li:last-child");
				
				if(key == 38){
					
					if(liSelected.length == 0)
						newLi = last.addClass("selected-contact");
					else{
						tempLi = sandbox.dom(liSelected).removeClass("selected-contact").prev();
						if(tempLi.length == 0)
							newLi = last.addClass("selected-contact");
						else
							newLi = tempLi.addClass("selected-contact");
					}
				}
				else if(key == 40){
					
					if(liSelected.length == 0)
						newLi = first.addClass("selected-contact");
					else{
						tempLi = sandbox.dom(liSelected).removeClass("selected-contact").next();
						if(tempLi.length == 0)
							newLi = first.addClass("selected-contact");
						else
							newLi = tempLi.addClass("selected-contact");
					}
				}
				
				ul.children().removeClass("selected-by-arrow-key selected-by-hover");
				newLi.addClass("selected-by-arrow-key");

				selectedCompanyID = newLi.find("span.btn").data("selectcompanyid");
				inputEl.attr("arrow-selected-companyid", selectedCompanyID).removeAttr("hover-selected-companyid");
				companyName = newLi.find("span a").html();
				inputEl.val(companyName);
				return;
			}
			
			searchCompany(event);
		});
		
		_addOrUpdatePopUpBodyEl.on("mousedown", "[data-type='company'] div.dropdown ul li span.btn", function(event) {
			
			var selectedCompanyID = event.target.dataset.selectcompanyid;
			var companyName = sandbox.dom(event.target).parent().find("span a").html();
			
			_addOrUpdatePopUpBodyEl.find("[data-type='company'] div.dropdown").find("ul").remove();
			
			var oldCompanyID = _addOrUpdatePopUpBodyEl.find("[data-type='company'] input[name='company']").attr("data-oldcompanyid");
			
			if(oldCompanyID == selectedCompanyID)
				return;
			
			_addOrUpdatePopUpBodyEl.find("[data-type='company'] input[name='company']").attr("data-newcompanyid", selectedCompanyID).val(companyName);
		});
		
		_addOrUpdatePopUpBodyEl.on("contact.popup.company:update", "[data-type='company'] input[name='company']", function(event) {
			
			var companyName = sandbox.dom.trim(sandbox.dom(event.target).val()),
				oldCompanyID = sandbox.dom(event.target).attr("data-oldcompanyid"),
				newCompanyID = sandbox.dom(event.target).attr("data-newcompanyid"),
				ul = sandbox.dom(event.target).siblings("ul.dropdown-menu");
			
			
			
			if(ul.length > 0){
				
				if(ul.find("li.selected-by-arrow-key").length == 1){
					
					if(sandbox.dom(event.target).val() == ul.find("li.selected-by-arrow-key span a").html()){
						newCompanyID = ul.find("li.selected-by-arrow-key span.btn").data("selectcompanyid");
						sandbox.dom(event.target).attr("data-newcompanyid", newCompanyID);
					}
					
				}
				else if(ul.find("li.selected-by-hover").length == 1){
					
					if(sandbox.dom(event.target).val() == ul.find("li.selected-by-hover span a").html()){
						newCompanyID = ul.find("li.selected-by-hover span.btn").data("selectcompanyid");
						sandbox.dom(event.target).attr("data-newcompanyid", newCompanyID);
					}
					
				}

				sandbox.dom(this).removeAttr("arrow-selected-companyid").removeAttr("hover-selected-companyid");
				ul.children().removeClass("selected-by-arrow-key selected-by-hover");
			}
		});
		
		_addOrUpdatePopUpBodyEl.on("click", _addOrUpdatePopUpPhotoUploadID, function(event) {
			
			var entityType = sandbox.url.page(), entityID = sandbox.url.entityID();
			
			sandbox.publish("show-upload-photo-popup", { type : "contact_picture", contactID : _contactIDForUpdate, entityType : entityType, entityID : entityID});
			hidePopUp();
		});
		sandbox.dom(_addOrUpdatePopUpBodyID).height(sandbox.dom(sandbox.window).height()-251);
	},
	
	getContactMethods = function() {
		
		var arrayOfHtml = _addOrUpdatePopUpBodyEl.find("[data-type='contactMethod']");
		
		if(sandbox.util.isEmptyObject(arrayOfHtml))
			return null;
		
		var contactMethod = null, linkedContactMethods = [];
		
		sandbox.dom.each(arrayOfHtml, function(index, cmHtml) {
			
			var contactMethodType = sandbox.dom.trim(sandbox.dom(cmHtml).attr("data-cmtype"));
			var deleted = (sandbox.dom.trim(sandbox.dom(cmHtml).attr("data-deleted")).toLowerCase()) === "true"?true:false;
			var value = sandbox.dom.trim(sandbox.dom(cmHtml).find("input[name='"+ contactMethodType + "']").val());
			
			if(!deleted && !value) {
				return true;
			}
			
			contactMethod = {};
			
			var contactMethodID = sandbox.dom.trim(sandbox.dom(cmHtml).attr("data-id"));			
			var titleFromDOM = sandbox.dom.trim(sandbox.dom(cmHtml).find("input[data-type='title']").val());
			if(_mapOfStandardCMTitles.hasOwnProperty(titleFromDOM)) {
				
				contactMethod.title = _mapOfStandardCMTitles[titleFromDOM].title;
			} else {
				contactMethod.title = titleFromDOM; 
			}
			
			contactMethod.type = contactMethodType;
			contactMethod.value = value;
			
			if(deleted)
				contactMethod.deleted = true;
			
			if(contactMethodID)
				contactMethod.id = contactMethodID;
			
			linkedContactMethods.push(contactMethod);
		});
		
		return linkedContactMethods;
	},
	
	getLocations = function() {
		
		var arrayOfHtml = _addOrUpdatePopUpBodyEl.find("[data-type='location']");
		
		if(sandbox.util.isEmptyObject(arrayOfHtml))
			return null;
		
		var location = null, linkedLocations = [];
		
		sandbox.dom.each(arrayOfHtml, function(index, locationHtml) {
			
			var deleted = (sandbox.dom.trim(sandbox.dom(locationHtml).attr("data-deleted")).toLowerCase()) === "true"?true:false;
			
			var address = sandbox.dom.trim(sandbox.dom(locationHtml).find("input[name='address']").val());
			var city = sandbox.dom.trim(sandbox.dom(locationHtml).find("input[name='city']").val());
			var state = sandbox.dom.trim(sandbox.dom(locationHtml).find("input[name='state']").val());
			var country = sandbox.dom.trim(sandbox.dom(locationHtml).find("input[name='country']").val());
			var zipCode = sandbox.dom.trim(sandbox.dom(locationHtml).find("input[name='zipcode']").val());
			
			if(!deleted && !address && !city && !state && !country && !zipCode) {
				return true;
			}
			
			location = {};
			var locationID = sandbox.dom.trim(sandbox.dom(locationHtml).attr("data-id"));
									
			var titleFromDOM = sandbox.dom.trim(sandbox.dom(locationHtml).find("input[data-type='title']").val());
			if(_mapOfStandardLocationTitles.hasOwnProperty(titleFromDOM)) {				
				location.title = _mapOfStandardLocationTitles[titleFromDOM].title;
			} else {
				location.title = titleFromDOM; 
			}
			
			location.address = address;
			location.city = city;
			location.state = state;
			location.country = country;
			location.zip = zipCode;
			
			if(deleted)
				location.deleted = true;
			
			if(locationID)
				location.id = locationID;
			
			linkedLocations.push(location);
		});
		
		return linkedLocations;
	},
	
	createContact = function() {
		
		var name = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[name='name']").val());
		
		if(!name){
			
			sandbox.alert.message({text:"Contact Name field cannot be empty", time:3000});
			return;
		}
		
		//disabling save btn to prevent duplicate
		_addOrUpdatePopUpSaveEl.off();
		
		var entityType = sandbox.url.page(), entityID = sandbox.url.entityID();
		
		var contact = {};
		
		var category = sandbox.dom.trim(_addOrUpdatePopUpHeaderEl.find("ul li.active a").attr("data-category"));
		
		if(!category && entityType === "contact") {
			category = "person";
		} 
				
		contact.category = category;
		contact.type = 'contact';
		
		if(category === 'person') {
			
			var index = name.indexOf(' ');
			if(index == -1) {
				contact.firstName = name;
				contact.lastName = '';
			} else {
				contact.lastName = name.substr(index+1, name.length);
				contact.firstName = name.substr(0,index);
			}
			
		} else {
			contact.fullName = name;
		}			
		
		contact.departmentID = sandbox.cache.get("selectedDepartmentID");
		contact.ownerID = sandbox.cache.get("loggedInUserID");		
		
		
		var source = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[name='source']").val());
		contact.source = (!!source)?source:null;
		
		var productID = _addOrUpdatePopUpBodyEl.find("select[data-select='products-option']").find("option:selected").attr("value");
		contact.brandID = (!!productID)?productID:null;
		
		var arrayOfTags = _addOrUpdatePopUpBodyEl.find("[data-type='tags'] input").tokenfield('getTokens');
		
		if(!sandbox.util.isEmptyObject(arrayOfTags)) {
			
			var linkedTags = [];
			sandbox.dom.each(arrayOfTags, function(index, tokenObject) {
				linkedTags.push(tokenObject.value)
			});
			
			contact.tags = linkedTags;
		}
		
		if(category === 'person') {
			
			var title = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[name='title']").val());
			contact.title = (!!title)?title:null;
			
			var companyID = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[data-newcompanyid]").attr("data-newcompanyid"));
			var companyName = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("[data-type='company'] input[name='company']").val());
			
			if(!!companyID) {
				
				var linkedContacts = []; linkedContacts.push(companyID);
				contact.linkedContacts = { linkContacts : linkedContacts};
			} else if(!!companyName){
				
				var linkedContact = {};
				linkedContact.fullName = companyName;
				linkedContact.type = 'contact';
				linkedContact.category = 'company';
				if(!!productID)
					linkedContact.brandID = productID;
				
				contact.linkedContacts = linkedContact;
			}
		}

		var linkedContactMethods = getContactMethods();
		if(!sandbox.util.isEmptyObject(linkedContactMethods)) {
			contact.linkedContactMethods = linkedContactMethods;
		}
		
		var linkedLocations = getLocations();
		if(!sandbox.util.isEmptyObject(linkedLocations)) {
			contact.linkedLocations = linkedLocations;
		}
		
		//console.info("Create JSON : " + JSON.stringify(contact));
		//return;
		
		var  url = null, urlMethod = null, callBack = null, requestDCMUrl = null, data = {}, endpoint = null;
				
		switch(entityType) {
			case "deal" :
				
				data.dealID = entityID;				
				data.contact = contact;
				url = "/associateNewContactWithDeal_v2"; urlMethod = "POST";
				endpoint = "/associateNewContactWithDeal_v2";
				break;
			case "account" :
				
				data.accountObjID = entityID;
				data.contact = contact;
				data.accountinfo = {};						
				url = "/associateNewContactWithAccount"; urlMethod = "POST";	
				endpoint = "/associateNewContactWithAccount";
				break;
			case "contact" :				
				requestDCMUrl = "/services/data/v2.0/objects/Contact?apikey=" + sandbox.cache.get("accountID") ; urlMethod = "POST";
				endpoint = "/Contact";
				break;
			default :
				break;
		}
		
		//console.info("Contact : " + JSON.stringify(contact));		
		
		sandbox.alert.message({text:"Creating Contact..."});
		
		if(!!requestDCMUrl) {
			sandbox.ajax.requestDCM({method : urlMethod, url: requestDCMUrl, endpoint: endpoint, data : contact, callBack: createContactCallBack, metaDataForJS : { companyID : companyID}});
		} else {
			sandbox.ajax.request({method : urlMethod, url: url, endpoint: endpoint, data : data, callBack: createContactCallBack});
		}				
	},
	
	createContactCallBack =  function(response) {
		

		if(!response.success) {
			sandbox.alert.message({text:"Try Again..."});
			return;
		}
		
		var entityType = sandbox.url.page(), entityID = sandbox.url.entityID(), deal = null, 
				account = null, arrayOfContacts = null, actionNameForAnalytics = null, linkedContacts = null;
		
		var category;
		if(_addOrUpdatePopUpHeaderEl.find("ul li").length)
			category = sandbox.dom.trim(_addOrUpdatePopUpHeaderEl.find("ul li.active a").attr("data-category"));
		else
			category = "person";
			
		var arrayOfContactsAfterUpdate = [], arrayOfContactsBeforeUpdate = [], contactID = null;
		
		arrayOfContacts = response.contacts;
		if(sandbox.util.isEmptyObject(arrayOfContacts))
			arrayOfContacts = response.contact;
			
		var mapOfContactsInCache = sandbox.cache.get("contacts");
		sandbox.dom.each(arrayOfContacts, function(index, contact) {				
			
			if(category === contact.category) {
				contactID = contact.id;
			}
			
			arrayOfContactsAfterUpdate.push(sandbox.dom.extend(true, {}, contact));
			mapOfContactsInCache[contact.id] = contact;
		});
		
		sandbox.cache.update({"contacts" : mapOfContactsInCache});
		
		sandbox.publish("update-tags-in-cache", { tags : response.tags, taginfo : response.taginfo });
		
		var loggedInUserEmail = sandbox.cache.get("loggedInUserEmail"),
			accountID = sandbox.cache.get("accountID");
		
		switch(entityType) {
			case "deal" :
				
				actionNameForAnalytics = "Contact to Deal";
				deal = response.deal;
				linkedContacts = deal.linkedContacts;
				sandbox.publish("refresh-deal-detail-header", { deal : deal})
							.publish("display-involved-contacts", { entityType : entityType , entityID : entityID, linkedContacts : linkedContacts})
							.publish("update-analytics", { category : "Create", action : actionNameForAnalytics, label : loggedInUserEmail + "-" + accountID });;
				
				break;
			case "account" :			
				
				actionNameForAnalytics = "Contact to Account";
				account = response.accountObj;
				linkedContacts = account.linkedContacts;
				sandbox.publish("refresh-account-detail-header", { account : account })
							.publish("display-involved-contacts", { entityType : entityType , entityID : entityID, linkedContacts : linkedContacts})
							.publish("update-analytics", { category : "Create", action : actionNameForAnalytics, label : loggedInUserEmail + "-" + accountID });;
				
				break;
			case "contact" :
				
				var metaDataForJS = response.metaDataForJS;
				var companyID = metaDataForJS.companyID;
				
				var companyBeforeUpdate = mapOfContactsInCache[companyID];
				arrayOfContactsBeforeUpdate.push(sandbox.dom.extend(true, {}, companyBeforeUpdate));
				var linkedContacts = companyBeforeUpdate.linkedContacts;
				if(sandbox.util.isEmptyObject(linkedContacts))
					linkedContacts = [];
				
				linkedContacts.push(arrayOfContacts[0].id);
				companyBeforeUpdate.linkedContacts = linkedContacts;
				mapOfContactsInCache[companyID] = companyBeforeUpdate;
				var companyAfterUpdate = sandbox.dom.extend(true, {}, companyBeforeUpdate)
				arrayOfContactsAfterUpdate.push(companyAfterUpdate);
				
				sandbox.publish("contact-otherinfo-fetched", {obj: companyAfterUpdate});
				break;
			default :
				break;
		}
		
		//TODO - Need to refactor
//		sandbox.publish("add-activity-log-for-contact-operations", { entityType : "contact", entityID : contactID,
//																									beforeUpdate : arrayOfContactsBeforeUpdate,
//																									afterUpdate : arrayOfContactsAfterUpdate,
//																									linkedEntityType : entityType, linkedEntityID : entityID, 
//																									operation : "Create" , 
//																									category : category});
		
		sandbox.publish('add-activity-log-for-contact-operations',{entityType : "contact", entityID : contactID,
			                                                                               beforeUpdate : arrayOfContactsBeforeUpdate,
			                                                                               afterUpdate : arrayOfContactsAfterUpdate,
			                                                                               linkedEntityType : entityType, linkedEntityID : entityID,
			                                                                               operation : "Create",
			                                                                               category : category});
		
		sandbox.publish('get-Activity-Log-For-Associations',{userName : sandbox.cache.get('loggedInUserName'),
            operation : "new", subEntity:"Contact",
            url : '<a href="'+  sandbox.util.getEntityURL({ entityType : "contact", entityID : (!!contactID?contactID:entityID)}) +'" target = "_blank">'+ sandbox.util.getEntityURL({ entityType : "contact", entityID : (!!contactID?contactID:entityID)})+'</a>',
            entityType : entityType, entityID : entityID});


		sandbox.alert.hideMessage();
		hidePopUp();
		//enabling back the save/update contact btn
		_addOrUpdatePopUpSaveEl.off().on("click", createContact);
	},
	
	getSelectedCompanyInfoForUpdate = function(contactForUpdate) {
		
		if(sandbox.util.isEmptyObject(contactForUpdate) || !_contactIDForUpdate)
			return null;
		
		var newCompanyID = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[data-newcompanyid]").attr("data-newcompanyid"));
		var oldCompanyID = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[data-oldcompanyid]").attr("data-oldcompanyid"));
		var companyName = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("[data-type='company'] input[name='company']").val());
		
		if(!newCompanyID && !oldCompanyID && !companyName)
			return contactForUpdate;
		
		var personInfoInCache = sandbox.cache.get("contacts")[_contactIDForUpdate];
		var companyInfoInCache= null;
		
		if(!!oldCompanyID) {			
			companyInfoInCache = sandbox.cache.get("contacts")[oldCompanyID];
		}
				
		if(!!oldCompanyID && !newCompanyID && companyName === companyInfoInCache.fullName)
			return contactForUpdate;
		
		var linkedContactInfo = {}, linkContacts = [], delinkContacts = [];
				
		if(!newCompanyID && !oldCompanyID && !!companyName) {
			
			linkedContactInfo['fullName'] = companyName;
			linkedContactInfo['category'] = 'company';
			
			if(!!personInfoInCache.brandID)
				linkedContactInfo['brandID'] = personInfoInCache.brandID;
			
		} else if(!oldCompanyID && !!newCompanyID) {

			linkContacts.push(newCompanyID);
			linkedContactInfo['linkContacts'] = linkContacts;		
			
		} else if(!!oldCompanyID && !newCompanyID && !companyName) {

			delinkContacts.push(oldCompanyID);
			linkedContactInfo['linkContacts'] = [];		
			linkedContactInfo['delinkContacts'] = delinkContacts;
			
		} else if(!!oldCompanyID && !newCompanyID && !!companyName) {

			linkedContactInfo['fullName'] = companyName;
			linkedContactInfo['category'] = 'company';
			
			if(!!personInfoInCache.brandID)
				linkedContactInfo['brandID'] = personInfoInCache.brandID;
			
			delinkContacts.push(oldCompanyID);
			linkedContactInfo['delinkContacts'] = delinkContacts;
			
		} else if(!!oldCompanyID && !!newCompanyID && oldCompanyID !== newCompanyID) {

			linkContacts.push(newCompanyID);
			delinkContacts.push(oldCompanyID);
			linkedContactInfo['linkContacts'] = linkContacts;		
			linkedContactInfo['delinkContacts'] = delinkContacts;
		}
		
		contactForUpdate.linkedContacts = linkedContactInfo;
		return contactForUpdate;
	},
	
	updateContact = function() {
		
		if(!_contactIDForUpdate)
			return;
		
		var contactInCache = sandbox.cache.get("contacts")[_contactIDForUpdate];
		var category = contactInCache.category;
		
		var name = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[name='name']").val());		
		if(!name)
			return;
		
		var contactForUpdate = {};
		contactForUpdate.contactID = _contactIDForUpdate;
		
		if(category === 'person') {
			
			var index = name.indexOf(' ');
			if(index == -1) {
				contactForUpdate.firstName = name;
				contactForUpdate.lastName = '';
			} else {
				contactForUpdate.lastName = name.substr(index+1, name.length);
				contactForUpdate.firstName = name.substr(0,index);
			}
			
		} else {
			contactForUpdate.fullName = name;
		}			
		
		var title = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[name='title']").val());
		contactForUpdate.title = (!!title)?title:null;
		
		var source = sandbox.dom.trim(_addOrUpdatePopUpBodyEl.find("input[name='source']").val());
		contactForUpdate.source = (!!source)?source:null;
		
		var arrayOfTags = _addOrUpdatePopUpBodyEl.find("[data-type='tags'] input").tokenfield('getTokens');
		var linkedTags = [];
		
		
		if(!sandbox.util.isEmptyObject(arrayOfTags)) {
			
			sandbox.dom.each(arrayOfTags, function(index, tokenObject) {
				linkedTags.push(tokenObject.value)
			});
			
			contactForUpdate.tags = linkedTags;
		}
		
		var tagsAdded = [], oldTagsNameArr = [];
		
		var tagsMap = sandbox.cache.get('tags');
		
		
		sandbox.dom.each(contactInCache.linkedTags,function(index,tagID){
			
			oldTagsNameArr.push(tagsMap[tagID].name);
		});
		
		
		if(!sandbox.util.isEmptyObject(linkedTags)){
			
			if(!sandbox.util.isEmptyObject(oldTagsNameArr)){
				
				sandbox.dom.each(linkedTags,function(index,tagName){
					
					if(oldTagsNameArr.indexOf(tagName) == -1)
						tagsAdded.push(tagName);
				});
			}
			else{
				
				tagsAdded = linkedTags;
			}
		}
		
		if(!sandbox.util.isEmptyObject(contactInCache.linkedTags)) {
			
			var tagsInCache = sandbox.cache.get("tags"), tagsRemoved = [],tagsRemovedName = [];
			
			sandbox.dom.each(contactInCache.linkedTags, function(index, tagID){
				
				if(!tagsInCache.hasOwnProperty(tagID)){
					return true;
				}
					
				if(linkedTags.indexOf(tagsInCache[tagID].name) == -1) {
					
					tagsRemoved.push(tagID);
					tagsRemovedName.push(tagsInCache[tagID].name);
					
				}

			});
			
			
			if(!sandbox.util.isEmptyObject(tagsRemoved)){
				contactForUpdate.removetags = tagsRemoved;
               
			}
			
			if(!sandbox.util.isEmptyObject(tagsAdded) || !sandbox.util.isEmptyObject(tagsRemovedName))
				 sandbox.cache.update({tagsUpdated:true});
			
			sandbox.cache.update({tagsRemoved : tagsRemovedName});
			sandbox.cache.update({tagsAdded : tagsAdded});
		}
		
		getSelectedCompanyInfoForUpdate(contactForUpdate);
		
		var linkedContactMethods = getContactMethods();
		if(!sandbox.util.isEmptyObject(linkedContactMethods)) {
			contactForUpdate.linkedContactMethods = linkedContactMethods;
		}
		
		var linkedLocations = getLocations();
		if(!sandbox.util.isEmptyObject(linkedLocations)) {
			contactForUpdate.linkedLocations = linkedLocations;
		}
		
		var timeZone = _addOrUpdatePopUpBodyEl.find("[data-select='timeZone']").find("option:selected").val();
		contactForUpdate.timeZone = timeZone;
		
		contactForUpdate.linkedAccountInfo = {};		
		contactForUpdate.departmentID = sandbox.cache.get("selectedDepartmentID");
		
		//console.info("Update JSON : " + JSON.stringify(contactForUpdate));
		//return;
		
		
		var entityType = sandbox.url.page(), entityID = sandbox.url.entityID(), url = null, urlMethod = null, callBack = null, endpoint = null;
		
		switch(entityType) {
			case "deal" :
				
				url = "/Deal/" + entityID + "/updateContactForLinkedDeal_v1"; urlMethod = "POST";
				endpoint = "/updateContactForLinkedDeal_v1";
				break;
			case "account" :
				
				url = "/" + entityID + "/updateContactForLinkedAccount_v1"; urlMethod = "POST";
				endpoint = "/updateContactForLinkedAccount_v1";
				break;
			case "task" :
				
				url = "/" + entityID + "/updateContactForLinkedTask_v1"; urlMethod = "POST";
				endpoint = "/updateContactForLinkedTask_v1";
				break;
			default :
				break;
		}
		
		
		sandbox.ajax.request({method : urlMethod, url: url, endpoint: endpoint, data : contactForUpdate, callBack: updateContactCallBack});
		hidePopUp();
		sandbox.alert.message({text:"Updating Contact..."});				
		sandbox.publish('hide-and-remove-tooltip');
		sandbox.publish("update-analytics",{category:"Edit",action:"Contact",label: sandbox.cache.get("loggedInUserEmail")+ "-" +sandbox.cache.get("accountID") });
	},
	
	updateContactCallBack =  function(response) {
		
		if(!response.success) {
			sandbox.alert.message({text:"Try Again..."});
			return;
		}
				
		var mapOfContactsInCache = sandbox.cache.get("contacts");
		
		/* For activity log */
		var arrayOfContactsBeforeUpdate = [], arrayOfContactsAfterUpdate = [];
		arrayOfContactsBeforeUpdate.push(mapOfContactsInCache[response.contactID]);
		
		if(mapOfContactsInCache[response.contactID].category === 'person') {
			
			var oldLinkedContacts = mapOfContactsInCache[response.contactID].linkedContacts;
			if(!sandbox.util.isEmptyObject(oldLinkedContacts)) {		
				var oldCompanyID = oldLinkedContacts[0];
				arrayOfContactsBeforeUpdate.push(sandbox.dom.extend(true, {}, mapOfContactsInCache[oldCompanyID]));
			}
		}		
				
		var entityType = sandbox.url.page(), entityID = sandbox.url.entityID(), 
			deal = null, account = null, task = null, arrayOfContacts = null, linkedContacts = null;
		
		arrayOfContacts = response.contacts;
		
		sandbox.dom.each(arrayOfContacts, function(index, contact) {			
			
			mapOfContactsInCache[contact.id] = contact;
			
			/* For activity log */
			arrayOfContactsAfterUpdate.push(sandbox.dom.extend(true, {}, contact));
		});
		
		sandbox.cache.update({"contacts" : mapOfContactsInCache});
		
		sandbox.publish("update-tags-in-cache", { tags : response.tags, taginfo : response.taginfo, deletedtags : response.deletedtags });				
		
		switch(entityType) {
			case "deal" :
				deal = response.deal;
				linkedContacts = deal.linkedContacts;
				sandbox.publish("refresh-deal-detail-header", { deal : deal});				
				break;
			case "account" :				
				account = response.account;
				linkedContacts = account.linkedContacts;
				sandbox.publish("refresh-account-detail-header", { account : account });				
				break;
			case "task" :				
				task = response.task;
				linkedContacts = task.linkedContacts;
				sandbox.publish("refresh-task-detail-header", { task : task });				
				break;
			case "contact ":
			default :
				break;
		}
		
		sandbox.publish("display-involved-contacts", { entityType : entityType , entityID : entityID, linkedContacts : linkedContacts});
		
		// TODO - Need to refactor  
//		sandbox.publish("add-activity-log-for-contact-operations", { entityType : "contact", entityID : _contactIDForUpdate, 
//																									beforeUpdate : arrayOfContactsBeforeUpdate, afterUpdate : arrayOfContactsAfterUpdate,
//		    																						linkedEntityType : entityType, linkedEntityID : entityID, 
//		    																						operation : "Update" , 
//		    																						category : mapOfContactsInCache[_contactIDForUpdate].category});
		
		
		addActivityLog({entityType : "contact", entityID : _contactIDForUpdate, beforeUpdate : arrayOfContactsBeforeUpdate,
			                                                                    afterUpdate : arrayOfContactsAfterUpdate,
			                                                                    linkedEntityType : entityType,linkedEntityID : entityID,
			                                                                    operation : "Update",
			                                                                    category : mapOfContactsInCache[_contactIDForUpdate].category});
	    
		var addedTags = sandbox.cache.get('tagsAdded'), removedTags = sandbox.cache.get('tagsRemoved');
		
		if(!sandbox.util.isEmptyObject(addedTags) || !sandbox.util.isEmptyObject(removedTags)){
			
			getActivityLogForTagsUpdate({subEntityType : "contact", entityType : entityType, entityID : entityID, 
				                         addedTags : addedTags, removedTags : removedTags,
	                                     url : '<a href="'+  sandbox.util.getEntityURL({ entityType : "contact", entityID : _contactIDForUpdate}) +'" target = "_blank">'+ sandbox.util.getEntityURL({ entityType : "contact", entityID : _contactIDForUpdate})+'</a>'});
			
			sandbox.cache.update({tagsAdded:""});
			sandbox.cache.update({tagsRemoved:""});
		}

		sandbox.alert.hideMessage();
		sandbox.publish('hide-and-remove-tooltip');
	},
	
	getActivityLogForTagsUpdate = function(data){
				
		var activityLog = '',  username = sandbox.cache.get('loggedInUserName'),
		    urlContent = null,addedContent = null, removedContent = null;
		
		if(!!username)
			activityLog = username+" Updated the "+ data['subEntityType']+'<br/> <br/>';
		
		if(!sandbox.util.isEmptyObject(data['addedTags'])){
			
			activityLog = activityLog+'<b style="color:#0084b0;">Added Tags :</b> '+data['addedTags']+'<br/>';		
			addedContent  = "Added";

		}
		
		if(!sandbox.util.isEmptyObject(data['removedTags'])) {
			
			activityLog = activityLog+'<b style="color:#0084b0;">Removed Tags :</b> '+data['removedTags']+'<br/>';		
			removedContent = "Removed";
		}
		
		if(data.hasOwnProperty('url')) {
			
			if(!!addedContent && !!removedContent)
				urlContent = addedContent + " and " +removedContent +" tags for the following URL";
			else if(!!addedContent)
				urlContent = addedContent +" tags for the following URL";
			else if(!!removedContent)
				urlContent = removedContent +" tags for the following URL";
					
			activityLog = activityLog+'<b style="color:#0084b0;">'+urlContent+':</b> '+data['url']+'<br/>';		
		}
		
		sandbox.cache.update({tagsUpdated:false});
		sandbox.publish('insert-activity-log',{historyComments : activityLog, entityType : data.entityType, entityID : data.entityID});
		
	},
	
	getActivityLogForAssociationsAndDissociations = function(data) {
	
		var activityLog = '',objMap = {};
		
		activityLog = activityLog+data['userName'];
	
		if(data['operation'] == 'new')
			activityLog = activityLog+' Added a new '+data['subEntity']+'<br/><br/>';
		else if(data['operation'] == 'existing')
			activityLog = activityLog+' Added an existing '+data['subEntity']+'<br/><br/>';
		else if(data['operation'] == 'remove')
			activityLog = activityLog+' Removed a '+data['subEntity']+'<br/><br/>';
		
		activityLog = activityLog+'Details :<br/>';
		
		if(data.hasOwnProperty('url'))
			activityLog = activityLog+'<b style="color:#0084b0;">URL :</b> '+data['url']+'<br/>';
	   
		sandbox.publish('insert-activity-log',{historyComments : activityLog, entityType : data.entityType, entityID : data.entityID});
	},
	
	setStandardFieldInfo = function(map){
		
		var standardFieldsMap = map.standardFieldInfo, isFound = false, selectedDepartmentID = sandbox.cache.get("selectedDepartmentID");

		if(standardFieldsMap.hasOwnProperty("contact")) {

			sandbox.dom.each(standardFieldsMap["contact"], function(key, value){
				if(key == "source" && !sandbox.util.isEmptyObject(value.predefinedOptions) && value.departmentID == selectedDepartmentID){
					_sourceOptions = value.predefinedOptions;
					isFound = true;
					return false;
				}
			});
		}
		
		if(!isFound)
			_sourceOptions = [];
	},
	
//	getUpdatedProperties = function(entityType, entityID, oldContact, updatedContact, linkedEntityType, linkedEntityID, operation) {
//		
//		if(!entityType || !entityID)
//			return null;
//		
//		if(sandbox.uti.isEmptyObject(oldContact) && !sandbox.util.isEmptyObject(updatedContact))
//			return updatedContact;
//			
//		var data = {}, contactMethodForLead = [], linkedLocations = {}, locationObj = {};
//			
//		if(!!linkedEntityID) {
//			
//			var entityUrl = sandbox.cache.get("appURL") +"/crm#"+entityType.toLowerCase()+"/"+entityID;
//			data.URL ='<a href="'+entityUrl+'" target = "_blank">'+entityUrl+'</a>';
//		}
//		
//		data.contactID = entityID;
//		data.entity = entityType;
//		data.operation = operation;
//		
//		if(oldContact.comments != updatedContact.comments)
//			data.comments = updatedContact.comments;
//		
//		var nameFromCache = sandbox.util.getPersonName(oldContact.firstName, oldContact.lastName);
//		var nameFromDOM = sandbox.util.getPersonName(updatedContact.firstName, updatedContact.lastName);
//		
//		if(nameFromCache != nameFromDOM)
//			data.name = nameFromDOM;
//		
//		if(oldContact.fullName != updatedContact.fullName)
//			data.fullName = updatedContact.fullName;
//		
//		if(oldContact.oldCompanyName != updatedContact.oldCompanyName)
//			data.oldCompanyName = updatedContact.oldCompanyName;
//		
//		if(oldContact.newCompanyName != updatedContact.newCompanyName)
//			data.newCompanyName = updatedContact.newCompanyName;
//		
//		if(oldContact.source != updatedContact.source)
//			data.source = updatedContact.source;
//		
//		if(oldContact.title != updatedContact.title)
//			data.title = updatedContact.title;
//		
//		if(updatedContact.hasOwnProperty('linkedContactMethods') && oldContact.hasOwnProperty('linkedContactMethods') ){
//			
//			sandbox.dom.each(oldContact.linkedContactMethods, function(index, value){
//				
//				sandbox.dom.each(updatedContact.linkedContactMethods, function(key,object){
//					
//					if(index == key && object.value != value.value){
//						contactMethodForLead.push(object);
//					}		
//				});
//			});
//			
//			if(contactMethodForLead.length != 0)
//				data.linkedContactMethods = contactMethodForLead;
//		}else{
//			data.linkedContactMethods = updatedContact.linkedContactMethods;
//		}
//		
//		if(updatedContact.hasOwnProperty('linkedLocations') && oldContact.hasOwnProperty('linkedLocations')){
//			
//			sandbox.dom.each(oldContact.linkedLocations, function(index,value){
//				
//				locationObj = {};
//				sandbox.dom.each(updatedContact.linkedLocations, function(key,object){
//					
//					if(key == index && object.address != value.address)
//						locationObj.address = object.address;
//					
//					if(key == index && object.city != value.city)
//						locationObj.city = object.city;
//						
//					if(key == index && object.state != value.state)
//						locationObj.state = object.state;
//					
//					if(key == index && object.country != value.country)
//						locationObj.country = object.country;
//					
//					if(key == index && object.zip != value.zip)
//						locationObj.zip = object.zip;
//				});
//				
//				if(!sandbox.util.isEmptyObject(locationObj))
//					linkedLocations[index] = locationObj;
//			});
//			if(!sandbox.util.isEmptyObject(linkedLocations))
//				data.linkedLocations = linkedLocations;
//			
//		}else{
//			if(!!updatedContact.linkedLocations)
//				data.linkedLocations = updatedContact.linkedLocations;
//		}
//		return data;
//	},
//	
//	getActivityLogString = function(data) {
//				
//		var activityLog = '', entity = '', userName = '', operation = "";
//		
//		try {
//			
//			entity = data.entity;
//			
//			if(!entity)
//				return;
//			
//			operation = data.operation;
//			operation = operation.charAt(0).toUpperCase() + operation.slice(1);
//			userName = sandbox.cache.get("loggedInUserName");
//			if(!userName)
//				userName = "";
//			
//			activityLog = userName + ' ' +operation +' '+ entity+'<br/><br/>';
//
//			activityLog = activityLog+'Details :<br/>';
//			
//			if(data.hasOwnProperty('contactID'))
//				activityLog = activityLog+'<b style="color:#0084b0;">ID :</b> '+data.contactID+'<br/>';
//			
//			if(data.hasOwnProperty('URL'))
//				activityLog = activityLog+'<b style="color:#0084b0;">URL :</b> '+data.URL+'<br/>';
//			
//			if(data.hasOwnProperty('firstName') && data.hasOwnProperty('lastName'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Name :</b> '+data.firstName + " " + data.lastName+'<br/>';
//			
//			if(data.hasOwnProperty('name'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Name :</b> '+data.name+'<br/>';
//			
//			if(data.hasOwnProperty('source'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Source :</b> '+data.source+'<br/>';
//				
//			if(data.hasOwnProperty('category'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Category :</b> '+data.category+'<br/>';
//			
//			if(data.hasOwnProperty('comments'))
//				if(!!data.comments)
//					activityLog = activityLog+'<b style="color:#0084b0;">Notes :</b> '+data.comments+'<br/>';
//				else
//					activityLog = activityLog+'<b style="color:#0084b0;">Notes Emptied.</b> <br/>';
//			
//			if(data.hasOwnProperty('linkedContacts'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Company :</b> '+data.linkedContacts.name +'<br/>';
//				
//			if(data.hasOwnProperty('removeCompany')) 
//				activityLog = activityLog+'<b style="color:#0084b0;">Company Removed :</b> '+data.removeCompany+'<br/>';
//			
//			if(data.hasOwnProperty('oldCompanyName'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Old Company :</b> '+data.oldCompanyName +'<br/>';
//			
//			if(data.hasOwnProperty('newCompanyName'))
//				activityLog = activityLog+'<b style="color:#0084b0;">New Company :</b> '+data.newCompanyName +'<br/>';
//			
//			if(data.hasOwnProperty('fullName'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Company :</b> '+data.fullName+'<br/>';
//			
//			if(data.hasOwnProperty('title'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Title :</b> '+data.title+'<br/>';
//			
//			if(data.hasOwnProperty('tag'))
//				activityLog = activityLog+'<b style="color:#0084b0;">Tag :</b> '+data.tag +'<br/>';
//			
//			
//			if(data.hasOwnProperty('linkedContactMethods') && !$.isEmptyObject(data.linkedContactMethods)) {
//				
//				var linkedContactMethods = [], listWebsite = [], listPhone = [], listEmail = [], 
//					listFax = [], listSocial = [], value = null;
//				
//				linkedContactMethods = data.linkedContactMethods;
//				
//				sandbox.dom.each(linkedContactMethods,function(index,contactMethodObj) {
//					
//					value = null;
//					value = contactMethodObj.value;
//					
//					switch(contactMethodObj.type) {
//					
//						case 'phone':
//							listPhone.push(value);
//							break;
//						case 'email':
//							listEmail.push(value);
//							break;
//						case 'fax':
//							listFax.push(value);
//							break;
//						case 'social':
//							listSocial.push(value);
//							break;
//						case 'web':
//							listWebsite.push(value);
//							break;			
//					}			
//				});	
//				
//				if(!sandbox.util.isEmptyObject(listPhone))
//					activityLog = activityLog+'<b style="color:#0084b0;">Phone :</b> '+listPhone+'<br/>';
//				
//				if(!sandbox.util.isEmptyObject(listEmail))
//					activityLog = activityLog+'<b style="color:#0084b0;">Email :</b> '+listEmail+'<br/>';
//				
//				if(!sandbox.util.isEmptyObject(listFax))
//					activityLog = activityLog+'<b style="color:#0084b0;">Fax :</b> '+listFax+'<br/>';
//				
//				if(!sandbox.util.isEmptyObject(listSocial))
//					activityLog = activityLog+'<b style="color:#0084b0;">Social :</b> '+listSocial+'<br/>';
//				
//				if(!sandbox.util.isEmptyObject(listWebsite))
//					activityLog = activityLog+'<b style="color:#0084b0;">Website :</b> '+listWebsite+'<br/>';
//			}
//			
//			if(data.hasOwnProperty('linkedLocations') && !$.isEmptyObject(data.linkedLocations)) {
//				
//				var address = '', state = '', city = '', zip = '', country = '', title = '';
//				var linkedLocations = [];		
//				
//				linkedLocations = data.linkedLocations;
//				
//				$.each(linkedLocations,function(index,locationObj) {
//					
//					address = locationObj.address;
//					state = locationObj.state;
//					city = locationObj.city;
//					zip = locationObj.zip;
//					country = locationObj.country;
//					
//					if(!!address)
//						activityLog = activityLog+'<b style="color:#0084b0;">Address :</b> '+address+'<br/>';
//					
//					if(!!state)
//						activityLog = activityLog+'<b style="color:#0084b0;">State :</b> '+state+'<br/>';
//					
//					if(!!city)
//						activityLog = activityLog+'<b style="color:#0084b0;">City :</b> '+city+'<br/>';
//					
//					if(!!zip)
//						activityLog = activityLog+'<b style="color:#0084b0;">Zip :</b> '+zip+'<br/>';
//					
//					if(!!country)
//						activityLog = activityLog+'<b style="color:#0084b0;">Country :</b> '+country+'<br/>';	
//					
//					activityLog = activityLog+'<br/>';
//				});		
//			}			
//		}
//		catch(e) {
//			console.log(e.message);
//		}
//	  return activityLog;
//	},
//	
//	addActivityLog = function(data) {
//		
//		if(sandbox.util.isEmptyObject(data)) {
//			return;
//		}
//		
//		var entityType =  data.entityType,
//			entityID = data.entityID,
//			oldContact = data.oldContact,
//			updatedContact = data.updatedContact,
//			linkedEntityType = data.linkedEntityType,
//			linkedEntityID = data.linkedEntityID,
//			operation = operation;
//		
//		var updatedPropertiesMap = getUpdatedProperties(entityType, entityID, oldContact, updatedContact, linkedEntityType, linkedEntityID, operation);
//		var historyComments = getActivityLogString(updatedPropertiesMap);
//		
//		sandbox.publish("insert-activity-log", { entityType : "lead", entityID : _leadID, historyComments : historyComments});						
//	},
	
	compareAndGetUpdatedPropertiesForContactMethod = function(oldContact, updatedContact, data) {
				
		var oldLinkedContactMethods = oldContact.linkedContactMethods,
			updatedLinkedContactMethods = updatedContact.linkedContactMethods;
		
		if(sandbox.util.isEmptyObject(oldLinkedContactMethods) && sandbox.util.isEmptyObject(updatedLinkedContactMethods))
			return data;
		
		if(sandbox.util.isEmptyObject(oldLinkedContactMethods))
				oldLinkedContactMethods = [];
		
		var arrayOfNewContactMethods = [], arrayOfUpdatedContactMethods = [], arrayOfDeletedContactMethods = [];
		
		var mapOfOldContactMethods = {};
		sandbox.dom.each(oldLinkedContactMethods, function(index, oldContactMethod) {
			
			if(oldContactMethod.deleted)
				return true;
			
			mapOfOldContactMethods[oldContactMethod.id] = oldContactMethod;
		});
		
		var mapOfUpdatedContactMethods = {};
		sandbox.dom.each(updatedLinkedContactMethods, function(index, updatedContactMethod) {
			
			if(updatedContactMethod.deleted)
				return true;
			
			mapOfUpdatedContactMethods[updatedContactMethod.id] = updatedContactMethod;
		});
		
		var oldContactMethod = null;
		sandbox.dom.each(mapOfUpdatedContactMethods, function(contactMethodID, updatedContactMethod) {
			
			oldContactMethod = null; 
			
			if(mapOfOldContactMethods.hasOwnProperty(contactMethodID)) {
				
				oldContactMethod = mapOfOldContactMethods[contactMethodID];
				
				if( (updatedContactMethod.title !== oldContactMethod.title) || (updatedContactMethod.value !== oldContactMethod.value) )
					arrayOfUpdatedContactMethods.push(updatedContactMethod);
				
				delete mapOfOldContactMethods[contactMethodID];
				
			} else {
				arrayOfNewContactMethods.push(updatedContactMethod);					
			}									
		});
		
		if(!sandbox.util.isEmptyObject(mapOfOldContactMethods)) {
			
			sandbox.dom.each(mapOfOldContactMethods, function(contactMethodID, deletedContactMethod) {
				arrayOfDeletedContactMethods.push(deletedContactMethod);
			});
		}
		
		if(!sandbox.util.isEmptyObject(arrayOfNewContactMethods))
			data.linkedContactMethods = arrayOfNewContactMethods;
		
		if(!sandbox.util.isEmptyObject(arrayOfUpdatedContactMethods))
			data.updatedContactMethods = arrayOfUpdatedContactMethods;
		
		if(!sandbox.util.isEmptyObject(arrayOfDeletedContactMethods))
			data.deletedContactMethods = arrayOfDeletedContactMethods;
		
		return data;
	},
	
	compareAndGetUpdatedPropertiesForLocation = function(oldContact, updatedContact, data) {
		
		var oldLinkedLocations = oldContact.linkedLocations,
			updatedLinkedLocations = updatedContact.linkedLocations;
		
		if(sandbox.util.isEmptyObject(oldLinkedLocations) && sandbox.util.isEmptyObject(updatedLinkedLocations))
			return data;
		
		if(sandbox.util.isEmptyObject(oldLinkedLocations))
				oldLinkedLocations = [];
		
		var arrayOfNewLocations = [], arrayOfUpdatedLocations = [], arrayOfDeletedLocations = [];
		
		var mapOfOldLocations = {};
		sandbox.dom.each(oldLinkedLocations, function(index, oldLocation) {
			
			if(oldLocation.deleted)
				return true;
			
			mapOfOldLocations[oldLocation.id] = oldLocation;
		});
		
		var mapOfUpdatedLocations = {};
		sandbox.dom.each(updatedLinkedLocations, function(index, updatedLocation) {
			
			if(updatedLocation.deleted)
				return true;
			
			mapOfUpdatedLocations[updatedLocation.id] = updatedLocation;
		});
		
		var oldLocation = null, updatedLocationObj = {};
		sandbox.dom.each(mapOfUpdatedLocations, function(locationID, updatedLocation) {
			
			oldLocation = null; 
			
			if(mapOfOldLocations.hasOwnProperty(locationID)) {
				
				oldLocation = mapOfOldLocations[locationID];
				
				if(updatedLocation.title !== oldLocation.title)
					updatedLocationObj['title'] = updatedLocation['title'];
				
				if(updatedLocation.address !== oldLocation.address)
					updatedLocationObj['address'] = updatedLocation['address'];
				
				if(updatedLocation.city !== oldLocation.city)
					updatedLocationObj['city'] = updatedLocation['city'];
				
				if(updatedLocation.state !== oldLocation.state)
					updatedLocationObj['state'] = updatedLocation['state'];
				
				if(updatedLocation.country !== oldLocation.country)
					updatedLocationObj['country'] = updatedLocation['country'];
				
				if(updatedLocation.zip !== oldLocation.zip)
					updatedLocationObj['zip'] = updatedLocation.zip;
					
//				if( (updatedLocation.title !== oldLocation.title) || (updatedLocation.address !== oldLocation.address) 
//						||  (updatedLocation.city !== oldLocation.city) ||  (updatedLocation.state !== oldLocation.state)
//						||  (updatedLocation.country !== oldLocation.country) ||  (updatedLocation.zip !== oldLocation.zip))
				if(!sandbox.util.isEmptyObject(updatedLocationObj))	
				arrayOfUpdatedLocations.push(updatedLocationObj);
				
				delete mapOfOldLocations[locationID];
				
			} else {
				arrayOfNewLocations.push(updatedLocation);					
			}									
		});
		
		if(!sandbox.util.isEmptyObject(mapOfOldLocations)) {
			
			sandbox.dom.each(mapOfOldLocations, function(locationID, deletedLocation) {
				arrayOfDeletedLocations.push(deletedLocation);
			});
		}
		
		if(!sandbox.util.isEmptyObject(arrayOfNewLocations))
			data.linkedLocations = arrayOfNewLocations;
		
		if(!sandbox.util.isEmptyObject(arrayOfUpdatedLocations))
			data.updatedLocations = arrayOfUpdatedLocations;
		
		if(!sandbox.util.isEmptyObject(arrayOfDeletedLocations))
			data.deletedLocations = arrayOfDeletedLocations;
		
		return data;
	},
	
	compareAndGetUpdatedPropertiesForContact = function(data) {
		
		var entityType =  data.entityType,
			entityID = data.entityID,
			arrayOfContactsBeforeUpdate = data.beforeUpdate,
			arrayOfContactsAfterUpdate = data.afterUpdate,
			linkedEntityType = data.linkedEntityType,
			linkedEntityID = data.linkedEntityID,
			operation = data.operation,
			category = data.category;
		
		if(!operation)
			return null; 
		
		if(operation.toLowerCase() === 'create') {
			
			if(category === 'company' || (category === 'person' && arrayOfContactsAfterUpdate.length === 1) ) {
				return arrayOfContactsAfterUpdate[0];
			}
			
			var company = null, person = null;
			sandbox.dom.each(arrayOfContactsAfterUpdate, function(index, contact) {
				
				if(contact.category === 'person') {
					person = contact;
					return true;
				}
					
				company = contact;
			});
			
			person.companyID = company.id;
			person.companyName = company.fullName;
			return person;
		}
		
		var oldContact = null, updatedContact = null;
		var updatedProperties = {};
		
		if(entityType === 'lead' || ( entityType === 'contact' && category === 'company' )) {
			
			oldContact = arrayOfContactsBeforeUpdate[0]; updatedContact = arrayOfContactsAfterUpdate[0];
		} else {
			
			var oldCompany = null, updatedCompany = null;
			
			sandbox.dom.each(arrayOfContactsBeforeUpdate, function(index, contact) {
				
				if(contact.category === 'person') {
					oldContact = contact;
				} else {
					oldCompany = contact;
				}								
			});
			
			sandbox.dom.each(arrayOfContactsAfterUpdate, function(index, contact) {
				
				if(contact.category === 'person') {
					updatedContact = contact;					
				} else {
					updatedCompany = contact;
				}				
			});
			
//			if(sandbox.util.isEmptyObject(oldCompany) && !sandbox.util.isEmptyObject(updatedCompany)) {
//				
//				updatedProperties.newCompanyID = updatedCompany.id;
//				updatedProperties.newCompanyName = updatedCompany.fullName;
//				
//			} else if(!sandbox.util.isEmptyObject(oldCompany) && sandbox.util.isEmptyObject(updatedCompany)) {
//				
//				updatedProperties.oldCompanyID = oldCompany.id;
//				updatedProperties.oldCompanyName = oldCompany.fullName;
//				
//			} else 
			
			if(!sandbox.util.isEmptyObject(oldCompany) && !sandbox.util.isEmptyObject(updatedCompany)) {
				
				if(oldCompany.id !== updatedCompany.id) {
					
					updatedProperties.newCompanyID = updatedCompany.id;
					updatedProperties.newCompanyName = updatedCompany.fullName;
					
					updatedProperties.oldCompanyID = oldCompany.id;
					updatedProperties.oldCompanyName = oldCompany.fullName;
				}
			}
		}
						
		
		updatedProperties.id = updatedContact.id;
		updatedProperties.category = updatedContact.category;
		updatedProperties.type = updatedContact.type;
		
		//console.info("oldContact : " + JSON.stringify(oldContact));
		
		//console.info("updatedContact : " + JSON.stringify(updatedContact));
		
		if(oldContact.comments !== updatedContact.comments)
			updatedProperties.comments = updatedContact.comments;
		
		var nameFromCache = null, nameFromDOM = null;
		if(category === 'person') {
			
			nameFromCache = sandbox.util.getPersonName(oldContact.firstName, oldContact.lastName);
			nameFromDOM = sandbox.util.getPersonName(updatedContact.firstName, updatedContact.lastName);
		} else {
			nameFromCache =  oldContact.fullName; nameFromDOM = updatedContact.fullName
		}
						
		if(nameFromCache != nameFromDOM)
			updatedProperties.name = nameFromDOM;
				
		if(oldContact.source != updatedContact.source)
			updatedProperties.source = updatedContact.source;
		
		if(oldContact.title != updatedContact.title)
			updatedProperties.title = updatedContact.title;


		updatedProperties = compareAndGetUpdatedPropertiesForContactMethod(oldContact, updatedContact, updatedProperties);
		
		updatedProperties = compareAndGetUpdatedPropertiesForLocation(oldContact, updatedContact, updatedProperties);
				
		return updatedProperties;
	},
	
	constructLogText = function(data, updatedProperties) {
				
		
		if(sandbox.util.isEmptyObject(updatedProperties) || Object.keys(updatedProperties).length == 3)
			return {};

		
		var text = sandbox.cache.get("loggedInUserName"), operation = null;
		
		switch(data.operation.toLowerCase()) {
			case "create" :
				operation = "Created";
				break;
			case "update" :
				operation = "Updated";
				break;
			case "remove" :
				operation = "Removed";
				break;
			default :
				break;
		}		

		text = text + " " + operation + " " + data.entityType + "<br/><br/>";
		
		text = text + 'Details : <br/>';
		
		if(updatedProperties.hasOwnProperty('id'))
			text = text+'<b style="color:#0084b0;">ID :</b> '+ updatedProperties.id +'<br/>';
		
		text = text + '<b style="color:#0084b0;">URL :</b> <a href="'+  sandbox.util.getEntityURL({ entityType : data.entityType, entityID : data.entityID}) +'" target = "_blank">'+ sandbox.util.getEntityURL({ entityType : data.entityType, entityID : data.entityID})+'</a><br/>';
		
		if(updatedProperties.hasOwnProperty('name'))
			text = text+'<b style="color:#0084b0;">Name :</b> '+updatedProperties.name+'<br/>';
		
		if(updatedProperties.hasOwnProperty('source') && !!updatedProperties['source'] )
			text = text+'<b style="color:#0084b0;">Source :</b> '+updatedProperties.source+'<br/>';
			
		if(updatedProperties.hasOwnProperty('category'))
			text = text+'<b style="color:#0084b0;">Category :</b> '+updatedProperties.category+'<br/>';
		
		if(updatedProperties.hasOwnProperty('title') && !!updatedProperties['title'])
			text = text+'<b style="color:#0084b0;"> Title : </b> ' + updatedProperties.title + '<br/>';
		
		if(updatedProperties.hasOwnProperty('newCompanyName') && updatedProperties.hasOwnProperty('oldCompanyName')){
			
			text = text+'<b style="color:#0084b0;">Old Company:</b> '+updatedProperties.oldCompanyName+'<br/>';
			text = text+'<b style="color:#0084b0;">New Company:</b> '+updatedProperties.newCompanyName+'<br/>';
		}
		
		if(updatedProperties.hasOwnProperty('newlinkedTags') && updatedProperties.hasOwnProperty('oldlinkedTags'))
		{
	
			text = text+'<b style="color:#0084b0;">Old Tags:</b> '+updatedProperties.oldlinkedTags+'<br/>';
			text = text+'<b style="color:#0084b0;">New Tags:</b> '+updatedProperties.newlinkedTags+'<br/>';
		
		}
			
		if(updatedProperties.hasOwnProperty('comments')) {
			
			if(!!updatedProperties.comments)
				text = text+'<b style="color:#0084b0;">Notes :</b> '+updatedProperties.comments+'<br/>';
			else
				text = text+'<b style="color:#0084b0;">Notes Emptied.</b> <br/>';
		}
		
		var newContactMethods = updatedProperties.linkedContactMethods;

		if(!sandbox.util.isEmptyObject(newContactMethods)) {
			
			sandbox.dom.each(newContactMethods, function(index, contactMethod) {
								
				switch(contactMethod.type) {
					case "phone" :
						text = text+ '<b style="color:#0084b0;"> Created Phone : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					case "email" :
						text = text+ '<b style="color:#0084b0;"> Created Email : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					case "fax" :
						text = text+ '<b style="color:#0084b0;"> Created Fax : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					case "web" :
						text = text+ '<b style="color:#0084b0;"> Created Website : </b> ' + " - Title : Website <br/>";
						break;
					case "social" :
						text = text+ '<b style="color:#0084b0;"> Created Social : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
				}								
			});
		}
		

		var updatedContactMethods = updatedProperties.updatedContactMethods;
		if(!sandbox.util.isEmptyObject(updatedContactMethods)) {
			
			sandbox.dom.each(updatedContactMethods, function(index, contactMethod) {

				switch(contactMethod.type) {
					case "phone" :
						text = text+ '<b style="color:#0084b0;"> Updated Phone : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					case "email" :
						text = text+ '<b style="color:#0084b0;"> Updated Email : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					case "fax" :
						text = text+ '<b style="color:#0084b0;"> Updated Fax : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					case "web" :
						text = text+ '<b style="color:#0084b0;"> Updated Website : </b> ' + contactMethod.value +  " - Title : Website <br/>";
						break;
					case "social" :
						text = text+ '<b style="color:#0084b0;"> Updated Social : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
				}								
			});
		}
		

		var deletedContactMethods = updatedProperties.deletedContactMethods;
		if(!sandbox.util.isEmptyObject(deletedContactMethods)) {
			
			sandbox.dom.each(deletedContactMethods, function(index, contactMethod) {
				
				switch(contactMethod.type) {
					case "phone" :
						text = text+ '<b style="color:#0084b0;"> Deleted Phone : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					
					case "email" :
						text = text+ '<b style="color:#0084b0;"> Deleted Email : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					
					case "fax" :
						text = text+ '<b style="color:#0084b0;"> Deleted Fax : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
					case "web" :
						text = text+ '<b style="color:#0084b0;"> Deleted Website : </b> ' + contactMethod.value + "<br/>";
						break;
					case "social" :
						text = text+ '<b style="color:#0084b0;"> Deleted Social : </b> ' + contactMethod.value + (!!contactMethod.title?("  - Title : " + contactMethod.title + "<br/>"):"<br/>");
						break;
				}								
			});
		}
		
		var newLocations = updatedProperties.linkedLocations;
		
		if(!sandbox.util.isEmptyObject(newLocations)) {
			
			sandbox.dom.each(newLocations, function(index, location) {
				
				if(!!location.address)
				text = text+ '<b style="color:#0084b0;"> Created Address : </b> ' + (!!location.address?location.address+'<br/>':"<br/>") ;
				
				if(!!location.city)
					text = text + "<b style='color:#0084b0;'> City : </b>" + location.city + "<br/>";
					
				if(!!location.state)
					text = text + "<b style='color:#0084b0;'> State : </b>" + location.state + "<br/>";
				
				if(!!location.country)
					text = text + "<b style='color:#0084b0;'> Country : </b>" + location.country + "<br/>";
				
				if(!!location.zip)
					text = text + "<b style='color:#0084b0;'> ZipCode : </b>" + location.zip + "<br/>";
								
				text = text + "<br/> <br/>";
			});
		}
		
		var updatedLocations = updatedProperties.updatedLocations;

		
		if(!sandbox.util.isEmptyObject(updatedLocations)) {
			
			sandbox.dom.each(updatedLocations, function(index, location) {
				
				if(!!location.address)
				text = text+ '<b style="color:#0084b0;"> Address : </b> ' + (!!location.address?location.address+'<br/>':"<br/>") ;
				
				if(!!location.title)
			    text = text+ '<b style="color:#0084b0;"> Title : </b>' + location.title + ' address <br/>';
				
				if(!!location.city)
					text = text + " <b style='color:#0084b0;'> City : </b>" + location.city + "<br/>";
					
				if(!!location.state)
					text = text + " <b style='color:#0084b0;'> State : </b>" + location.state + "<br/>";
				
				if(!!location.country)
					text = text + "<b style='color:#0084b0;'> Country : </b>" + location.country + "<br/>";
				
				if(!!location.zip)
					text = text + "<b style='color:#0084b0;'> ZipCode : </b>" + location.zip + "<br/>";
				
				
				text = text + "<br/> <br/>";
			});
		}
		
		var deletedLocations = updatedProperties.deletedLocations;
		
		if(!sandbox.util.isEmptyObject(deletedLocations)) {
			
			sandbox.dom.each(deletedLocations, function(index, location) {
				
				if(!!location.address)
				text = text+ '<b style="color:#0084b0;"> Deleted Address : </b> ' + (!!location.address?location.address:"<br/>") ;
				
				if(!!location.city)
					text = text + " <b style='color:#0084b0;'> City : </b>" + location.city + "<br/>";
					
				if(!!location.state)
					text = text + " <b style='color:#0084b0;'> State : </b>" + location.state + "<br/>";
				
				if(!!location.country)
					text = text + "<b style='color:#0084b0;'> Country : </b>" + location.country + "<br/>";
				
				if(!!location.zip)
					text = text + " <b style='color:#0084b0;'> ZipCode : </b>" + location.zip + "<br/>";
				
				if(!!location.title)
					text = text + "Title : </b>" + location.title + "<br/>";
				
				text = text + "<br/> <br/>";
			});
		}
		
		return text;
	},
	
	addActivityLog = function(data) {
		
		var objMap = {}, objArr = [];
		
		if(sandbox.util.isEmptyObject(data)) {
			return;
		}
		
       
		
		//console.info("addActivityLog - " + JSON.stringify(data))
		if(data.linkedEntityType == 'account')
			objMap['linkedAccount'] = data.linkedEntityID;
		else if(data.linkedEntityType == "deal")
			objMap['linkedDeal'] = data.linkedEntityID;
		else if (data.linkedEntityType == 'task')
			objMap['linkedTask'] = data.linkedEntityID;
		
		objMap['linkedContact'] = data.entityID;
		
		var updatedProperties = compareAndGetUpdatedPropertiesForContact(data);
		
				
		if(sandbox.util.isEmptyObject(updatedProperties))
			return;
		
		var historyComments = constructLogText(data, updatedProperties);
				
		
		if((sandbox.util.isEmptyObject(historyComments) || historyComments == null) && sandbox.cache.get('tagsUpdated') == false){
			sandbox.alert.dialog({text:"No contact fields has been updated", type:"ok"});
			return;
		}
		
		if(!sandbox.util.isEmptyObject(historyComments)){
			
			objMap['historyComments'] = historyComments;
			objArr.push(objMap);
			
			//sandbox.publish("insert-activity-log", { entityType : data.entityType, entityID : data.entityID, historyComments : historyComments});
			sandbox.publish('insert-bulk-history',objArr);
			
		}

	};
	
	return {
		
		init : function() {
			
			_self = this,
			_mapOfStandardCMTitles['Mobile Phone'] = {"type":"phone","title":"mobile"},
			_mapOfStandardCMTitles['Work Phone'] = {"type":"phone","title":"work"},
			_mapOfStandardCMTitles['Home Phone'] = {"type":"phone","title":"home"};
			_mapOfStandardCMTitles['Main Phone'] = {"type":"phone","title":"main"};
			_mapOfStandardCMTitles['Work Fax'] = {"type":"fax","title":"work"};
			_mapOfStandardCMTitles['Home Fax'] = {"type":"fax","title":"home"};
			_mapOfStandardCMTitles['Main Fax'] = {"type":"fax","title":"main"};
			_mapOfStandardCMTitles['Personal Email'] = {"type":"email","title":"personal"};
			_mapOfStandardCMTitles['Work Email'] = {"type":"email","title":"work"};
			_mapOfStandardCMTitles['Facebook'] = {"type":"social","title":"facebook"};
			_mapOfStandardCMTitles['Twitter'] = {"type":"social","title":"twitter"};
			_mapOfStandardCMTitles['Google Plus'] = {"type":"social","title":"google plus"};
			_mapOfStandardCMTitles['LinkedIn'] = {"type":"social","title":"linkedin"};
						
			_mapOfStandardLocationTitles['Home Address'] = {"title":"home"};
			_mapOfStandardLocationTitles['Office Address'] = {"title":"office"};
			
			
			_mapOfStandardCMTitleToLabel['phone'] = {"mobile" : "Mobile Phone", "work" : "Work Phone", "home" : "Home Phone", "main" : "Main Phone", "phone" : "Phone"};	
			_mapOfStandardCMTitleToLabel['fax'] = {"work" : "Work Fax", "home" : "Home Fax", "main" : "Main Fax", "fax" : "Fax"};
			_mapOfStandardCMTitleToLabel['email'] = {"personal" : "Personal Email", "work" : "Work Email", "email" : "Email"};
			_mapOfStandardCMTitleToLabel['social'] = {"facebook" : "Facebook", "twitter" : "Twitter", "linkedin" : "LinkedIn", "google plus" : "Google plus", "social" : "Social"};
			
			_mapOfStandardLocationTitleToLabel['home'] = {"title":"Home Address"};
			_mapOfStandardLocationTitleToLabel['office'] = {"title":"Office Address"};
			
			_addOrUpdatePopUpEl = sandbox.dom("#add-or-update-contact-popup");						
			_addOrUpdatePopUpFooterEl = _addOrUpdatePopUpEl.find("#add-or-update-contact-popup-footer");
			_addOrUpdatePopUpSaveEl = _addOrUpdatePopUpFooterEl.find("#add-or-update-contact-popup-save-btn");
			_addOrUpdatePopUpCancelEl = _addOrUpdatePopUpFooterEl.find("#add-or-update-contact-popup-cancel-btn");
			
			_addOrUpdatePopUpHeaderID = "#add-or-update-contact-popup-header";
			_addOrUpdatePopUpBodyID = "#add-or-update-contact-popup-body";
			_addOrUpdatePopUpPhotoUploadID = "#add-or-update-contact-photo-upload";
			
			sandbox.subscribe("show-new-contact-popup",_self.showNewContactPopUp);
			sandbox.subscribe("show-update-contact-popup", _self.showEditContactPopUp);
			sandbox.subscribe("fieldInfo-cache-updated", setStandardFieldInfo);
			sandbox.subscribe("add-activity-log-for-contact-operations", _self.addActivityLog);
			sandbox.subscribe('get-Activity-Log-For-Associations',getActivityLogForAssociationsAndDissociations);
			//Added for closing popup from 'contacts-action' module 
			sandbox.subscribe("add-update-contacts-popup-hide-popup", _self.hidePopUp);
			_addOrUpdatePopUpCancelEl.on("mousedown", _self.hidePopUp);
						
			_addOrUpdatePopUpFooterEl.on("click", "div ul li a", function(event) {				
				insertSelectedHtmlBasedOnType(event);
			});
			
			_addOrUpdatePopUpEl.on('blur', 'div ul li input[name="company"]',function(){
					sandbox.dom(this).parent().find("ul.dropdown-menu").remove();
			});
			
			_addOrUpdatePopUpEl.on("contact.popup.company.search.results:hide", "[data-type='company'] div.dropdown", function(event) {
				_addOrUpdatePopUpEl.find("[data-type='company']").find("ul.dropdown-menu").remove();
			});
			
			// To Click event for button element when ENTER key is pressed on any input element			
			_addOrUpdatePopUpEl.on("keypress", "input", function(event) {
				//console.info("Global KeyUp - " + event.target.nodeName + "  KeyCode - " + event.keyCode);
				
				if(event.keyCode === 13) {
					
					if(sandbox.dom(event.target).attr("name") === "company") {
						
						sandbox.dom(event.target).trigger("contact.popup.company:update");
						sandbox.dom(event.target).parent().trigger("contact.popup.company.search.results:hide");
					} else
						event.preventDefault();
				}		
			});			

			_addOrUpdatePopUpEl.on("click", "input.dropdown-input", function(e){ //for source dropdown based on Standard Custom Fields
				var ul = sandbox.dom(e.target).next("ul.dropdown-menu");
				if(ul.children().length > 0)
					ul.addClass("show");
			});
			
			_addOrUpdatePopUpEl.on("click", "ul.sourceStandardFieldUL li", function(e){ //for source dropdown based on Standard Custom Fields
				var value;
				if(e.target.tagName == "A")
					value = e.target.innerHTML;
				else
					value = sandbox.dom(e.target).children[0].innerHTML;
				sandbox.dom(e.target).parents("ul").prev("input.dropdown-input").val(value);
				sandbox.dom(e.target).parents("ul").removeClass("show");
			});			
		},
		
		destroy : function() {
			sandbox.unsubscribe();
		},
		
		showNewContactPopUp : function() {
			showNewContactPopUp();
		},
		
		hidePopUp : function() {
			hidePopUp();
		},
		
		showEditContactPopUp : function(data) {
			showEditContactPopUp(data);
		},
		
		addActivityLog : function(data) {
			addActivityLog(data);
		}
	};
});

DSCRM.Core.registerModule("contacts-tab",["url","cache","alert","util","ajax"], function(sandbox) {
	
	var _self = null,
	contactsTabCol1El = "#contacts .concol1",
	contactsTabCol2El = "#contacts .concol2",
	customersListNavEl = contactsTabCol1El + " ul.customer_list_header",
	contactListNavEl = contactsTabCol1El + " nav.contact_list_header",
	checkboxDropdownEl = contactListNavEl + " div.checkboxDropdown",
	customerListContainerEl = contactsTabCol1El + " ul#customerListContainer",
	fetchMoreEl = customerListContainerEl + " li#fetchMore",
	_contactsTabContactInfoEl = contactsTabCol2El + " div.con_userinfo",
	contactsTabCol2ContentEl = contactsTabCol2El + " div.con_content",
	contactsTabCol2ContentNavPillsEl = contactsTabCol2ContentEl + " .nav-pills",
	navPillTabContent = contactsTabCol2ContentEl + " .tab-content",
	_removeExistingDealEl = ".remove-existing-deal",
	_removeExistingContactEl = ".remove-existing-contact",
	_deleteSelectedContactsEl = "#deleteSelectedContacts",
	_currentContactsTabNavView = "",
	_contactCategoryVariables = {},
	_dropdownMenuOptionsTemplate = dscrm.templates.settings.dropdownMenuOptions,
	_emptyContactPlaceholder = dscrm.templates.contacts.emptyContactPlaceholder,
	_activityLogForContactNote = null,
	_isNewContactRowNeeded = false,
	_isNewlyCreatedContact = false,
	_keyCodeForContactNameInput = 0,
	_isContactsListingEmpty = true,
	
	initializeCategoryVariables = function () {
		
		var categoryList = ['person', 'company'];
		
		sandbox.dom.each(categoryList, function(key,categoryKey) {
			_contactCategoryVariables[categoryKey] = {};
			_contactCategoryVariables[categoryKey]['listOfID'] = [];
			_contactCategoryVariables[categoryKey]['cursor'] = "";
			_contactCategoryVariables[categoryKey]['isPreLoaded'] = false;
			_contactCategoryVariables[categoryKey]['isRequestOngoing'] = false;
		});
		
		_contactCategoryVariables['person']['addNewBtn'] = contactListNavEl + " #idAddNewPerson";
		_contactCategoryVariables['company']['addNewBtn'] = contactListNavEl + " #idAddNewCompany";
	},
	
	getContactCategoryKey = function(str) {
		return (str.toLowerCase().indexOf('person') != -1) ? "person" : "company"
	},
	
	getInactiveContactCategoryKey = function(str) {
		return (str.toLowerCase().indexOf('person') != -1) ? "company" : "person"
	},
	
	setListOfIDForCategoryInCache = function(categoryKey, listOfID) {
		if(!sandbox.util.isEmptyObject(listOfID)) {
			sandbox.dom.each(listOfID, function(index, ID) {
				if(_contactCategoryVariables[categoryKey]['listOfID'].indexOf(ID) == -1)
					_contactCategoryVariables[categoryKey]['listOfID'].push(ID);
			});
		}
	},

	showContactsNavView = function(listViewNavID) {

		var contactCategoryKey = getContactCategoryKey(listViewNavID),
			inactiveContactCategoryKey = getInactiveContactCategoryKey(listViewNavID);
		
		switchContactsTabNavView(contactCategoryKey, inactiveContactCategoryKey);
		showTabContent(contactCategoryKey);
	},
	
	switchContactsTabNavView = function(activeCategory, inactiveCategory) {
		
		var activeListHeaderNavLi = (activeCategory === 'person') ? "#show-person-list" : "#show-company-list"
		
		if(_currentContactsTabNavView != activeCategory) {
			sandbox.dom(customerListContainerEl).empty();
			sandbox.dom(checkboxDropdownEl).find("input[type='checkbox']").prop('checked', false);
			//sandbox.dom(dscrm.templates.contacts.newContact()).appendTo(customerListContainerEl);
		}

		sandbox.dom(customersListNavEl).children().removeClass("active");
		sandbox.dom(customersListNavEl).find(activeListHeaderNavLi).addClass("active");
		
		if(activeCategory == 'company')
			sandbox.dom(contactsTabCol2ContentNavPillsEl).find(" .people_holder").removeClass("hide");
		else
			sandbox.dom(contactsTabCol2ContentNavPillsEl).find(" .people_holder").addClass("hide");
		
		_currentContactsTabNavView = activeCategory;

		sandbox.dom(_contactCategoryVariables[inactiveCategory]['addNewBtn']).removeClass("show").addClass("hide");
		sandbox.dom(_contactCategoryVariables[activeCategory]['addNewBtn']).removeClass("hide").addClass("show");
	},
	
	showTabContent = function(contactCategoryKey) {
		
		var categoryObj = _contactCategoryVariables[contactCategoryKey];
		
		_currentContactsTabNavView = contactCategoryKey;

		if(!categoryObj['isPreLoaded']) {
			categoryObj['listOfID'] = [];
			categoryObj['cursor'] = "";
			getAllPersonOrCompany('');
			 
		} else if(sandbox.dom(customerListContainerEl).scrollTop() + sandbox.dom(customerListContainerEl).innerHeight() >= 
					sandbox.dom(customerListContainerEl)[0].scrollHeight && sandbox.dom(customerListContainerEl).scrollTop() != 0)
			getAllPersonOrCompany(categoryObj['cursor']);
		else
			showContactListing(categoryObj['listOfID'], categoryObj['cursor'], contactCategoryKey, categoryObj['listOfID'][0]);
	},
	
	getAllPersonOrCompany = function(cursor) {
		
		var data = {},
			categoryObj = _contactCategoryVariables[_currentContactsTabNavView],
			departmentID = sandbox.cache.get("selectedDepartmentID");
		
		if(categoryObj['isRequestOngoing'])
			return;
		
		sandbox.alert.message({text : "Loading..."});
		
		if(!!departmentID)
			data['departmentID'] = departmentID;
		
		categoryObj['isRequestOngoing'] = true;
		
		data['cursor'] = cursor;
		data['limit'] = 20; 
		
		if(_currentContactsTabNavView == 'person')
			sandbox.ajax.request({method: "POST", url: "/getAllPerson_v2", endpoint: "/getAllPerson_v2", data: data, callBack: getAllPersonOrCompanyCallback});
		else
			sandbox.ajax.request({method: "POST", url: "/getAllCompany_v2", endpoint: "/getAllCompany_v2", data: data, callBack: getAllPersonOrCompanyCallback});
		
	},
	
	hideOrShowBtnsAndSection = function(){
		
		if(_isContactsListingEmpty){
			sandbox.dom(checkboxDropdownEl).hide();
			sandbox.dom("#exportContacts").hide();
			sandbox.dom(contactsTabCol2ContentEl).addClass("hide");
			sandbox.dom(customerListContainerEl).empty();
			sandbox.dom('#contact-tab-column-2').find("div.alert-warning").addClass("hide");
			sandbox.dom(_contactsTabContactInfoEl).empty().append(_emptyContactPlaceholder);
			window.location.hash = "#contacts";
		}else{
			sandbox.dom(checkboxDropdownEl).show();
			sandbox.dom("#exportContacts").show();
		}
		
	},
	
	getAllPersonOrCompanyCallback = function(resultObject) {
		
		if( sandbox.util.isEmptyObject( resultObject ) || !resultObject.success ) {
			sandbox.alert.message({text : "Server Error , Plz refresh..."});
			return;
		}
		
		var listOfIDForShow = [],
		contactsCacheObj = sandbox.cache.get("contacts"),
		cursor = resultObject.cursor,
		mapOfContactInfo = resultObject.contact,
	//	categoryObj = _contactCategoryVariables[_currentContactsTabNavView];
		categoryObj = _contactCategoryVariables[resultObject.category];
		
		if(sandbox.util.isEmptyObject(mapOfContactInfo) && sandbox.util.isEmptyObject(categoryObj['listOfID'])) {

			_isContactsListingEmpty = true;
			hideOrShowBtnsAndSection();

			if(_isNewContactRowNeeded){
				sandbox.dom(customerListContainerEl).prepend(dscrm.templates.contacts.newContact());
				sandbox.dom(customerListContainerEl+" li:nth-child(1)").trigger('click');
				sandbox.alert.hideMessage();
				_isNewContactRowNeeded = false;
				sandbox.alert.hideMessage();
				categoryObj['isRequestOngoing'] = false;
				return;
			}

		}else
			_isContactsListingEmpty = false;
			
		
		if(!sandbox.util.isEmptyObject(mapOfContactInfo)) {

			sandbox.dom.each(mapOfContactInfo, function(key,value) {
				if(sandbox.dom.inArray( value['id'] , categoryObj['listOfID']) != -1)
					return true;
					
				contactsCacheObj[value['id']] = value;
				categoryObj['listOfID'].push(value['id']);
				listOfIDForShow.push(value['id']);
			});
			
			categoryObj['isPreLoaded'] = true;
			categoryObj['cursor'] = cursor;
			
			if(!sandbox.util.isEmptyObject(listOfIDForShow))
				showContactListing(listOfIDForShow, cursor, resultObject.category, null);
			else if(!cursor)
				sandbox.dom(fetchMoreEl).remove();
		}
		else {
			categoryObj['cursor'] = '';
			sandbox.dom(fetchMoreEl).remove();
		}

		sandbox.alert.hideMessage();
		categoryObj['isRequestOngoing'] = false;
	},
	
	showContactListing = function(listOfContactID, cursor, category, selectedContactID) {
		
		var contactObj = {}, data = {},
		listOfContact = [],
		currentSelectedCategoryID = null,
		currentSelectedCategoryKey = null,
		contactsCacheObj = sandbox.cache.get("contacts");
		
		currentSelectedCategoryID = sandbox.dom(customersListNavEl).children(".active").attr("id");
		currentSelectedCategoryKey = (currentSelectedCategoryID == "show-person-list") ? "person" : "company";
						
		if(currentSelectedCategoryKey != category)
			return;
		
		sandbox.dom.each( listOfContactID , function(index, value)  {
			
			if(sandbox.dom(customerListContainerEl + " li#contact_"+value).length == 1)
				return true;
			
			contactObj = contactsCacheObj[value];
			data = {};
			data['contactid'] = value;
			data['contactname'] = (_currentContactsTabNavView == 'person') ?
								sandbox.util.getPersonName(contactObj['firstName'], contactObj['lastName']) : contactObj['fullName'];
			data['category'] = contactObj.category;
			data['deleted'] = contactObj.deleted;
			
			if(value == selectedContactID) {
				listOfContact.unshift( data );
				sandbox.dom(customerListContainerEl).scrollTop(0);
			}
			else
				listOfContact.push( data );
		});

		if(sandbox.dom(fetchMoreEl).length == 1 ) 
			sandbox.dom(fetchMoreEl).remove();
		
		if(!sandbox.util.isEmptyObject(listOfContact))
			sandbox.dom(dscrm.templates.contacts.contactName({contactList: listOfContact})).appendTo(customerListContainerEl);
		else{
			sandbox.dom(_contactsTabContactInfoEl).empty().append(_emptyContactPlaceholder);
		}
		
		if(!!cursor) {
			if(sandbox.dom(customerListContainerEl)[0].scrollHeight==sandbox.dom(customerListContainerEl).innerHeight())
				sandbox.dom(dscrm.templates.contacts.fetchMore({ contactname : 'More..' })).appendTo(customerListContainerEl);
			else
				sandbox.dom(dscrm.templates.contacts.fetchMore({ contactname : 'Loading More Contacts..' })).appendTo(customerListContainerEl);
		}

		if(_isNewContactRowNeeded){
			sandbox.dom(customerListContainerEl).prepend(dscrm.templates.contacts.newContact());
			sandbox.dom(customerListContainerEl+" li:nth-child(1)").trigger('click');
			_isNewContactRowNeeded = false;
			return;
		}else
			sandbox.dom(customerListContainerEl).find("#li_new_customer").remove();
		
		if(!sandbox.dom(customerListContainerEl).children().hasClass("active") && !selectedContactID)
			sandbox.dom(customerListContainerEl+" li:nth-child(1)").trigger('click');
		else if(!!selectedContactID)
			sandbox.publish("trigger-click-event-contact", {contactID : selectedContactID, isNewlyCreatedContact : _isNewlyCreatedContact, keyCodeForContactNameInput : _keyCodeForContactNameInput});
		else if(sandbox.dom(customerListContainerEl).children().hasClass("active"))
			sandbox.dom(customerListContainerEl+" li.active").trigger('click');
	},
	
	loadContactInfo = function(data) {
		
		var contactsCacheObj = sandbox.cache.get("contacts"),
			contactID = data.id;

		if(sandbox.util.isEmptyObject(contactsCacheObj) || !contactsCacheObj.hasOwnProperty(contactID)) {
			getContactNotInJSCache("unkown", contactID);
			return;
		}
		
		var contactObj = contactsCacheObj[contactID];		
		var category = contactObj['category'];
		var contactType = contactObj['type'];
		
		if(contactType === 'lead') {
			window.location.hash = '#lead/'+contactID;
			return;
		}
		
		displayContactRelatedInfo(category, contactID);
		showOtherInfoForContact(category, contactID);
	},
	
	getContactNotInJSCache = function(type, contactID) {
		
		var data = {
				'type' : type,
				'contactID' : contactID,
				'departmentID' : sandbox.cache.get("selectedDepartmentID"),
				'accessibleDepartments' : sandbox.cache.get("accessibleDepartments")
		};
		sandbox.ajax.request({method : "POST", url: "/getContact_v2", endpoint: "/getContact_v2", data : data, callBack: getContactNotInJSCacheCallback});
	},
	
	getContactNotInJSCacheCallback = function(resultObject) {
		
		if(sandbox.util.isEmptyObject(resultObject) || !resultObject['success'] || resultObject['statusCode'] == 500 ||
				resultObject.hasOwnProperty("switchDepartment")) {
			
			if(resultObject['statusCode'] == 500)
				sandbox.alert.message({text : "OOPS!! Server Error, Contact Not Loaded..."});  // Shiyaam - add try again
			else if(resultObject['statusCode'] == 404)
				sandbox.alert.message({text : "OOPS!! Contact Not Found In Your Account...", time : 8000});
			else if(resultObject.hasOwnProperty("errorMessage"))
				sandbox.alert.message({text : resultObject['errorMessage'], time : 4000});
			else if(resultObject.hasOwnProperty("switchDepartment"))
				sandbox.publish("switch-department-tab",{"departmentID" : resultObject['switchDepartment']});
			return;
		}
		
		var contactID = resultObject.contactID,
			mapOfContactInfo = resultObject.contact,
			contactsCacheObj = sandbox.cache.get("contacts"),
			type = '', contactType = '';
		
		if(sandbox.util.isEmptyObject(mapOfContactInfo)) {
			sandbox.alert.message({text : 'OOPS!! Person not present for the account'});
			return;
		}
		
		sandbox.dom.each(mapOfContactInfo,function(key,value){
			contactsCacheObj[key] = value;
			type = value['category'];
			contactType = value['type'];
			setListOfIDForCategoryInCache(type, [key]);
		});
		
		if('lead'===contactType) {
			window.location.hash='#lead/'+contactID;
			return;
		}

		displayContactRelatedInfo(type, contactID);
		showOtherInfoForContact(type, contactID);
	},
	
	displayContactRelatedInfo = function(categoryKey, contactID) {
		
		enableContactsTab();
		// disable people subtab for person
		
		var listOfPersonIDForShow = _contactCategoryVariables[categoryKey]['listOfID'],
			inactiveCategory = (categoryKey == 'person') ? 'company' : 'person',
			cursor = _contactCategoryVariables[categoryKey]['cursor'], typeData = {type: "contact"};
		
		if(_contactCategoryVariables[categoryKey]['listOfID'].indexOf(contactID) == -1)
			listOfPersonIDForShow.push(contactID);

		switchContactsTabNavView(categoryKey, inactiveCategory);
		
		if(!_contactCategoryVariables[categoryKey]['isPreLoaded'])
			cursor = 'dummy';

		showContactListing(listOfPersonIDForShow, cursor, categoryKey, contactID);
		_isNewlyCreatedContact = false;
		
		sandbox.publish("task-subtab-clear",typeData)
		.publish("customfields-subtab-clear",typeData);
		
		sandbox.publish("display-contact-details", {contactID : contactID});
	},
	
	showOtherInfoForContact = function(category, contactID){
		
		var contactObj = {},
			contactTitle = '',
			contactsCacheObj = sandbox.cache.get("contacts");
		
		if( !sandbox.util.isEmptyObject( contactsCacheObj ) && !sandbox.util.isEmptyObject( contactsCacheObj[contactID] ) ) {		
			contactObj = contactsCacheObj[contactID];
			
			sandbox.publish("contact-otherinfo-fetched", {obj: contactObj});
			
			if(category == 'person')
				contactTitle = sandbox.util.getPersonName(contactObj['firstName'], contactObj['lastName']);
			else
				contactTitle = contactObj['fullName'];
			
			sandbox.util.pageTitle(contactTitle,"Contact");
			
			//update recent items
			sandbox.publish("update-recent-item",{entity:'contact',entityID:contactID,entityTitle:contactTitle,category:category});
		}
		
		sandbox.dom(contactsTabCol2ContentNavPillsEl).find("#contactTasksSubTabLi a").trigger('click');

		sandbox.dom(navPillTabContent).find("#contactnotes div.notes").summernote('code', contactObj['comments']);
		var dataObj = {type: "contact", obj : contactObj};
		
		
		sandbox.publish("documents-display-subtab", dataObj)
			.publish("customfields-display-subtab", dataObj)
			.publish("display-history", { entityType : "contact", entityID : contactObj.id});
		
		if(category == 'company')
			sandbox.publish("bind-events-for-contact-actions", { entityType : "contact", entityID : contactObj.id , linkedContacts : contactObj.linkedContacts});	
	},
	
	getOtherInfoForEntity = function(data) {
				
		if(data.hasOwnProperty("success")){
			addEntities({data : data});
			//sandbox.alert.hideMessage();
			return;
		}
		
		var entityObj = data.obj, entityType = data.type, linkedProperty = data.linkedProperty,
			linkedPropertyEntityType = '', emptyTemplate = null, type = '';
			
		if(linkedProperty.toLowerCase().indexOf('deal') != -1)
			linkedPropertyEntityType = 'deals';
		else if(linkedProperty.toLowerCase().indexOf('account') != -1)
			linkedPropertyEntityType = 'accounts';
		else
			linkedPropertyEntityType = 'contacts';
			
		if(linkedPropertyEntityType == 'contacts' && entityObj.category != 'company')
			return;
			
		switch(linkedPropertyEntityType) {
			case "deals":
				emptyTemplate = dscrm.templates.deals.emptyDealListForEntity({});
				break;
			case "accounts":
				emptyTemplate = dscrm.templates.accounts.emptyAccountsListForEntity({});
				break;
			case "contacts":
				emptyTemplate = dscrm.templates.contacts.emptyPeopleListForEntity({});
			default :
				break;
		}
		
		sandbox.dom("#"+entityType + linkedPropertyEntityType + " ul.related-to-" + linkedPropertyEntityType + "-list").empty();
		
		if(sandbox.util.isEmptyObject(entityObj[linkedProperty])) {
			sandbox.dom("#"+ entityType + linkedPropertyEntityType +" ul.related-to-" + linkedPropertyEntityType + "-list").append(emptyTemplate);
			return;
		}

		var map = {}, propertyMap = {}, AccountPIN = sandbox.cache.get("accountID"), 
			listOfLinkedPropertyIdsToBeFetched = [], listOfPropertyObjKeysInCache = [], 
			listOfLinkedPropertyIdsInCache = [],
			propertyObjectsInCache = sandbox.cache.get(linkedPropertyEntityType);
		
		type = (linkedPropertyEntityType != 'contacts') ? 'contact' : 'company';
		map['linkedEntity'] = {"ID":entityObj.id, "type":type, "linkedPropertyEntityType" : linkedPropertyEntityType};
		
		if(!sandbox.util.isEmptyObject(propertyObjectsInCache))
			listOfPropertyObjKeysInCache = Object.keys(propertyObjectsInCache);
		
		listOfLinkedPropertyIdsToBeFetched = (entityObj[linkedProperty]).filter( function( el ) {
			return listOfPropertyObjKeysInCache.indexOf( el.toString() ) < 0;
		} );
		
		listOfLinkedPropertyIdsInCache = (entityObj[linkedProperty]).filter( function( el ) {
			return listOfPropertyObjKeysInCache.indexOf( el.toString() ) > -1;
		} );
		
		if(!sandbox.util.isEmptyObject(listOfLinkedPropertyIdsInCache)) {
			sandbox.dom.each(listOfLinkedPropertyIdsInCache, function(id, value) {
				propertyMap[value] = propertyObjectsInCache[value];
			});
			map[linkedPropertyEntityType] = propertyMap;
			addEntities({data : map});
		}
		
		if(sandbox.util.isEmptyObject(listOfLinkedPropertyIdsToBeFetched))
			return;
		
		map[linkedPropertyEntityType] = listOfLinkedPropertyIdsToBeFetched;
		map["departmentID"] = sandbox.cache.get("selectedDepartmentID");
		
		if(linkedPropertyEntityType === 'deals')
			sandbox.ajax.request({method :"POST", url:"/getDealsForIds?apikey="+AccountPIN, endpoint: "/getDealsForIds", data : map, callBack : getOtherInfoForEntity});
		else if(linkedPropertyEntityType === 'accounts')
			sandbox.ajax.request({method : "POST", url: "/getReqAccounts", endpoint: "/getReqAccounts", data : map, callBack: getOtherInfoForEntity});
		else
			sandbox.ajax.request({method : "POST", url: "/getRelatedPeopleForCompany", endpoint: "/getRelatedPeopleForCompany", data : {'contact' : listOfLinkedPropertyIdsToBeFetched.slice(0,10), 
								'contactID' : entityObj.id, 'linkedEntity' : map['linkedEntity']}, callBack: getOtherInfoForEntity});
		
		//sandbox.alert.message({text : "Loading..."});
	},
	
	addEntities = function(data){
		
		var linkedPropertyResultObj = data.data, propertyMap = {}, listOfData = [],
			linkedEntityID = linkedPropertyResultObj['linkedEntity']['ID'],
			linkedEntityType = linkedPropertyResultObj['linkedEntity']['type'],
			linkedPropertyEntityType = linkedPropertyResultObj['linkedEntity']['linkedPropertyEntityType'],  // 'deals','accounts' or 'contacts'
			listOfPropertyObjects = linkedPropertyResultObj[linkedPropertyEntityType],
			propertyObjectsInCache = sandbox.cache.get(linkedPropertyEntityType),
			templateContents = null, emptyTemplate = null;
			
		if(sandbox.url.entityID() !== linkedEntityID)
			return;
		
		switch(linkedPropertyEntityType) {
			case "deals":
				emptyTemplate = dscrm.templates.deals.emptyDealListForEntity({});
				break;
			case "accounts":
				emptyTemplate = dscrm.templates.accounts.emptyAccountsListForEntity({});
				break;
			case "contacts":
				emptyTemplate = dscrm.templates.contacts.emptyPeopleListForEntity({});
			default :
				break;
		}
		
		if(!sandbox.util.isEmptyObject(listOfPropertyObjects)) {
			sandbox.dom.each(listOfPropertyObjects, function(index, value){
				
				if(value.status != 'open' && linkedPropertyEntityType != 'contacts')
					return true;
				
				propertyMap[value.id] = (linkedPropertyEntityType != 'contacts') ? value.name : 
										sandbox.util.getPersonName(value['firstName'], value['lastName']);
				propertyObjectsInCache[value.id] = value;
			});
		}
		
		if(sandbox.util.isEmptyObject(propertyMap) && sandbox.dom("#"+linkedEntityType + linkedPropertyEntityType +" ul.related-to-" + linkedPropertyEntityType + "-list li").length == 0) {
			sandbox.dom("#"+linkedEntityType + linkedPropertyEntityType +" ul.related-to-" + linkedPropertyEntityType + "-list").append(emptyTemplate);
			return;
		}
		else {
			listOfData = [];
			sandbox.dom.each(propertyMap,function(key,value){
				listOfData.push({'id':key, 'name': value});
			});

			
			switch(linkedPropertyEntityType) {
				case "deals":
					templateContents = dscrm.templates.deals.dealListForEntity({listOfData : listOfData});
					break;
				case "accounts":
					templateContents = dscrm.templates.accounts.relatedAccountsListForEntity({listOfData : listOfData});
					break;
				case "contacts":
					templateContents = dscrm.templates.contacts.relatedPeopleListForEntity({listOfData : listOfData});
				default :
					break;
			}
			
			sandbox.dom("#"+linkedEntityType + linkedPropertyEntityType +" ul.related-to-" + linkedPropertyEntityType + "-list").append(templateContents);
		}
		
		intializeEventHandlersCol3();
		
		//For updating linkedContacts in contact actions module
		if(linkedEntityType == 'company' && linkedPropertyEntityType == "contacts")
			sandbox.publish("bind-events-for-contact-actions", { entityType : "contact", entityID : linkedEntityID , linkedContacts : sandbox.cache.get('contacts')[linkedEntityID]['linkedContacts']});
		
		if(linkedPropertyEntityType == 'contacts' && linkedPropertyResultObj.hasOwnProperty("success") && !sandbox.util.isEmptyObject(listOfPropertyObjects))
			getOtherInfoForEntity({type :"company", obj : propertyObjectsInCache[linkedEntityID], linkedProperty : "linkedContacts"});
			
	},
	
	intializeEventHandlersCol3 = function() {
		
		sandbox.dom(_removeExistingDealEl).off('click').on("click", function(e) {
			sandbox.publish("remove-existing-deal", e);
		});
		
		sandbox.dom(_removeExistingContactEl).off('click').on("click", dissociatePersonFromCompany);
	},
	
	dissociatePersonFromCompany = function(event) {
		
		var contactID = sandbox.dom(event.target).parent().parent().attr("data-id"),
			url = null, urlMethod = null,
			data = {}, linkContacts = {}, 
			contactObjForUpdate = {}, linkedContacts = [],
			companyID = sandbox.url.entityID();

				
		linkedContacts = sandbox.dom.extend([], sandbox.cache.get("contacts")[companyID]['linkedContacts']);
		
		linkedContacts.splice(linkedContacts.indexOf(contactID),1);
		
		linkContacts['linkContacts'] = linkedContacts;
		contactObjForUpdate['linkedContacts'] = linkContacts;
				
		data['contactID'] = companyID;
		data['contact'] = contactObjForUpdate;
		data['inputId'] = "linkedContacts";

		sandbox.ajax.request({method : "POST", url: "/updateCompany_v2", endpoint: "/updateCompany_v2", data : data, callBack: dissociatePersonFromCompanyCallBack});
		sandbox.alert.message({text:"Removing Contact"});			
	},
	
	dissociatePersonFromCompanyCallBack = function(response) {
		
		if(!response.success) {
			sandbox.alert.message({text:"Server Error, Please refresh."});
			return;
		}
		
		var arrayOfContacts = response.contacts,
			contactObj = {},
			mapOfContactsInCache = sandbox.cache.get("contacts");

		if(!sandbox.util.isEmptyObject(arrayOfContacts)) {
			
			sandbox.dom.each(arrayOfContacts, function(index, contact) {			
				mapOfContactsInCache[contact.id] = contact;
				contactObj = contact;
			});
			
			sandbox.cache.update({"contacts" : mapOfContactsInCache});
		}						
		
		sandbox.publish("contact-otherinfo-fetched", {obj: mapOfContactsInCache[response.contactID]});
		
		sandbox.publish("bind-events-for-contact-actions", { entityType : "contact", entityID : response.contactID , linkedContacts : contactObj.linkedContacts});
		sandbox.alert.message({text:"Contact Removed.", type :"success", time : 3000});	
	},
	
	updateDealListingInContactsTab = function(data) {
		
		var dealObj = data.deal,
			linkedDealsForContact = [],
			contactID = sandbox.url.entityID(),
			mapOfContactsInCache = sandbox.cache.get("contacts");
		
		if(sandbox.dom.isEmptyObject(mapOfContactsInCache[contactID]['linkedDeals']))
			mapOfContactsInCache[contactID]['linkedDeals'] = [];
		
		mapOfContactsInCache[contactID]['linkedDeals'].push(dealObj.id);
		sandbox.cache.update({"contacts" : mapOfContactsInCache});
		
		sandbox.publish("contact-otherinfo-fetched", {obj: mapOfContactsInCache[contactID]});
	},
	
	enableContactsTab = function() {
    	sandbox.dom("main").children().removeClass("active in");
		sandbox.dom("#contacts").addClass("active");
        setTimeout(function(){ sandbox.dom("#contacts").addClass("in"); }, 100);
        intializeEventHandlersCol1();
    },
    
    intializeEventHandlersCol1 = function() {
	        
    		// Changing from Person - Company vice versa
	        sandbox.dom(customersListNavEl).off().on("click","li", function() {
	        	sandbox.dom(customersListNavEl).children().removeClass("active");
	    		sandbox.dom(this).addClass("active");
	    		showContactsNavView(sandbox.dom(this).attr('id'));
	        });
	        
	        // Check/uncheck all contacts from list
	        sandbox.dom(checkboxDropdownEl).off().on("click","input", function(e) {
	        	e.stopPropagation();
	        	sandbox.dom(customerListContainerEl).children().find("input[type='checkbox']").prop('checked', this.checked);
	        });
	        
	        // Delete All people/companies contacts
	        sandbox.dom(checkboxDropdownEl).find("#deleteAllContacts").off().on("click",function() {
	        	
	        	var accountSettings = JSON.parse(sandbox.cache.get("accountSettings")["featuresAvailabilityStatus"]),
			    	featureAvailabiltyForAccount = accountSettings["deleteContacts"],
	        		isSkilledAdmin = sandbox.cache.get("adminUser");

	        	if(!isSkilledAdmin){
	        		sandbox.alert.dialog({text:"This feature enabled only for Administrators of your account.", type:"ok"});
	    			return;
	    		}
				else if(!featureAvailabiltyForAccount){
					sandbox.alert.dialog({text:"This feature is disabled for your account.", type:"ok"});
					return;
				}
			                 
				sandbox.alert.dialog({text:"Are you sure you want to delete ALL People and Company contacts? If you press Ok, All information associated with ALL contacts will be permanently deleted. There is no undo.", type:"ok/c", confirm:deleteAllContacts , data:{}});
	        	
	        });

	        // Clicking on person/company list item
	        sandbox.dom(customerListContainerEl).off().on("click", "li:not(#fetchMore)", function(e) {
	        	
	        	if(e.target.tagName.toLowerCase() == "code")
	        		return;
	        	
	        	sandbox.dom(customerListContainerEl).children().removeClass("active").find("input[type='checkbox']").prop('checked', false);
	        	sandbox.dom(this).addClass("active").find("input[type='checkbox']").prop('checked', true);
	        	sandbox.dom(customerListContainerEl).find("li.active input[type=checkbox]").trigger("change");
	        	sandbox.dom(contactsTabCol2El).find(".con_content").removeClass("hide");
	        		        	
	        	if( sandbox.dom(this).attr("id") === "li_new_customer") {
	        			        		
	        		var category = sandbox.dom(customersListNavEl).find("li.active").attr("data-category");
		        	sandbox.dom(contactsTabCol2El).find(".con_content").addClass("hide");
	        		window.location.hash = '#contact/new';
	        		sandbox.publish("show-create-contact-template", {category : category});
	        		
	        	} else
	        		window.location.hash = '#contact/'+(sandbox.dom(this).attr('id')).split('_')[1];
	        		
//	        	if(sandbox.url.entityID() != 'new') {
//	        		
//	        		window.location.hash = '#contact/'+(sandbox.dom(this).attr('id')).split('_')[1];	        		
//	        	} else if( sandbox.dom(this).attr("id") === "li_new_customer") {
//
//	        		var category = sandbox.dom(customersListNavEl).find("li.active").attr("data-category");
//	        		console.info("category : " + category);
//	        		
//	        		window.location.hash = '#contact/new';
//	        		sandbox.publish("show-create-contact-template", {category : category});
//	        	} else {
//	        		
//	        		window.location.hash = '#contact/'+(sandbox.dom(customerListContainerEl+" li:nth-child(2)").attr('id')).split('_')[1];	        			        		
//	        	}	        		
	        	
	        	if(sandbox.dom(customerListContainerEl).find("#li_new_customer").is('.show:not(.active)'))
	        		sandbox.dom(customerListContainerEl).find("#li_new_customer").removeClass("show").addClass("hide");
	        	
	        }).on('click',"input[type='checkbox']",function(e) {
	        	sandbox.dom(customerListContainerEl).children().removeClass("active");
	            e.stopPropagation();
	        }).on('click',"#fetchMore",function(e) {
	        	var categoryObj = _contactCategoryVariables[getContactCategoryKey(_currentContactsTabNavView)];
	        	getAllPersonOrCompany(categoryObj['cursor']);
	            e.stopPropagation();
	        });

	        // Fetch more contacts - Infinite scroll
	        sandbox.dom(customerListContainerEl).scroll(function() {
	    	    if( (sandbox.dom(this).scrollTop() + sandbox.dom(this).innerHeight() >= sandbox.dom(this)[0].scrollHeight) &&
	    	    		!!_currentContactsTabNavView)
	    	    	showContactsNavView(_currentContactsTabNavView);
	    	});
	        
	        // Show New Person/Company li
	        sandbox.dom("#idAddNewPerson, #idAddNewCompany").off().on("click", function() {
	        	

	        	var type = sandbox.dom(this).attr('id');

	        	sandbox.dom(customerListContainerEl).find("#li_new_customer").remove();
	        //	sandbox.dom(customerListContainerEl).prepend(dscrm.templates.contacts.newContact());
	        	
	        	if(type == "idAddNewPerson")
	        	{
//	        		_currentContactsTabNavView = "person";
//	        		_category = "person";
        			_isNewContactRowNeeded = true;

	        		if(!sandbox.dom("#show-person-list").hasClass('active')){
	        			sandbox.dom("#show-person-list").trigger('click');
	        		}
	        		else{
	        			_isNewContactRowNeeded = false;
	        	        sandbox.dom(customerListContainerEl).prepend(dscrm.templates.contacts.newContact());
	        	        sandbox.dom(customerListContainerEl).find("#li_new_customer").trigger('click');
	        		}
	        	}
	        		
	        	else if(type == "idAddNewCompany")
	        	{
        			_isNewContactRowNeeded = true;
	        		
	        		if(!sandbox.dom("#show-company-list").hasClass('active')){
	        			sandbox.dom("#show-company-list").trigger("click");
	        		}
	        		else{
	        			_isNewContactRowNeeded = false;
	        	        sandbox.dom(customerListContainerEl).prepend(dscrm.templates.contacts.newContact());
	        	        sandbox.dom(customerListContainerEl).find("#li_new_customer").trigger('click');
	        		}

	        	}
	        	sandbox.dom(contactsTabCol2El).find(".con_content").addClass("hide");	        	
	        	sandbox.dom("#contact-add-list").addClass('hide');
	        	
	        });
	        
	        // Cancel New Contact
	        sandbox.dom(customerListContainerEl).on("click","#li_new_customer .cancelNewContact", function(event) {
	        	
	        	event.stopPropagation();
	        	_isNewContactRowNeeded = false;
	        	sandbox.dom("#contact-add-list").removeClass("hide");
	        	sandbox.dom(customerListContainerEl).find("#li_new_customer").remove();
	        	
	        	if(sandbox.dom(customerListContainerEl).find('li').length > 0)
	        		sandbox.dom(customerListContainerEl).find('li:eq(0)').trigger('click');
	        	else{
	        		sandbox.dom(_contactsTabContactInfoEl).empty();
	        		window.location.hash = "#contacts"
	        	}
	        });
	        
//	        sandbox.dom(_contactsTabContactInfoEl).on("click", "input.dropdown-input", function(e){
//				var ul = sandbox.dom(e.target).next("ul.dropdown-menu");
//				if(ul.children().length > 0)
//					ul.addClass("show");
//			});
//			
//	        sandbox.dom(_contactsTabContactInfoEl).on("click", "ul.dropdown-menu li", function(e){
//				var value;
//				if(e.target.tagName == "A")
//					value = e.target.innerHTML;
//				else
//					value = sandbox.dom(e.target).children[0].innerHTML;
//				sandbox.dom(e.target).parents("ul").prev("input.dropdown-input").val(value);
//				sandbox.dom(e.target).parents("ul").removeClass("show");
//			});
	        
	        sandbox.dom(checkboxDropdownEl).on("change", "span.delete-all input[type=checkbox]",function(e){
	        	if(!e.target.checked)
	        		sandbox.dom(_deleteSelectedContactsEl).removeClass("show").addClass("hide");
	        	else
	        		sandbox.dom(_deleteSelectedContactsEl).removeClass("hide").addClass("show");
	        });
	        
	        sandbox.dom(customerListContainerEl).on("change", "li input[type=checkbox]",function(){
	        	
	        	var selectedContactsEl = sandbox.dom(customerListContainerEl).find('li input[type=checkbox]:checked');
	        	var flag = false;
	        	
        		sandbox.dom.each(selectedContactsEl, function(index, selectedEl) {
	        		
        			if(sandbox.dom(selectedEl).prop('checked')) {
        				flag = true;
        				return false;
        			}
	        	});
        		
        		if(flag)
        			sandbox.dom(_deleteSelectedContactsEl).removeClass("hide").addClass("show");
            	else
            		sandbox.dom(_deleteSelectedContactsEl).removeClass("show").addClass("hide");
	        });
	        
	     // Delete Selected people/companies contacts
	        sandbox.dom(checkboxDropdownEl).find(_deleteSelectedContactsEl).off().on("click",function() {
	        	
	        	var accountSettings = JSON.parse(sandbox.cache.get("accountSettings")["featuresAvailabilityStatus"]),
			    	featureAvailabiltyForAccount = accountSettings["deleteContacts"],
	        		isSkilledAdmin = sandbox.cache.get("adminUser");

	        	if(!isSkilledAdmin){
	        		sandbox.alert.dialog({text:"This feature enabled only for Administrators of your account.", type:"ok"});
	    			return;
	    		}
				else if(!featureAvailabiltyForAccount){
					sandbox.alert.dialog({text:"This feature is disabled for your account.", type:"ok"});
					return;
				}
			    
	        	var selectedContactsEl = sandbox.dom(customerListContainerEl).find('li input[type=checkbox]:checked');
	        	var noOfSelectedContacts = selectedContactsEl.length;
	        	var contactIDArray = [], data = {};
	        	
	        	if(noOfSelectedContacts < 1)
	        		return;
	        	
	        	sandbox.dom.each(selectedContactsEl, function(index, selectedEl) {
	        		contactIDArray.push(sandbox.dom(selectedEl).parent().attr('id').split('_')[1]);
				});
	        	
	        	data['type'] = _currentContactsTabNavView;
	        	data['idList'] = contactIDArray;
	        	data['idListSize'] = noOfSelectedContacts;
	        	
				sandbox.alert.dialog({text:"Are you sure you want delete these " +noOfSelectedContacts+" contacts? All contact information associated with these contacts will be permanently deleted. There is no undo.", type:"ok/c", confirm:deleteSelectedContacts , data:data});
	        	
	        });
	        
    },
    
    updateCache = function(contact) {
    	
    	if(sandbox.util.isEmptyObject(contact))
    		return;
    	
    	var mapOfContactsInCache = sandbox.cache.get("contacts");
    	mapOfContactsInCache[contact.id] = contact;
    	sandbox.cache.update({"contacts" : mapOfContactsInCache});    	
    },
    
    updateCreatedContactInCacheAndListing = function(data) {
    	
    	if(sandbox.util.isEmptyObject(data))
    		return;
    	
    	var contactID = data.contactID;
    	var contact = sandbox.cache.get("contacts")[contactID];
    	var category = contact.category;
    	
    	_keyCodeForContactNameInput = data.keyCodeForContactNameInput;
    	
    	if(_isContactsListingEmpty){
    		_isContactsListingEmpty = false;
    		hideOrShowBtnsAndSection();
    	}
    	
    	//updateCache(contact);
    	
    	if(_contactCategoryVariables[category]['isPreLoaded']) {
    		
    		var arrayOfContactID = _contactCategoryVariables[category]['listOfID'];
        	
        	if(sandbox.util.isEmptyObject(arrayOfContactID)) {
        		arrayOfContactID = []; arrayOfContactID.push(contact.id); 
        	} else {
        		arrayOfContactID.unshift(contact.id);
        	}        		
        	_contactCategoryVariables[category]['listOfID'] = arrayOfContactID;
    	}   
    	
    	
    	
    	if(_currentContactsTabNavView === category) {
    		
    		var categoryObj = _contactCategoryVariables[category];
    		var arrayOfContactID = categoryObj['listOfID'];
        	
    		sandbox.dom(customerListContainerEl).empty();
    		
    		if(!sandbox.util.isEmptyObject(arrayOfContactID)) {
    			_isNewlyCreatedContact = true;
    			if(arrayOfContactID.indexOf(contactID) == -1)
    				categoryObj['listOfID'].push(contactID);
    			showContactListing(categoryObj['listOfID'], categoryObj['cursor'], category, contactID);
    		}
    		else
    			sandbox.publish("hash-changed",{ entityID : contact.id , entity : "contact" });
    		
    	}    	
    }, 
    
    deleteAllContacts = function(){
    	
    	var params= '&limit=20&nextCursor=',
    		departmentID = sandbox.cache.get("selectedDepartmentID");
    	
    	if(!!departmentID)
    		params = params + '&departmentID=' + departmentID;
    	
    	sandbox.ajax.requestForFORMData({method:"POST", url:'/deleteAllPeopleAndCompaniesForContact_v2', endpoint:"/deleteAllPeopleAndCompaniesForContact_v2", data:params, respType:"json", callBack:deleteAllContactsCallback});
    	
    },
    
    deleteAllContactsCallback = function(response) {
    	
    	if( sandbox.util.isEmptyObject(response)) {
    		sandbox.alert.message({text : 'Server Error , Please refresh...'});
    		return;
    	}
    	else if( !response.isNoContactsPresent )
    		sandbox.alert.dialog({text:"Please wait while we delete all your contacts. This will take a few minutes. We will send you an email once the deletion is fully completed.", type:"ok"});
    },
    
    showUpdatedContactName = function(data) {
    	
    	if(sandbox.util.isEmptyObject(data))
    		return;
    	
    	var contactID = data.id;
    	var contact = sandbox.cache.get("contacts")[contactID];
    	var category = contact.category;
    	
    	if(_contactCategoryVariables[category]['isPreLoaded']) {
    		
    		var arrayOfContactID = _contactCategoryVariables[category]['listOfID'];
        	
    		if(arrayOfContactID.indexOf(contactID) !== -1) {
    			
    			var contactName = null;
    			if(category == "company"){    				
    				contactName = contact.fullName;					
    			} else{
    				contactName = sandbox.util.getPersonName(contact.firstName, contact.lastName);
    			}
    				
    			sandbox.util.pageTitle(contactName,"contact");
    			sandbox.dom(customerListContainerEl).find("li#contact_"+contactID).find(".conusername").html(contactName);
    		}        	
    	}
    	else
    	{
			if(category == "company"){    				
				contactName = contact.fullName;					
			} else{
				contactName = sandbox.util.getPersonName(contact.firstName, contact.lastName);
			}
			
			sandbox.util.pageTitle(contactName,"contact");
			sandbox.dom(customerListContainerEl).find("li#contact_"+contactID).find(".conusername").html(contactName);
    		
    	}
    },
    saveNotesForContact = function(notes){
    	
    	var oldNotes = '', contactObjFromCache;
    	
    	
    	notes = $.trim(notes);
    	notes = sandbox.util.linkify(notes);
    	
    	if(notes == '<br/>')
    		notes = '';
    	
    	var contactID = '', data = {};	
    	contactID = sandbox.url.entityID();
    	data = {};
    	data['contactID'] = contactID;
    	data['notes'] = notes;
    	
    	contactObjFromCache = sandbox.cache.get("contacts")[contactID];
    	
    	if(sandbox.util.isEmptyObject(contactObjFromCache) || contactObjFromCache.comments === notes)
    		return;
    	
    	sandbox.publish("createOrUpdate-note-analytics",{obj:contactObjFromCache,type:"Contact"});
    
    	sandbox.alert.message({text:"Saving Notes...", type :"success", time : 3000});

    	_activityLogForContactNote = pullActivityForNotes(data);
    	    	
    	notes = notes.replace(/id=/igm, "");
    	sandbox.ajax.request({url:"/updateCommentsForContact_v2", method:"POST", data:data, callBack : saveNotesForContactCallBack});
    },
    
    saveNotesForContactCallBack = function(resultObject)
    {

    	
    	if(sandbox.util.isEmptyObject(resultObject) || !resultObject.success)
    	{
    		sandbox.alert.message({text:"Note not saved", type :"warning", time : 4000});
    		return;
    	}
    	
    	var updatedContactObj =  resultObject.contact,
    	    contactID = resultObject.contactID;
    	    	
    	sandbox.cache.get("contacts")[contactID] = updatedContactObj[contactID];
    	    	
    	sandbox.publish("insert-activity-log",{entityType : "contact", entityID : contactID, historyComments :_activityLogForContactNote });
        
    	sandbox.alert.message({text:"Wohooo...! Notes Saved Successfully...", type : "success", time :4000});
    },
    
    pullActivityForNotes = function(data){

    	var activityLog = '', loggedInUserName = '';
    	var entityType = null;
    	
    	loggedInUserName = sandbox.cache.get("loggedInUserName");
    	
    	if(!loggedInUserName)
    		loggedInUserName = '';
    	
    	if(data.hasOwnProperty('notes') && !!data['notes']) {
    		activityLog = loggedInUserName+' Edited Notes :<br/>';
    		activityLog = activityLog+'<b style="color:#0084b0;">Notes :</b> '+data['notes']+'<br/>';
    	}
    	else if(!data['notes']) {
    		activityLog = loggedInUserName+' Emptied Notes ';
    	}
    	
    	entityType = sandbox.url.page();	
    	
    	if(!!entityType)
    		activityLog = activityLog+'<b style="color:#0084b0;">'+entityType.toUpperCase() +'ID:</b> '+sandbox.url.entityID()+'<br/>';
    	
    	return activityLog;
   
    },
    
    removeContactsInUIAndCacheInBothCategories = function(listOfContactIDs) {
    	
    	var	personList,
    		companyList,
    		personCategoryObj = _contactCategoryVariables['person'],
    		companyCategoryObj = _contactCategoryVariables['company'];
    		
    	if(sandbox.util.isEmptyObject(listOfContactIDs))
    		return;
    	
    	
    	sandbox.dom.each(listOfContactIDs, function(index, contactID) {
    		delete sandbox.cache.get("contacts")[contactID];
    	});
    	
    	
    	if(!sandbox.util.isEmptyObject(personCategoryObj) && !sandbox.util.isEmptyObject(personCategoryObj["listOfID"])){
    		
    		personList  = personCategoryObj["listOfID"];
    		
    		sandbox.dom.each(listOfContactIDs, function(index, contactID) {
        		
    			personList.splice( $.inArray( contactID , personList) , 1 );
        		sandbox.dom(customerListContainerEl).find("li#contact_"+contactID).remove();
        		
        	});
    		
    	}
    	
    	if(!sandbox.util.isEmptyObject(companyCategoryObj) && !sandbox.util.isEmptyObject(companyCategoryObj["listOfID"])){
    		
    		companyList = companyCategoryObj["listOfID"];
    		
    		sandbox.dom.each(listOfContactIDs, function(index, contactID) {
        		
        		companyList.splice( $.inArray( contactID , companyList) , 1 );
        		sandbox.dom(customerListContainerEl).find("li#contact_"+contactID).remove();
        		
        	});
    		
    		
    	}	
    	
    },
    
    removeContactsInUIAndCache = function(data) {
    	
    	var listOfContactID = data.listOfContactID, category = data.category, listOfContactIDFromCache;
    	var categoryObj = _contactCategoryVariables[category];
		
    	if(sandbox.util.isEmptyObject(categoryObj) || sandbox.util.isEmptyObject(categoryObj['listOfID']))
    		return;

    	listOfContactIDFromCache = categoryObj['listOfID'];
    	
    	sandbox.dom.each(listOfContactID, function(index,contactID) {
    		
    		delete sandbox.cache.get("contacts")[contactID];
    		listOfContactIDFromCache.splice( $.inArray( contactID , listOfContactIDFromCache) , 1 );
    		sandbox.dom(customerListContainerEl).find("li#contact_"+contactID).remove();
    		
    	});
		
    },
    
    deleteSelectedContacts = function(data) {
    	
    	var params = '?email='+sandbox.cache.get("loggedInUserEmail")+'&name='+sandbox.cache.get("loggedInUserName");
    	params = params + '&accountID='+sandbox.cache.get("accountID") + "&contactID="+sandbox.cache.get("loggedInUserID");
    	params = params + '&idList='+JSON.stringify(data['idList']) + '&totalListSize='+data['idListSize']+'&startIndex=0'+"&type="+data.type;
    	
    	var url = "/deleteSelectedContacts_v2" + params;
		sandbox.ajax.request({method:"POST", url: url, endpoint:"/deleteSelectedContacts_v2", data:{}, callBack: deleteSelectedContactsCallBack});
		
		sandbox.alert.message({text: "Please Wait..."});
    },
    
    deleteSelectedContactsCallBack = function(response) {
    	
    	if( !sandbox.util.isEmptyObject( response ) && response.taskadded )
    	{
    		var emptyObject = {};
    		sandbox.alert.dialog({text:"Please wait while we delete the selected contacts. We will send you an email when the process is completed.", type:"ok"});
    		return;
    	}
    	if( sandbox.util.isEmptyObject( response ) && !response.isContactsDeleted ) {
    		sandbox.alert.message({text : "Server Error , Plz refresh..."});
    		return;
    	}
    	
    	sandbox.alert.hideMessage();
    	
    	var contactIDList = response.contactIDList;
    	var type = response.type;
    	var totalListSize = response.totalListSize;
    	var mapOfDealFromCache = sandbox.cache.get('deals');
    	
    	if( response.hasOwnProperty('deal') && !sandbox.util.isEmptyObject(mapOfDealFromCache) ) {
    		
    		var mapOfDeal = response.deal;
    		sandbox.dom.each(mapOfDeal,function(key,value){
    			if( mapOfDealFromCache.hasOwnProperty(key) ) {
    				mapOfDealFromCache[key] = value;
    			}
    		});
    	}
    	
    	if( response.hasOwnProperty('task') && !sandbox.util.isEmptyObject(mapOfDealFromCache) ) {
    		var listOfTask = response.task;
    		sandbox.publish("delete-tasks-from-cache-dataTable", listOfTask);
    	}
    	
    	var linkedContactsInfo = response.linkedContactsInfo;
    	
    	sandbox.dom.each(linkedContactsInfo, function(contactID, linkedContacts){
    		
    		if(!sandbox.util.isEmptyObject(linkedContacts) ) {
    			
    			sandbox.dom.each(linkedContacts, function(index, linkedContactID){
    				
    				var linkedContactObj = sandbox.cache.get('contacts')[linkedContactID];
    				
    				if(!sandbox.util.isEmptyObject(linkedContactObj)) {
    					
    					var linkedContactsForObj = linkedContactObj['linkedContacts'];
    					
    					var i = linkedContactsForObj.indexOf(contactID);
    					linkedContactsForObj.splice(i,1);
    					
    					linkedContactObj['linkedContacts'] = linkedContactsForObj;
    					sandbox.cache.get("contacts")[linkedContactID] = linkedContactObj;
    				}
    			});
    		}
    	});
    	
    	sandbox.publish("remove-contacts-ui-cache", {listOfContactID:contactIDList, category:type});
    	
    	window.location.hash = "#contacts";
    };
    
	
	return {
		
		init : function() {
			
			_self = this;
			initializeCategoryVariables();
			
			sandbox.subscribe("display-contacts-info",_self.initTable);
			sandbox.subscribe("display-contact-info",loadContactInfo);
			sandbox.subscribe("new-deal-created-for-contact",updateDealListingInContactsTab);
			sandbox.subscribe("contact-otherinfo-fetched", function(data){
            	getOtherInfoForEntity({type :"contact", obj : data.obj, linkedProperty : "linkedDeals"});
            	getOtherInfoForEntity({type :"contact", obj : data.obj, linkedProperty : "linkedAccounts"});
            	getOtherInfoForEntity({type :"company", obj : data.obj, linkedProperty : "linkedContacts"});
			});
			
		
			
			
			sandbox.dom('#contactnotes .notes').summernote({
				focus : true,
				
				callbacks:{
					onBlur : function(e)
						{
							if(sandbox.dom(e.relatedTarget).parents('.note-toolbar').length == 0 )
								saveNotesForContact(e.target.innerHTML);
						}	
					},
					
	    	height: 200,  
	    	toolbar: [
	    	            ['style', ['bold', 'italic', 'underline','ul', 'ol']]
	    	          ]
	    });
			
			sandbox.subscribe("contact-created", updateCreatedContactInCacheAndListing);
			sandbox.subscribe("contact-updated", showUpdatedContactName);
			sandbox.subscribe("remove-contacts-ui-cache", removeContactsInUIAndCache);
			sandbox.subscribe("remove-contacts-from-all-category", removeContactsInUIAndCacheInBothCategories);
		},
		
		destroy : function() {
            sandbox.unsubscribe();
        },
		
		initTable : function() {
			
			sandbox.dom("#contact-add-list").removeClass('hide');
			
			enableContactsTab();
	        sandbox.util.pageTitle(null, "Contacts");
	        
	        var currentSelectedCategoryID = sandbox.dom(customersListNavEl).children(".active").attr("id");
			var currentSelectedCategoryKey = (!currentSelectedCategoryID || currentSelectedCategoryID == "show-person-list") ? "person" : "company";
			var otherCategoryKey = (currentSelectedCategoryID == "person") ? "company" : "person";
					
        	switchContactsTabNavView(currentSelectedCategoryKey, otherCategoryKey);
        	showTabContent(currentSelectedCategoryKey);
	        
	        //sandbox.dom(customerListContainerEl+" li:nth-child(2)").trigger('click'); // 1st child is New Contact li.
		}
	};
});

DSCRM.Core.registerModule("contact-operations", [], function(sandbox) {
	
	var _self = null,
	
	deleteTasksForContactInCache = function(listOfTaskIDs, contactID) {
		
		var contactObj = {}, linkedTasks = [],
			mapOfcontacts = sandbox.cache.get("contacts");
		
		if(sandbox.util.isEmptyObject(listOfTaskIDs) || !contactID || sandbox.util.isEmptyObject(mapOfcontacts) ||
				!mapOfcontacts.hasOwnProperty(contactID))
			return;

		contactObj = mapOfcontacts[contactID];
		
		if( !sandbox.util.isEmptyObject( contactObj ) ) {
			
			linkedTasks = contactObj['linkedTasks'];
			
			if( !$.isEmptyObject( linkedTasks ) ) {
				sandbox.dom.each(listOfTaskIDs, function(index, taskID) {
					if(linkedTasks.indexOf(taskID) > -1) {
						linkedTasks.splice( linkedTasks.indexOf(taskID), 1 );
					}
				});
				contactObj['linkedTasks'] = linkedTasks;
			}
		}
	};
	
	return {
		
		init : function() {
			
			_self = this;
			sandbox.subscribe("delete-tasks-in-contacts-cache",function(data) {
				deleteTasksForContactInCache(data.listOfTaskIDs, data.contactID);
			});
			
			sandbox.dom("#contact-add-list .callToActionBtn").on("mouseover",function(){
				// sandbox.dom("#contact-add-list .ctaTemList").show();
			});
			
			sandbox.dom("#contact-add-list").mouseleave(function(){
				
				// sandbox.dom("#contact-add-list .ctaTemList").hide();
				
			});
		},
		
		destroy : function() {
			sandbox.unsubscribe();
		}
	};
});

DSCRM.Core.registerModule("getUrlForUploadPhoto", [], function(sandbox) {
	
	var _self = null,
	
	validateDocumentSize = function(maxSize, files) {
		
		if(files.length){
		    var fileSize = files[0].size;
		    
		    if(fileSize>maxSize){
				sandbox.alert.message({text:"Oops! Maximum file size is "+maxSize/1000000+" MB only", time : 3000});
		        return false;
		    }
		    else if(fileSize < 1){
		    	sandbox.alert.message({text : "Oops! Your file is zero bytes in size!", time: 3000});
		        return false;
		    }
		    else
		    	return true;
		    
		}else{
			sandbox.alert.message({text:"Please choose a file",time: 3000});
		    return false;
		}
	},
	
	validateAndCreateUploadUrlForPicture = function(data) {
		
		var formName = data.formName;
		var files = data.files;
		var filePath = data.filePath;
		var maxSize = 5000000;
		
		if(!validateDocumentSize(maxSize, files))
			return false;
		
		var fileExtension = filePath.substr(filePath.length - 5, filePath.length);
			fileExtension = fileExtension.toLowerCase();
			
		if(fileExtension.indexOf('.jpg') == -1 && fileExtension.indexOf('.jpeg') == -1 &&  fileExtension.indexOf('.png') == -1) {
			sandbox.alert.message( { text : "Oops! Only JPEG and PNG images are allowed", time : 4000});
			return false;
		}
		
		var url = "/createUploadUrlForNewPicture?form=" + formName;
		sandbox.alert.message({text : "Uploading..."});
		
		sandbox.ajax.request({method : "GET", url: url, endpoint:"/createUploadUrlForNewPicture", data : null, callBack: validateAndCreateUploadUrlForPictureCallBack});				
	},
	
	validateAndCreateUploadUrlForPictureCallBack = function(response) {
		
		if(sandbox.util.isEmptyObject(response) || !response.success) {
			sandbox.alert.message({ text : 'Server Error , Please refresh...'});
			return;
		}
		
		if(!!response.error){
			sandbox.alert.message({ text : response.error });
			return;
		}
		
		var action = response.action,
			formName = response.formName;
		
		sandbox.dom("#"+formName).attr('action', action);
		sandbox.dom("#"+formName).submit();
	};
	
	return {
		
		init : function() {
			
			_self = this;
			sandbox.subscribe("get-url-for-upload-pic-and-submit-form", _self.validateAndCreateUploadUrlForPicture)
		},
		
		destroy : function() {
			sandbox.unsubscribe();
		},
		
		validateAndCreateUploadUrlForPicture : function(data) {
			validateAndCreateUploadUrlForPicture(data);
		}
	};
});


DSCRM.Core.registerModule("uploadPhotoForContact", ["url" , "alert" , "util"  , "ajax" ,"cache"], function(sandbox) {
	
	var _self = null,
		_entityType = null,
		_entityID = null,
		_contactID = null,
		_uploadFor = null,
		_photoUploadPopUpEl = null,
		_uploadPhotoFormID = null,
		_iFrameEl = null,
		_photoCroppedCoordinatesObj = null,
		_fileSelectInputTagEl = null,
		_imageEl = null,
		_formEl = null,
		_saveBtnEl = null,
		_cancelBtnEl = null,
		_removeBtnEl = null,
		_closeBtnEl = null,
		_jcropAPI = null,
		
	triggerFileUpload = function(data) {
		
		_contactID = null; _uploadFor = null;
		
		if(sandbox.util.isEmptyObject(data))
			return;
		
		_entityType = data.entityType;
		_entityID = data.entityID;
		_contactID = data.contactID;
		_uploadFor = data.type;
		_fileSelectInputTagEl.trigger('click');
	},
	
	validateNewIFrameLoaded = function() {
		
		var responseText = _iFrameEl.contents().find("body pre").html(),
			resultObject;
	
		 if(!responseText)
			 return false;
		
		 try{
			 resultObject = JSON.parse(responseText);
		 } catch(e){
			return false; 
		 }
		 
		 if(sandbox.util.isEmptyObject(resultObject) || !resultObject.success) {
			 sandbox.alert.message({ text : 'Server Error , Please refresh...' });
			return false;
		 }
		 
		 if(!!resultObject.error) {

			_fileSelectInputTagEl.val("").trigger("change");
			if(!resultObject.errorType)
				sandbox.alert.message({ text : resultObject.error, time : 4000 });
			else if(resultObject.errorType == "tooSmall")
				sandbox.alert.message({ text : "The image is too small. Please upload a bigger image.", time : 4000 });
			return false;
		 }
		 
		 if( _uploadFor == "contact_picture" && ( _entityID != sandbox.url.entityID())){
			 removeTempUploadedPicture();
			 sandbox.alert.message({ text : "The image upload operation was cancelled.", type: "warning" , time : 3000 });
			 return false;
		 }
			 
			 
		 return resultObject;
	},
	
	deleteBlobs  = function(blobKeys) {
		
		if(sandbox.util.isEmptyObject(blobKeys))
			return;
		
		sandbox.ajax.request({method : "POST", url: "/deleteBlobs", endpoint:"/deleteBlobs", data : blobKeys, callBack: deleteBlobsCallBack});
	},
	
	deleteBlobsCallBack = function(response) {},
	
	removeTempUploadedPicture = function() {
		
		var blobKey =  _formEl.find("#blobKey_newPhoto").val();
		
		//Clearing input so that uploading same image will make sure trigger('change') event works properly
		_fileSelectInputTagEl.val('');
		
		if(!!blobKey) 
			deleteBlobs([blobKey]);
		
		_formEl.find("#blobKey_newPhoto").val('');		
		_imageEl.attr('src', '');
		_iFrameEl.contents().find("body pre").html('');		
		_imageEl.removeAttr('style');
		
		var jcrop_api = _imageEl.data('Jcrop');
		if(!sandbox.util.isEmptyObject(jcrop_api))
			jcrop_api.destroy();
		
		_removeBtnEl.removeClass("hide").addClass("hide");
		_formEl.removeClass("hide");
		_saveBtnEl.removeClass("hide").addClass("hide");
	},
	
	setCroppedPhotoCoordinates = function(c) {

		_photoCroppedCoordinatesObj.x1 = c.x;
		_photoCroppedCoordinatesObj.y1 = c.y;
		_photoCroppedCoordinatesObj.x2 = c.x2;
		_photoCroppedCoordinatesObj.y2 = c.y2;
		_photoCroppedCoordinatesObj.w= c.w;
		_photoCroppedCoordinatesObj.h = c.h;
	},
	
	fnToCheckLoadedImageAndEnableCropping =  function() {
		
		var resultObject = validateNewIFrameLoaded();
		if(!resultObject || sandbox.util.isEmptyObject(resultObject))
			return;
		 
		var imageURL = resultObject.imageURL,
			blobKey = resultObject.blobKey,
			W, H, x, y, w, h;
		 
		_imageEl.attr("src", imageURL);
			 
		var newImage = new Image();
		newImage.src = imageURL;
		
		newImage.onload = function(){
		 
			var height = newImage.naturalHeight,
				width = newImage.naturalWidth,
				smallerParam = _imageEl.width() < _imageEl.height()? _imageEl.width() : _imageEl.height();

			 /*console.info("height: "+height+" width: "+width);
			 console.info("newImage   height: "+newImage.height+" width: "+newImage.width);
			 console.info("_imageEl   height: "+_imageEl.height()+" width: "+_imageEl.width());*/
			if(height < 50 || width < 50) {
			 
				 sandbox.alert.message({ text : "The image is too small. Please upload a bigger image.", time : 6000 });
				 removeTempUploadedPicture();
				 return;
			}
			
			//timeout because sometimes _jcropAPI doesnt get assigned on time
			setTimeout(function(){
				if(smallerParam <= 100)
					_jcropAPI.setSelect([0,0, 50, 50]);
				else{
					
						W = _imageEl.width(); 
						H = _imageEl.height(); 
						w = 100; 
						h = 100;
						x = W/2 - w/2; 
						y = H/2 - h/2;
						
					_jcropAPI.setSelect([x,y,x+w, y+h]);
				}
			}, 100);
		};
		 
		 _formEl.append('<input name="blobKey" id="blobKey_newPhoto" type="hidden">');
		 _formEl.find("#blobKey_newPhoto").val(blobKey);
		 _formEl.removeClass("hide").addClass("hide");
		 
		 //$("#upload_photo_btn").css('display', 'none');
		 //_saveBtnEl.removeClass("show, hide").addClass("show");
		 //_removeBtnEl.removeClass("show, hide").addClass("show");
		 
		 //$(".divNewPhotoForm").val('').css('display','none');

		 _iFrameEl.contents().find("body pre").html('');

		 _photoCroppedCoordinatesObj = { 'x1': '', 'x2': '', 'y1': '', 'y2': '', 'h': '', 'w': '' };
		 
		 _imageEl.Jcrop({
			 onRelease	: setCroppedPhotoCoordinates,
			 onSelect	: setCroppedPhotoCoordinates,
			 bgColor		: 'black',
			 minSize		: [ 30, 30 ],
			 //maxSize		: [ 250, 250 ],
			 // setSelect	: [ 100, 100, 50, 50 ],
			 // set Select should be changed dynamic to each image, instead of value given below use width and height of image.
			 //setSelect : [ 340, 300, 160, 150 ],
			 setSelect : [ 0, 0, 50, 50 ],
			 allowSelect: false,
		     aspectRatio : 1
		}, function(){
			_jcropAPI = this;
		});

		 sandbox.alert.hideMessage();
		_saveBtnEl.removeClass("hide");
		_removeBtnEl.removeClass("hide");		 
		_photoUploadPopUpEl.modal("show");
	},
	
	fnForCancelEvent = function() {
		removeTempUploadedPicture();
		_photoUploadPopUpEl.modal("hide");
	},
	
	saveCroppedImageForContact = function() {
		
		var data = {};
		data.blobKey = _formEl.find("#blobKey_newPhoto").val();
		data.contactID = _contactID;
		data.croppedTop = _photoCroppedCoordinatesObj.y1;
		data.croppedLeft = _photoCroppedCoordinatesObj.x1;
		data.croppedRight = _photoCroppedCoordinatesObj.x2;
		data.croppedBottom = _photoCroppedCoordinatesObj.y2;
		data.divHeight = _photoCroppedCoordinatesObj.h;
		data.divWidth = _photoCroppedCoordinatesObj.w;
		data.resizedHeight = _imageEl.height();
		data.resizedWidth = _imageEl.width();
		
		sandbox.alert.message({text : "Saving...",type : "success"});
		
		switch(_entityType) {
			case "deal": case "account": case "task": case "contact":
				data.departmentID = sandbox.cache.get("selectedDepartmentID");;
				sandbox.ajax.request({method : "POST", url: "/uploadContactPicture", endpoint:"/uploadContactPicture", data : data, callBack: saveCroppedImageForContactCallBack});
				break;
			case "user-contact":
				sandbox.ajax.request({method : "POST", url: "/uploadProfilePicture", endpoint:"/uploadProfilePicture", data : data, callBack: saveCroppedImageForContactCallBack});
				break;
			default:
				break;
		}
	},
	
	saveCroppedImageForContactCallBack = function(response) {
		
		if(sandbox.util.isEmptyObject(response) || !response.success) {
			
			if(!sandbox.util.isEmptyObject(response.error)){
				sandbox.alert.message({text : response.error, time : 3000});
			} else{
				sandbox.alert.message({text : 'Server Error , Please refresh...'});
			}
			return;
		}
		
		sandbox.alert.hideMessage();
		_closeBtnEl.trigger("click");
		
		var photoID = response.photoID;
		
		if(_entityType == "user-contact") {
			sandbox.publish("settings-tab-photo-uploaded", {contactID : _contactID, photoID: photoID});
			return;
		}
		
		var mapOfContactInfo = sandbox.cache.get("contacts")[_contactID];
		
		try{
			
			mapOfContactInfo.photoID = photoID;			
			
			//sandbox.dom("div[data-id="+ _contactID +"]").find("img").attr('src',photoID);
			var linkedContacts = null;
			
			switch(_entityType) {
				case "deal" :
					linkedContacts =  sandbox.cache.get("deals")[_entityID].linkedContacts;	
					break;
				case "account" :
					linkedContacts =  sandbox.cache.get("accounts")[_entityID].linkedContacts;
					break;
				case "task" :
					linkedContacts =  sandbox.cache.get("tasks")[_entityID].linkedContacts;
					break;
				case "contact" :
					sandbox.publish("contact-tab-photo-uploaded", {contactID : _contactID});
				default :
					break;
			}
			
			if(!sandbox.util.isEmptyObject(linkedContacts))
				sandbox.publish("display-involved-contacts", { entityType : _entityType , entityID : _entityID, linkedContacts : linkedContacts});
			
		} catch(e){
			e.moduleName = sandbox.moduleName;
			e.methodName = arguments.callee.toString();
			sandbox.publish("send-scripterror-email", e);
		}
		
		sandbox.publish("update-analytics", { category : "Create", action : 'Contact Picture', label : sandbox.cache.get("loggedInUserEmail") + "-" + sandbox.cache.get("accountID") });
	};
	
	return {
		
		init : function() {
			
			var _self = this;
			
			_uploadPhotoFormID = "newPhotoForm";
			_photoUploadPopUpEl = sandbox.dom("#photo-upload-popup");	
			_cancelBtnEl = _photoUploadPopUpEl.find("[data-btntype='cancel']");
			_removeBtnEl = _photoUploadPopUpEl.find("[data-btntype='remove']");
			_closeBtnEl = _photoUploadPopUpEl.find("[data-btntype='close']");
			_saveBtnEl = _photoUploadPopUpEl.find("[data-btntype='save']");	
			_formEl = _photoUploadPopUpEl.find("#" +_uploadPhotoFormID);
			_imageEl = _photoUploadPopUpEl.find("#new_photo_photo_upload");
			_fileSelectInputTagEl = _photoUploadPopUpEl.find("#newPhotoFile");
			
			sandbox.subscribe("show-upload-photo-popup", _self.triggerFileUpload);
			
			_saveBtnEl.on("click", function(event) {
				saveCroppedImageForContact();
			});
			
			_closeBtnEl.on("click", function(event) {
				removeTempUploadedPicture();
			});
			
			_removeBtnEl.on("click", function(event) {
				removeTempUploadedPicture();
			});
			
			_cancelBtnEl.on("click", function(event) {
				fnForCancelEvent();
			});			
			
			_fileSelectInputTagEl.on("change", function(event) {
				sandbox.publish("get-url-for-upload-pic-and-submit-form", { formName : _uploadPhotoFormID, files :  _fileSelectInputTagEl.get(0).files, filePath : _fileSelectInputTagEl.val() });
			});
			
			_iFrameEl = _photoUploadPopUpEl.find("#newPhoto_IFrame");
			
			_iFrameEl.on("load", function() {				
				fnToCheckLoadedImageAndEnableCropping();
			});
			
		},
		
		destroy : function() {
			sandbox.unsubscribe();
		},
		
		triggerFileUpload : function(data) {			
			triggerFileUpload(data);
		}
	};
});

DSCRM.Core.registerModule("contactsTabAutoSave", ["url","cache","alert","util","ajax"], function(sandbox) {
	
	var _self = null,
		_isTagsFetched = false,
		_isTagsPluginInitialized = false,
		_contactID = null,
		_category = null,
		_sourceOptions = [],
		_tagsAdded = [],
		_tagsRemoved = [],
		_arrayOfRandomUUID = [],
		_mapOfStandardCMTitleToLabel= {},
		_mapOfStandardLocationTitleToLabel = {},
		_mapOfStandardCMTitles = {},
		_mapOfStandardLocationTitles = {},
		_contactDetailsEl = null,
		_contactDetailsFooterEl = null,
		_isNewlyCreatedContact = false,
		_keyCodeForContactAddressInput = 0,
		_keyCodeForContactNameInput = 0,
		_companyOptionsForAutoSave = dscrm.templates.contacts.companyOptionsForContactAutoSave,
		_createContactTemplate = dscrm.templates.contacts.createContactTemplate,		
		_phoneForContactAutoSave = dscrm.templates.contacts.phoneForContactAutoSave,
		_faxForContactAutoSave = dscrm.templates.contacts.faxForContactAutoSave,
		_emailForContactAutoSave = dscrm.templates.contacts.emailForContactAutoSave,
		_socialForContactAutoSave = dscrm.templates.contacts.socialForContactAutoSave,
		_websiteForContactAutoSave = dscrm.templates.contacts.websiteForContactAutoSave,
		_addressForContactAutoSave = dscrm.templates.contacts.locationForContactAutoSave,
		_mailInformation = null,
		_isDeleteOperationForLocationOrMethod = false,
		_isTagAddorRemoveTagOperation = false,
		_customerListContainerEl = "#contacts .concol1 ul#customerListContainer",
		_contactTabNavEl = "#contacts .concol1 ul.customer_list_header li",
		_isWaitingForTags = true,
		_deferredFuncCalls= [],
		_uniqueRequestID = "",
		    
		setStandardFieldInfo = function(map){
    	
	    	var standardFieldsMap = map.standardFieldInfo["contact"], options = [], selectedDepartmentID = sandbox.cache.get("selectedDepartmentID");
	    	
	    	if(!sandbox.util.isEmptyObject(standardFieldsMap)){
	    		
		    	sandbox.dom.each(standardFieldsMap, function(key, value){
		    		if(key =="source" && !sandbox.util.isEmptyObject(value.predefinedOptions) && value.departmentID == selectedDepartmentID){
		    			_sourceOptions = value.predefinedOptions;
		    			return false;
		    		}
		    	});
	    	}
    	//sandbox.dom(_contactsTabContactInfoEl).find("div.contactDetailSourceDiv ul.dropdown-menu").html(_dropdownMenuOptionsTemplate({options : options}));
    	},
		
	    searchCompany = function(event) {
			
			if (event.keyCode === 38 || event.keyCode === 40 || event.keyCode === 37 || event.keyCode === 39)
				return;
			
			var searchQuery = sandbox.dom.trim(event.target.value);
			
			if(!searchQuery) {
				sandbox.dom(event.target).attr("data-companyid","");
				_contactDetailsEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide").parent().removeClass("open");
				return;
			}
			
			if(searchQuery.length < 3)
				return;
			
			_uniqueRequestID = sandbox.util.generateUUID();
			
			var data = {}, url = null;
			data['queryString'] = searchQuery;
			data['searchBy'] = 'all';
			data['departmentID'] = sandbox.cache.get("selectedDepartmentID");
			data['uniqueRequestID'] = _uniqueRequestID;
			
			_contactDetailsEl.find("[data-type='company'] div.dropdown").find("ul").remove();
			_contactDetailsEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("show");
			
			url = "/services/data/v2.0/objects/Search/searchForContact?apikey="+sandbox.cache.get("accountID");
			sandbox.ajax.requestDCM({method : "POST", url: url, endpoint: "/searchForContact", data : data, callBack: searchCompanyCallBack});
		},
	
	searchCompanyCallBack =  function(response) {
		
		if(!response.success) {
			_contactDetailsEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide");
			return;
		}
		
		if(response.uniqueRequestID != _uniqueRequestID)
			return;
		
		var arrayOfContacts = response.contact;
		if(sandbox.util.isEmptyObject(arrayOfContacts)) {
			_contactDetailsEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide").parent().removeClass("open");
			return;
		}
		
		var oldCompanyID = _contactDetailsEl.find("[data-type='company'] input[name='company']").attr("data-oldcompanyid");
			
		var arrayOfCompanies = [];
		sandbox.dom.each(arrayOfContacts, function(index, contact) {
			
			if(contact.category === 'person' || (!!oldCompanyID && contact.id === oldCompanyID))
				return true;
			
			arrayOfCompanies.push(contact);
		});
		
		if(sandbox.util.isEmptyObject(arrayOfCompanies)) {
			_contactDetailsEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide").parent().removeClass("open");
			return;
		}			
		
		_contactDetailsEl.find("[data-type='company'] div.dropdown div.loadspin").removeClass("hide, show").addClass("hide");
		_contactDetailsEl.find("[data-type='company'] div.dropdown").find("ul").remove();
		_contactDetailsEl.find("[data-type='company'] div.dropdown").append(_companyOptionsForAutoSave({contacts : arrayOfCompanies, appURL : sandbox.cache.get("appURL")}))			
								  .trigger("contact.tab.company.search.results:show");		
	},
	
	showCreateContactTemplate = function(data) {
		
		if(sandbox.util.isEmptyObject(data))
			return;
		
		//Reset shared variable
		_contactID = null; _isTagsFetched = false; _tagsAdded = []; _isTagsPluginInitialized = false;		
		_arrayOfRandomUUID = [];
		
		_category = data.category;
		if(!_category)
			return;
		
		data = {};		
		data.staticContentURL = sandbox.cache.get("staticContentURL")
		data.operation = "create";
		data.category = _category;
		data.products = sandbox.cache.get("productNames");
				
		_contactDetailsEl.empty().append(_createContactTemplate(data));
		
		sandbox.dom(_contactDetailsEl).find("input:not([name='name'])").attr("readonly", true);
		sandbox.dom(_contactDetailsEl).find("select, button").attr("disabled", true);
		
		_contactDetailsFooterEl = _contactDetailsEl.find("#create-or-update-contact-footer");
		//_contactDetailsEl.find("[data-select]").selectpicker({title : (sandbox.util.isEmptyObject(data.products))?"No Product" : "Choose one of the following..."}).selectpicker('refresh');		
		_contactDetailsEl.find("[data-select]").selectpicker().selectpicker('refresh');
		sandbox.util.putCursorAtEnd(sandbox.dom("#contact-tab-column-2").find("input[type='text']:enabled").first());
	},
	
	removeSelectedHtml = function(event) {
		
		var selectedHtmlDiv = sandbox.dom(event.target).parent().parent();
		var ID = selectedHtmlDiv.attr("data-id");
		
		if(!!ID) {			
			selectedHtmlDiv.attr("data-deleted", true).css("display", "none");
		} else {			
			selectedHtmlDiv.remove();
		}
	},
	
	insertSelectedHtmlBasedOnType =  function(event) {
		
		var type = event.target.dataset.insert,
			data = { deleted : false}, template = null;
				
		switch(type) {
		
			case 'phone' :
				template = _phoneForContactAutoSave;
				break;
			case 'fax' :
				template = _faxForContactAutoSave;
				break;
			case 'email' :
				template = _emailForContactAutoSave;
				break;
			case 'social' :
				template = _socialForContactAutoSave;
				break;
			case 'website' :
				template = _websiteForContactAutoSave;
				break;
			case 'address' :
				template = _addressForContactAutoSave;
				break;
			default :
				break;
		}
		
		_contactDetailsEl.find("ul:eq(0)").append(template(data));
		
		if(type == "website")
			type = "web";
		
		_contactDetailsEl.find("ul").find("li input[name='"+type+"']").focus();
		
	},
		
	saveContactName = function(name) {
		
		var contact = {};
		var nameTitles = sandbox.util.getTitlesFromNameBasedOnCategory(name, _category);
		if(_category === 'person') {
			contact.firstName = nameTitles.firstName; contact.lastName = nameTitles.lastName;
		} else {
			contact.fullName = nameTitles.fullName;
		}
		
		if(!_contactID) {
			
			var productID = _contactDetailsEl.find("select[data-select='products-option']").find("option:selected").attr("value");
			
			var arrayOfProducts = Object.keys(sandbox.cache.get("productNames"));
			arrayOfProducts = arrayOfProducts.filter(function(element) { return !!element});
			
			/*if(!sandbox.util.isEmptyObject(arrayOfProducts) && !productID) {
				
				_contactDetailsEl.find("input").attr("readonly", true);
				_contactDetailsEl.find("[data-select='products-option']").selectpicker('setStyle', 'btn-warning');
				_contactDetailsEl.find("[data-select='products-option']").selectpicker("refresh");				
				return;
			}*/
			
			contact.category = _category;
			contact.ownerID = sandbox.cache.get("loggedInUserID");
			contact.departmentID = sandbox.cache.get("selectedDepartmentID");
			contact.brandID = (!!productID)?productID:null;
			
			_contactDetailsEl.find("input").attr("readonly", true);
			_contactDetailsEl.find("[data-select='products-option']").prop('disabled', true);
			_contactDetailsEl.find("[data-select='products-option']").selectpicker('setStyle', 'btn-warning', 'remove');
			_contactDetailsEl.find("[data-select='products-option']").selectpicker("refresh");
			
			//console.info("Create : " + JSON.stringify(contact));
			createContact(contact);			
			
		} else {
			
			var randomUUID = sandbox.util.generateUUID(),
				metaDataForJS = { randomUUID : randomUUID, contactID : _contactID , type : "name"};
			
			_arrayOfRandomUUID.push(randomUUID);
			
			_contactDetailsEl.find("input[name='name']").attr("data-randomuuid", randomUUID).attr("readonly", true);
			
			updateContact(contact, metaDataForJS);
		}
	},
	
	createContact = function(contact) {
		
		if(sandbox.util.isEmptyObject(contact))
			return;
		
		var url = "/services/data/v2.0/objects/Contact?apikey="+sandbox.cache.get("accountID");
		
		sandbox.alert.message({text:"Saving", type: "success"});
		
		sandbox.ajax.requestDCM({method:"POST", url: url, endpoint:"/Contact", data: contact, callBack:createContactCallBack});
	},
	
	createContactCallBack = function(response) {
		
		sandbox.dom("#contact-add-list").removeClass('hide');
		
		if(sandbox.util.isEmptyObject(response) || !response.success) {
			
			_contactDetailsEl.find("input[name='name']").attr("readonly", false);
		//	_contactDetailsEl.find("[data-select='products-option']").prop('disabled', false);
		//	_contactDetailsEl.find("[data-select='products-option']").selectpicker("refresh");
			sandbox.alert.message({text:"Server Error, Try again", type: "error"});
			return;
		}
		
		sandbox.dom(_contactDetailsEl).find("input").attr("readonly", false);
		sandbox.dom(_contactDetailsEl).find("select, button").attr("disabled", false);
		

		var arrayOfContacts = response.contact;
		var contact = arrayOfContacts[0];
		
		updateCache(contact);
		
		sandbox.publish("contact-created", {contactID : contact.id, keyCodeForContactNameInput : _keyCodeForContactNameInput});
		sandbox.alert.hideMessage();
		sandbox.publish("update-analytics",{category:"Create",action:"Contact", label: sandbox.cache.get("loggedInUserEmail")+ "-" +sandbox.cache.get("accountID") });
	},
	
	preProcessContactMethods = function(contact) {
		
		var linkedContactMethods = contact.linkedContactMethods;
		if(sandbox.util.isEmptyObject(linkedContactMethods))
			return;
		
		var type = null, title = null, arrayOfCM = [], arrayOfPhone = [], arrayOfEmail = [], 
			arrayOfFax = [], arrayOfWeb = [], arrayOfSocial = [];
		
		sandbox.dom.each(linkedContactMethods, function(index, contactMethod) {
			
			if(contactMethod.deleted)
				return true;
			
			type = null; title = null;
			type = contactMethod.type;
			title = contactMethod.title;
			
			if(_mapOfStandardCMTitleToLabel.hasOwnProperty(type)) {
				
				var titleObj =  _mapOfStandardCMTitleToLabel[type];
				
				
				if(titleObj.hasOwnProperty(title))
					contactMethod.title = titleObj[title];
				else
					contactMethod.title = (!!title && title !=="null")?title:titleObj[type];
				
			}
			
			switch(type) {
				case 'phone':
					arrayOfPhone.push(contactMethod);
					break;
				case 'fax':
					arrayOfFax.push(contactMethod);
					break;
				case 'email' :
					arrayOfEmail.push(contactMethod);
					break;
				case 'social' :
					arrayOfSocial.push(contactMethod);
					break;
				case 'web' :
					arrayOfWeb.push(contactMethod);
					break;
				default :
					break;
			}
		});
		
		arrayOfCM = arrayOfPhone.concat(arrayOfEmail, arrayOfFax, arrayOfWeb, arrayOfSocial);
		
		contact.linkedContactMethods = arrayOfCM;
	},
	
	preProcessLocations = function(contact) {
		
		var linkedLocations = contact.linkedLocations;
		if(sandbox.util.isEmptyObject(linkedLocations))
			return;
		
		var title = null;
		sandbox.dom.each(linkedLocations, function(index, location) {
			
			if(location.deleted)
				return true;
			
			title = null;
			title = location.title;
			
			if(_mapOfStandardLocationTitleToLabel.hasOwnProperty(title)) {
				location.title = _mapOfStandardLocationTitleToLabel[title].title;
			} else {
				location.title =  (!!title && title !=="null")? title : "Address";
			}								
		});
		
		contact.linkedLocations = linkedLocations;
	},
	
	getCompanyAndShowInView = function(companyID) {
		
		var url = "/services/data/v2.0/objects/Contact/" + companyID + "?apikey="+sandbox.cache.get("accountID");
		
		var metaDataForJS = {}; metaDataForJS.personID = _contactID;
		sandbox.ajax.requestDCM({method:"GET", url: url, endpoint:"/Contact", data: null, callBack:getCompanyAndShowInViewCallBack, metaDataForJS : metaDataForJS});		
	},
	
	getCompanyAndShowInViewCallBack = function(response) {
		
		if(sandbox.util.isEmptyObject(response) || !response.success) {
			_contactDetailsEl.find("[data-type='company'] input[name='company']").attr("readonly", false);
			return;
		}
		
		//TODO - Need to check whether to check the departmentID of Contact with loggedIn User department
		
		var company = response.contact;
		updateCache(company);
		
		var metaDataForJS = response.metaDataForJS;
		if(sandbox.util.isEmptyObject(metaDataForJS) ||  _contactID !== metaDataForJS.personID) {
			return;
		}
		
		_contactDetailsEl.find("[data-type='company'] input[name='company']").val(company.fullName)
								  .removeAttr("data-randomuuid")
								  .attr("data-oldcompanyid", company.id)
								  .attr("data-newcompanyid", '')
								  .attr("readonly", false);
		
		//replace input with company link
		replaceCompanyInput(company.id,company.fullName);
		
	},
	
	updateCache = function(contact) {
    	
    	if(sandbox.util.isEmptyObject(contact))
    		return;
    	
    	var mapOfContactsInCache = sandbox.cache.get("contacts");
    	mapOfContactsInCache[contact.id] = contact;
    	sandbox.cache.update({"contacts" : mapOfContactsInCache});    	
    },
	
    updateTagsInCache = function(data) {
		
		if(sandbox.util.isEmptyObject(data))
			return;
		
		var tags = data.tags,
			tagsInfo = data.taginfo;
	
		var mapOfTagsInCache = sandbox.cache.get("tags");
		var mapOfTagsInfoInCache = sandbox.cache.get("tagsinfo");
		
		if(!sandbox.util.isEmptyObject(tags)) {
						
			if(mapOfTagsInCache === null)
				mapOfTagsInCache = {};
			
			sandbox.dom.each(tags, function(index, tag) {
				mapOfTagsInCache[tag.id] = tag;
			});
			
			if(sandbox.util.isEmptyObject(mapOfTagsInfoInCache))
				mapOfTagsInfoInCache = {};
			
			var linkedTagIDs = null,
				entityID = null,
				indexOfTagID = 0,
				tagID = null;
			
			sandbox.dom.each(tagsInfo, function(index, tagInfo) {
				
				linkedTagIDs = null;
				entityID = tagInfo.entityID;
				tagID = tagInfo.tagID;
				if(mapOfTagsInfoInCache.hasOwnProperty(entityID))
					linkedTagIDs = mapOfTagsInfoInCache[entityID];
				
				if(linkedTagIDs == null)
					linkedTagIDs = [];
				
				indexOfTagID = sandbox.dom.inArray( tagID , linkedTagIDs);
				
				if(indexOfTagID == -1)
					linkedTagIDs.push(tagInfo.tagID);
				
				mapOfTagsInfoInCache[entityID] = linkedTagIDs;
			});
			
		}
			
		if(!sandbox.util.isEmptyObject(data.deletedtags)) {
			
			var arrayOfDeletedTagsInfo = data.deletedtags;
			if(!sandbox.util.isEmptyObject(arrayOfDeletedTagsInfo)) {
				
				entityID = null; linkedTagIDs = null; 
				var tagID = null, indexOfTagID = 0; 
				
				sandbox.dom.each(arrayOfDeletedTagsInfo, function(index, tagInfo) {
					
					entityID = tagInfo.entityID;
					tagID = tagInfo.tagID;
					
					if(!mapOfTagsInfoInCache.hasOwnProperty(entityID))
						return true;
					
					linkedTagIDs = mapOfTagsInfoInCache[entityID];
					indexOfTagID = sandbox.dom.inArray( tagID , linkedTagIDs);
					
					if(indexOfTagID !== -1)
						linkedTagIDs.splice(indexOfTagID,1);
					
					mapOfTagsInfoInCache[entityID] = linkedTagIDs;
				});
			}
		}
		
		sandbox.cache.update({ tags :  mapOfTagsInCache });
		sandbox.cache.update({ tagsinfo : mapOfTagsInfoInCache});
		
		if(!sandbox.util.isEmptyObject(mapOfTagsInfoInCache) && mapOfTagsInfoInCache.hasOwnProperty(_contactID)) {
			
			linkedTagIDs = mapOfTagsInfoInCache[_contactID];
			var mapOfContactsInCache = sandbox.cache.get("contacts");
			var contact = mapOfContactsInCache[_contactID];
			if(!sandbox.util.isEmptyObject(contact)) {
				
				contact.linkedTags = linkedTagIDs;
				mapOfContactsInCache[_contactID] = contact;
				sandbox.cache.update({ contacts : mapOfContactsInCache});
				
	
				if(_isTagAddorRemoveTagOperation){
					
					var addedTagsFromCache = sandbox.cache.get("tagsAdded");
					var removedTagsFromCache = sandbox.cache.get("tagsRemoved");
								
					if(sandbox.util.isEmptyObject(addedTagsFromCache) && sandbox.cache.get("removedTagsFromCache"))
						return;
				
				
					getActivityLogForTagsUpdate({subEntityType : "contact", entityType :"contact" , entityID : _contactID, 
											addedTags : sandbox.cache.get("tagsAdded"), removedTags : sandbox.cache.get("tagsRemoved"),
											url : '<a href="'+  sandbox.util.getEntityURL({ entityType : "contact", entityID : _contactID}) +'" target = "_blank">'+ sandbox.util.getEntityURL({ entityType : "contact", entityID : _contactID})+'</a>'});
				
					sandbox.cache.update({"tagsAdded":[]});
					sandbox.cache.update({"tagsRemoved":[]});
					_isTagAddorRemoveTagOperation = false
				}
				
			}
		}
		
	},
	
	getActivityLogForTagsUpdate = function(data){
				
		var activityLog = '',  username = sandbox.cache.get('loggedInUserName'),
		    urlContent = null,addedContent = null, removedContent = null;
		
		if(!!username)
			activityLog = username+" Updated the "+ data['subEntityType']+'<br/> <br/>';
		
		if(!sandbox.util.isEmptyObject(data['addedTags'])){
			
			activityLog = activityLog+'<b style="color:#0084b0;">Added Tags :</b> '+data['addedTags']+'<br/>';		
			addedContent  = "Added";

		}
		
		if(!sandbox.util.isEmptyObject(data['removedTags'])) {
			
			activityLog = activityLog+'<b style="color:#0084b0;">Removed Tags :</b> '+data['removedTags']+'<br/>';		
			removedContent = "Removed";
		}
		
		if(data.hasOwnProperty('url')) {
			
			if(!!addedContent && !!removedContent)
				urlContent = addedContent + " and " +removedContent +" tags for the following URL";
			else if(!!addedContent)
				urlContent = addedContent +" tags for the following URL";
			else if(!!removedContent)
				urlContent = removedContent +" tags for the following URL";
					
			activityLog = activityLog+'<b style="color:#0084b0;">'+urlContent+':</b> '+data['url']+'<br/>';		
		}
		
		sandbox.cache.update({tagsUpdated:false});
		sandbox.publish('insert-activity-log',{historyComments : activityLog, entityType : data.entityType, entityID : data.entityID});
		
	},
	
	appendTagNames = function() {
		
		if(_isWaitingForTags){
			var hashUrl = (!!sandbox.url.entityID()) ? "#"+sandbox.url.page()+"/"+sandbox.url.entityID() : "#"+sandbox.url.page();
			_deferredFuncCalls.push({func:appendTagNames, args:[],thisObj:this, hash: hashUrl});
			return;
		}
		
		var contact =  sandbox.cache.get("contacts")[_contactID],
			tags = [],
			tagsForAutoComplete = [];
		
		if(sandbox.util.isEmptyObject(contact))
			return;
		
		var arrayOfTagIDs = contact.linkedTags;
		
		if(!_isTagsFetched && sandbox.util.isEmptyObject(arrayOfTagIDs)) {
			
			_contactDetailsEl.find("[data-type='tags'] input").attr('readonly', true);
			getTagsForContact();
			return;
		}
		
		var mapOfTagsInCache = sandbox.cache.get("tags"),
			deptFilteredTags = {}, linkedTagNames = [];
		
		if(!sandbox.util.isEmptyObject(arrayOfTagIDs)) {
			sandbox.dom.each(arrayOfTagIDs, function(index, tagID) {
				if(mapOfTagsInCache.hasOwnProperty(tagID))
					linkedTagNames.push(mapOfTagsInCache[tagID].name);			
			});
		}		
		
		if(!sandbox.util.isEmptyObject(mapOfTagsInCache)) {
			
			deptFilteredTags = sandbox.util.filterByDepartmentID(mapOfTagsInCache);
			
			sandbox.dom.each(deptFilteredTags, function(tagID, tagInfo) {
				tags.push(tagInfo.name)
			});
		}		
		
		tagsForAutoComplete = sandbox.dom(tags).not(linkedTagNames).get();
		
		_contactDetailsEl.find("[data-type='tags'] input").attr('readonly', false);
		_contactDetailsEl.find("[data-type='tags'] input").tokenfield('destroy');
		_contactDetailsEl.find("[data-type='tags'] input").tokenfield({
			  autocomplete: {
				  source:tagsForAutoComplete, 
				  delay: 100,
				  create: function(event , ui){
					  _contactDetailsEl.find("[data-type='tags'] input").on('tokenfield:createtoken', function (event) {
							
							tagsForAutoComplete = sandbox.dom(tagsForAutoComplete).not([event.attrs.value]).get();
							
							_contactDetailsEl.find("[data-type='tags'] input").data('bs.tokenfield').$input.autocomplete({source: tagsForAutoComplete });
							
						});
						
						_contactDetailsEl.find("[data-type='tags'] input").on('tokenfield:removetoken', function (event) {
							
							tagsForAutoComplete = sandbox.dom.merge( tagsForAutoComplete , [event.attrs.value] );
							
							_contactDetailsEl.find("[data-type='tags'] input").data('bs.tokenfield').$input.autocomplete({source: tagsForAutoComplete })
							
						});
				  }
			  },
			  showAutocompleteOnFocus: true,
			  allowEditing: false,
			  tokens :   linkedTagNames
		});
		
		
	
		//_contactDetailsEl.find("[data-type='tags'] input").tokenfield("setTokens", linkedTagNames);
		//_contactDetailsEl.find("[data-type='tags'] input").tokenfield("enable");
	},
	
    getTagsForContact = function() {
    	
    	var data = {}, linkedID = [], metaDataForJS = {};    	
    	linkedID.push(_contactID);
    	
    	metaDataForJS = { contactID : _contactID};
    	
    	data.listEntityID = linkedID;
    	data.entityID = _contactID;
    	data.entityType = 'contact';
    	data.departmentID = sandbox.cache.get("selectedDepartmentID");
    	
    	var url = "/services/data/v2.0/objects/Tags/getSelectedTags_v2?apikey="+sandbox.cache.get("accountID");
    	
    	sandbox.ajax.requestDCM({method:"POST", url: url, endpoint:"/getSelectedTags_v2", data: data, callBack:getTagsForContactCallBack, metaDataForJS : metaDataForJS});    	
    },
    
    getTagsForContactCallBack = function(response) {
    	
    	if(sandbox.util.isEmptyObject(response) || !response.status) {    		
    		return;
    	}
    	_isTagAddorRemoveTagOperation = false;
    	
    	updateTagsInCache(response);
    	_isTagsFetched = true;    	
    	appendTagNames();
    },
    
	displayContactDetails = function(data) {
    	    	
    	sandbox.dom("#contact-add-list").removeClass('hide');
    	
		if(sandbox.util.isEmptyObject(data))
			return;
		
		_contactID = data.contactID; _isTagsFetched = false; _tagsAdded = []; _isTagsPluginInitialized = false;
		if(!_contactID)
			return;
		
		//Reset shared variable
		_arrayOfRandomUUID = [];
		
		var contact = sandbox.dom.extend(true, {}, sandbox.cache.get("contacts")[_contactID]);
		
		_category = contact.category;
		contact.operation = "update";
		contact.staticContentURL = sandbox.cache.get("staticContentURL");
		
		var mapOfProductInfo = sandbox.cache.get("productNames");
		var productID = contact.brandID;
		
		if(mapOfProductInfo.hasOwnProperty(productID)) {
			contact.productName = mapOfProductInfo[productID];
		} else {
			contact.productName = "No Product";
		}
					
		if(contact.category == "company"){
			
			contact.name = contact.fullName;					
		} else{

			contact.name = sandbox.util.getPersonName(contact.firstName, contact.lastName);	
			
			var linkedContacts = contact.linkedContacts;
			
			if(!sandbox.util.isEmptyObject(linkedContacts)) {
				
				var company = null, companyID = null, companyInfoToUI = {};
				companyID = linkedContacts[0];
				company = sandbox.cache.get("contacts")[companyID];
				
				if(sandbox.util.isEmptyObject(company)) {
					
					companyInfoToUI.disableEdit = true;
					getCompanyAndShowInView(companyID);
					
				} else {
					companyInfoToUI.name = company.fullName;
					companyInfoToUI.oldcompanyid = companyID;					
				}				
				contact.companyInfo = companyInfoToUI;
			}
		}
				
		preProcessContactMethods(contact);
		preProcessLocations(contact);
		
		contact.sourceOptions = _sourceOptions;
		contact.isNewlyCreatedContact = _isNewlyCreatedContact;
		
		if(_isNewlyCreatedContact)
			contact.products = sandbox.cache.get("productNames");
				
		_contactDetailsEl.empty().append(_createContactTemplate(contact));
		
		if(_isNewlyCreatedContact) {
			_contactDetailsEl.find("[data-select]").selectpicker().selectpicker('refresh');
			
			if(_keyCodeForContactNameInput === 9) {
				sandbox.dom(_contactTabNavEl).each(function() {
				    if(sandbox.dom(this).hasClass("active")) {
				    	if(sandbox.dom(this).attr("data-category") === "person")
				    		sandbox.util.putCursorAtEnd(_contactDetailsEl.find("input[name='title']"));
				    	else {
				    		setTimeout(function(){
								sandbox.util.putCursorAtEnd(_contactDetailsEl.find("li[data-type='tags']").find("input.token-input"));
							},300); 
				    	}
				    }
				});
			}
		}
		
		_contactDetailsFooterEl = _contactDetailsEl.find("#create-or-update-contact-footer");
		
		if(contact.deleted)
			sandbox.dom('#contact-tab-column-2').find("div.alert-warning").removeClass("hide");
		else
			sandbox.dom('#contact-tab-column-2').find("div.alert-warning").addClass("hide");
		
		//loadTagsUnderAccount();		
		
		appendTagNames();		
	},
	
	updateContact = function(contact, metaDataForJS) {
		
		if(sandbox.util.isEmptyObject(contact) || !_contactID)
			return;
		
		//console.info("Contact : " + JSON.stringify(contact) + " - " + JSON.stringify(metaDataForJS));
		//return;
		
		var url = "/services/data/v2.0/objects/Contact/" + _contactID + "?apikey="+sandbox.cache.get("accountID");
		
		sandbox.alert.message({text:"Saving", type: "success"});
		
		sandbox.publish("update-analytics",{category:"Edit",action:"Contact",label: sandbox.cache.get("loggedInUserEmail")+ "-" +sandbox.cache.get("accountID") });
	
		sandbox.ajax.requestDCM({method:"PUT", url: url, endpoint:"/Contact", data: contact, callBack:updateContactCallBack, metaDataForJS : metaDataForJS});
	},
	
	updateContactCallBack = function(response) {
		
		var metaDataForJS = response.metaDataForJS,
			randomUUID = metaDataForJS.randomUUID,
			type = metaDataForJS.type, operation = metaDataForJS.operation, contactBeforeUpdate, contactAfterUpdate;
		
		var arrayOfContactsBeforeUpdate = [], arrayOfContactsAfterUpdate = [];

		contactBeforeUpdate = sandbox.cache.get("contacts")[_contactID];
		
		arrayOfContactsBeforeUpdate.push(contactBeforeUpdate);
		
		if(sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID) !== -1) {
			_arrayOfRandomUUID.splice( sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID), 1);
		}
		
		if(!response.success) {
			sandbox.alert.message({text:"Server error, Try saving again", type: "error"});
			removeRandomIDAndEnableInput(metaDataForJS);
			return;
		}
		
		var contact = response.contact[0];
		updateCache(contact);
		
		sandbox.publish("contact-updated", {id : _contactID});
		
		contactAfterUpdate = sandbox.cache.get("contacts")[_contactID];
		arrayOfContactsAfterUpdate.push(contactAfterUpdate);
		
//		if(_isDeleteOperationForLocationOrMethod){
//			sandbox.publish("add-activity-log-for-contact-operations", { entityType : "contact", entityID : _contactID, afterUpdate : arrayOfContactsAfterUpdate,
//																		 beforeUpdate : arrayOfContactsBeforeUpdate , operation : "Update",
//																		 category : _category
//																			});
//			_isDeleteOperationForLocationOrMethod = false;
//		}
		sandbox.publish("add-activity-log-for-contact-operations", { entityType : "contact", entityID : _contactID, afterUpdate : arrayOfContactsAfterUpdate,
			 beforeUpdate : arrayOfContactsBeforeUpdate , operation : "Update",
			 category : _category
				});
		
		removeRandomIDAndEnableInput(metaDataForJS);
		
		
		if(sandbox.util.isEmptyObject(_arrayOfRandomUUID))
			sandbox.alert.hideMessage();
	},
	
	saveContactTitle = function(title) {
		
		var randomUUID = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, contactID : _contactID, type : "title" },
			contact = {};
		
		contact.title = title;
		_arrayOfRandomUUID.push(randomUUID);
	
		_contactDetailsEl.find("input[name='title']").attr("data-randomuuid", randomUUID).attr("readonly", true);
	
		updateContact(contact, metaDataForJS);
	},
	
	saveContactSource = function(source) {
		
		var randomUUID = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, contactID : _contactID, type : "source" },
			contact = {};
		
		contact.source = source;
		_arrayOfRandomUUID.push(randomUUID);
	
		_contactDetailsEl.find("input[name='source']").attr("data-randomuuid", randomUUID).attr("readonly", true);
	
		updateContact(contact, metaDataForJS);
	},
	
	updateContactProduct = function(productID) {
		
		var randomUUID = sandbox.util.generateUUID(),
		metaDataForJS = { randomUUID : randomUUID, contactID : _contactID, type : "product" },
		contact = {};
	
		contact.brandID = productID;
		_arrayOfRandomUUID.push(randomUUID);

		_contactDetailsEl.find("input[name='product']").attr("data-randomuuid", randomUUID).attr("disabled", true);

		updateContact(contact, metaDataForJS);
	}
	
	saveCreatedTags = function(createdTagName) {
		
		if(!createdTagName)
			return;
		
		var linkedTags = [], randomUUID = sandbox.util.generateUUID(),
		metaDataForJS = { randomUUID : randomUUID, contactID : _contactID },
		data = {};
	
		linkedTags.push(createdTagName);
		_arrayOfRandomUUID.push(randomUUID);
	
	//	_contactDetailsEl.find("[data-type='tags'] input").tokenfield('disable');
		
		data.entityID = _contactID;
		data.entityType = "contact";
		data.tags = linkedTags;
		data.departmentID = sandbox.cache.get("selectedDepartmentID");
		
		var url = "/services/data/v2.0/objects/Tags/createTag?apikey="+sandbox.cache.get("accountID");
		
		sandbox.alert.message({text:"Saving", type: "success"});
		
		sandbox.ajax.requestDCM({method:"POST", url: url, endpoint:"/createTag", data: data, callBack:saveCreatedTagsCallBack, metaDataForJS : metaDataForJS});			
	},
	
	saveCreatedTagsCallBack = function(response) {
		
		var metaDataForJS = response.metaDataForJS,
			randomUUID = metaDataForJS.randomUUID;
	
		if(sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID) !== -1) {
			_arrayOfRandomUUID.splice( sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID), 1);
		}
		
		if(sandbox.util.isEmptyObject(response) || !response.status) {
			sandbox.alert.message({text:"Tags not saved. Try again", type: "error"});
			_contactDetailsEl.find("[data-type='tags'] input").tokenfield('enable');
			return;
		}
		
		var tagsFromResponse = response['tags'];
		var tagsAdded = [];
		sandbox.dom.each(tagsFromResponse,function(index,tag){
			
			if(!sandbox.util.isEmptyObject(tag) && sandbox.dom.inArray(tagsAdded,tag.name) == -1){
				
				tagsAdded.push(tag.name);
			}
		});
		
		sandbox.cache.update({"tagsAdded":tagsAdded});
		_isTagAddorRemoveTagOperation = true;
		updateTagsInCache(response);
		
		_contactDetailsEl.find("[data-type='tags'] input").tokenfield("enable");
		if(sandbox.util.isEmptyObject(_arrayOfRandomUUID))
			sandbox.alert.hideMessage();
	},
	
	saveRemovedTags = function(tagRemoved) {
		
		if(!tagRemoved)
			return;
		
		var randomUUID = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, contactID : _contactID };
	
		_arrayOfRandomUUID.push(randomUUID);
			
		var tagsInCache = sandbox.cache.get("tags"), tagsRemoved = [];
		
		sandbox.dom.each(tagsInCache, function(tagID, tagObj) {
			
			if(tagObj.name === tagRemoved) {
				tagsRemoved.push(tagID);
				return false;
			}				
		});
		
		_contactDetailsEl.find("[data-type='tags'] input").tokenfield('disable');
		
		var data = {};
		data['entityID'] = _contactID;
		data['tags'] = tagsRemoved;
		
		var url = "/services/data/v2.0/objects/Tags/deleteTagForEntity?apikey="+sandbox.cache.get("accountID");
		
		sandbox.alert.message({text:"Saving", type: "success"});
		
		sandbox.ajax.requestDCM({method:"POST", url: url, endpoint:"/deleteTagForEntity", data: data, callBack:saveRemovedTagsCallBack, metaDataForJS : metaDataForJS});		
	},
	
	saveRemovedTagsCallBack = function(response) {
				
		var metaDataForJS = response.metaDataForJS,
			randomUUID = metaDataForJS.randomUUID;

		if(sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID) !== -1) {
			_arrayOfRandomUUID.splice( sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID), 1);
		}
		
		if(sandbox.util.isEmptyObject(response) || !response.success) {
			sandbox.alert.message({text:"Tags not saved. Try again", type: "error"});
			_contactDetailsEl.find("[data-type='tags'] input").tokenfield('enable');
			return;
		}
		
		var deletedTags = response.taginfo;
		response.deletedtags = deletedTags;
		delete response.taginfo;
		
		var deletedTags = response.deletedtags;
		var tagsRemoved = [];
		var tagInfoFromCache = sandbox.cache.get("tags");
				
		sandbox.dom.each(deletedTags,function(index,tag){
			if(!sandbox.util.isEmptyObject(tag)){
				
				var tagNameFromCache = tagInfoFromCache[tag.tagID]['name'];
				
				if(!sandbox.util.isEmptyObject(tagNameFromCache) && sandbox.dom.inArray(tagsRemoved,tagNameFromCache) == -1)
				tagsRemoved.push(tagNameFromCache);
			}
			
		});
		
		sandbox.cache.update({"tagsRemoved":tagsRemoved});
		_isTagAddorRemoveTagOperation = true;
		
		updateTagsInCache(response);
		
		_contactDetailsEl.find("[data-type='tags'] input").tokenfield("enable");
		if(sandbox.util.isEmptyObject(_arrayOfRandomUUID))
			sandbox.alert.hideMessage();
	},
	
	updateCompanyForPerson = function(companyName, oldCompanyID, newCompanyID) {
		
		if(!companyName && !oldCompanyID && !newCompanyID){
			
			_contactDetailsEl.find(".company-link").hide();
			_contactDetailsEl.find("[data-type='company'] input[name='company']").val("").show();
			_contactDetailsEl.find("[data-type='company'] input[name='company']").attr("placeholder","Company Name");
			return;
		}
		
		var oldCompanyName = null;
		if(!!oldCompanyID) {
			oldCompanyName = sandbox.cache.get("contacts")[oldCompanyID].fullName;
		}
		
		if(companyName === oldCompanyName)
			return;
		
		var person = sandbox.cache.get("contacts")[_contactID],
			mapOfInfoForCreate = {}, mapOfInfoForUpdate = {},
			metaDataForJS = {},
			randomUUID = sandbox.util.generateUUID();
		
		_arrayOfRandomUUID.push(randomUUID);
		metaDataForJS.randomUUID = randomUUID;
		metaDataForJS.companyName = companyName;
		metaDataForJS.oldCompanyID = oldCompanyID;
		metaDataForJS.newCompanyID = newCompanyID;
		
		var linkedContactsForPerson = [], linkedContactsForCompany = [];
		
		if(!newCompanyID && !oldCompanyID && !!companyName) {
			
			mapOfInfoForCreate.fullName = companyName;
			mapOfInfoForCreate.category = 'company';
			mapOfInfoForCreate.type = 'contact';
			mapOfInfoForCreate.brandID = person.brandID;
			mapOfInfoForCreate.departmentID = sandbox.cache.get("selectedDepartmentID");
			mapOfInfoForCreate.ownerID = sandbox.cache.get("loggedInUserID");						
			
			linkedContactsForCompany = [];
			linkedContactsForCompany.push(_contactID);
			mapOfInfoForCreate.linkedContacts = { linkContacts : linkedContactsForCompany};
			
		} else if(!oldCompanyID && !!newCompanyID) {

			linkedContactsForPerson = [];
			linkedContactsForPerson.push(newCompanyID);
			mapOfInfoForUpdate.linkedContacts = { linkContacts : linkedContactsForPerson};		
			
		} else if(!!oldCompanyID && !newCompanyID && !companyName) {

			mapOfInfoForUpdate.linkedContacts = { linkContacts : []};
			
		} else if(!!oldCompanyID && !newCompanyID && !!companyName) {

			mapOfInfoForCreate.fullName = companyName;
			mapOfInfoForCreate.category = 'company';
			mapOfInfoForCreate.type = "contact";
			mapOfInfoForCreate.brandID = person.brandID;
			mapOfInfoForCreate.departmentID = sandbox.cache.get("selectedDepartmentID");
			mapOfInfoForCreate.ownerID = sandbox.cache.get("loggedInUserID");	
			
			linkedContactsForCompany = [];
			linkedContactsForCompany.push(_contactID);
			mapOfInfoForCreate.linkedContacts = { linkContacts : linkedContactsForCompany};
			
		} else if(!!oldCompanyID && !!newCompanyID && oldCompanyID !== newCompanyID) {

			inkedContactsForPerson = [];
			linkedContactsForPerson.push(newCompanyID);
			mapOfInfoForUpdate.linkedContacts = { linkContacts : linkedContactsForPerson};						
		}
		
		_contactDetailsEl.find("input[name='company']").attr("data-randomuuid", randomUUID).attr("readonly", true);
		
		if(!sandbox.util.isEmptyObject(mapOfInfoForCreate))
			createCompanyWithPerson(mapOfInfoForCreate, metaDataForJS);
		else if(!sandbox.util.isEmptyObject(mapOfInfoForUpdate))
			updatePersonWithCompany(mapOfInfoForUpdate, metaDataForJS);
		
	},
	
	createCompanyWithPerson = function(contact, metaDataForJS) {
		
		if(sandbox.util.isEmptyObject(contact))
			return;
		
		var url = "/services/data/v2.0/objects/Contact?apikey="+sandbox.cache.get("accountID");
		
		sandbox.alert.message({text:"Saving", type: "success"});
		
		sandbox.ajax.requestDCM({method:"POST", url: url, endpoint:"/Contact", data: contact, callBack:createCompanyWithPersonCallBack, metaDataForJS : metaDataForJS});
	},
	
	createCompanyWithPersonCallBack = function(response) {
		
		var metaDataForJS = response.metaDataForJS,
			randomUUID = metaDataForJS.randomUUID;
		
		if(!response.success) {
			sandbox.alert.message({text:"Server error, Try saving again", type: "error"});
			_arrayOfRandomUUID.splice( sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID), 1);
			_contactDetailsEl.find("input[data-randomuuid='" + randomUUID +"']").removeAttr("data-randomuuid").attr("readonly", false);
			return;
		}
		
		var company = response.contact[0];
		updateCache(company);
		
		var newCompanyID = metaDataForJS.newCompanyID,
			oldCompanyID = metaDataForJS.oldCompanyID,
			companyName =metaDataForJS.companyName,
			mapOfInfoForUpdate = {};
		
		var mapOfContactInfoInCache = sandbox.cache.get("contacts");
		
		if(!newCompanyID && !oldCompanyID && !!companyName) {
			
			var person = mapOfContactInfoInCache[_contactID];

			var linkedContacts = person.linkedContacts;
			if(sandbox.util.isEmptyObject(linkedContacts))
				linkedContacts = [];
				
			linkedContacts.push(company.id);			
			person.linkedContacts = linkedContacts;
			mapOfContactInfoInCache[_contactID] = person;
			
			sandbox.cache.update({ contacts : mapOfContactInfoInCache});
			
			if(sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID) !== -1) {
				_arrayOfRandomUUID.splice( sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID), 1);
			}
			
			_contactDetailsEl.find("input[data-randomuuid='" + randomUUID +"']").removeAttr("data-randomuuid")
									  .attr("data-oldcompanyid",company.id)
									  .attr("data-newcompanyid",'')
									  .attr("readonly", false);
			
			replaceCompanyInput(company.id,companyName);
			
			if(sandbox.util.isEmptyObject(_arrayOfRandomUUID))
				sandbox.alert.hideMessage();
			
		} else if(!!oldCompanyID && !newCompanyID && !!companyName) {

			var linkedContactsForPerson = [];
			linkedContactsForPerson.push(company.id);
			mapOfInfoForUpdate.linkedContacts = { linkContacts : linkedContactsForPerson};
			
			updatePersonWithCompany(mapOfInfoForUpdate, metaDataForJS);
			
		} else if( (!oldCompanyID && !!newCompanyID) 
				|| (!!oldCompanyID && !newCompanyID && !companyName)
				|| (!!oldCompanyID && !!newCompanyID && oldCompanyID !== newCompanyID) ) {

			//Do nothing						
		} 		
	},
	//Used to replace the company input into an url
	replaceCompanyInput = function(id,name){
		
		name = sandbox.dom.trim(name);
		
		_contactDetailsEl.find(".company-link").show();

		
		if( id == "" || name == "")
		{
			_contactDetailsEl.find(".company-link").hide();
			_contactDetailsEl.find("[data-type='company'] input[name='company']").show();
			_contactDetailsEl.find("[data-type='company'] input[name='company']").attr("placeholder","Company Name");
			return;
		}
		
		if(!!name)
			_contactDetailsEl.find(".company-link a").text(name);
		
		if(!!id)
			_contactDetailsEl.find(".company-link a").attr('href', '#contact/'+id);
				
		//Hide the input box
		_contactDetailsEl.find("[data-type='company'] input[name='company']").hide();
		
	},
	
	updatePersonWithCompany = function(contact, metaDataForJS) {
		
		if(sandbox.util.isEmptyObject(contact) || !_contactID)
			return;
		
		var url = "/services/data/v2.0/objects/Contact/" + _contactID + "?apikey="+sandbox.cache.get("accountID");
		
		sandbox.alert.message({text:"Saving", type: "success"});
		
		sandbox.ajax.requestDCM({method:"PUT", url: url, endpoint: "/Contact", data: contact, callBack:updatePersonWithCompanyCallBack, metaDataForJS : metaDataForJS});		
	},
	
	updatePersonWithCompanyCallBack = function(response) {
		
		var metaDataForJS = response.metaDataForJS,
			randomUUID = metaDataForJS.randomUUID;
	
		if(sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID) !== -1) {
			_arrayOfRandomUUID.splice( sandbox.dom.inArray(randomUUID, _arrayOfRandomUUID), 1);
		}
		
		if(!response.success) {
			sandbox.alert.message({text:"Server error, Try saving again", type: "error"});
			_contactDetailsEl.find("input[data-randomuuid='" + randomUUID +"']").removeAttr("data-randomuuid").attr("readonly", false);
			return;
		}
		
		var contact = response.contact[0];
		updateCache(contact);
		
		if(sandbox.util.isEmptyObject(_arrayOfRandomUUID))
			sandbox.alert.hideMessage();
		
		var newCompanyID = metaDataForJS.newCompanyID,
			oldCompanyID = metaDataForJS.oldCompanyID,
			companyName =metaDataForJS.companyName;
		
		if(!newCompanyID && !oldCompanyID && !!companyName) {
			
			//Do nothing
			
		} else if(!oldCompanyID && !!newCompanyID) {
			
			getCompanyAndShowInView(newCompanyID);		
			
		} else if( (!!oldCompanyID && !newCompanyID && !companyName) 
						|| (!!oldCompanyID && !newCompanyID && !!companyName) 
						|| (!!oldCompanyID && !!newCompanyID && oldCompanyID !== newCompanyID) ) {

			var mapOfContactInfoInCache = sandbox.cache.get("contacts");
			
			var oldCompany = mapOfContactInfoInCache[oldCompanyID];

			if(!sandbox.dom.isEmptyObject(oldCompany)) {
				
				var linkedContacts = oldCompany.linkedContacts;
			
				if(!sandbox.util.isEmptyObject(linkedContacts) && linkedContacts.indexOf(_contactID) !== -1) {
					
					linkedContacts.splice(linkedContacts.indexOf(_contactID),1);
					
					oldCompany.linkedContacts = linkedContacts;
					mapOfContactInfoInCache[oldCompanyID] = oldCompany;
				}				
			}
			
			if(!!newCompanyID) {
				
				var newCompany = mapOfContactInfoInCache[newCompanyID];

				if(!sandbox.dom.isEmptyObject(newCompany)) {
					
					var linkedContacts = newCompany.linkedContacts;
					if(sandbox.util.isEmptyObject(linkedContacts))
						linkedContacts = [];
						
					linkedContacts.push(_contactID);			
					newCompany.linkedContacts = linkedContacts;
					mapOfContactInfoInCache[newCompanyID] = newCompany;										
				} else {
					sandbox.cache.update({ contacts : mapOfContactInfoInCache});
					getCompanyAndShowInView(newCompanyID);	
					return;
				}
				
			} else {
				var linkedContactsForPerson = contact.linkedContacts;
				if(sandbox.util.isEmptyObject(linkedContactsForPerson))
					newCompanyID = '';
				else
					newCompanyID = linkedContactsForPerson[0];				
			}
						
			sandbox.cache.update({ contacts : mapOfContactInfoInCache});
				
			_contactDetailsEl.find("input[data-randomuuid='" + randomUUID +"']").removeAttr("data-randomuuid")
									  .attr("data-oldcompanyid", newCompanyID)
									  .attr("data-newcompanyid", '')
									  .attr("readonly", false);
			
			replaceCompanyInput(newCompanyID,companyName);
			
		}	
		// removing mousedown flag
		_contactDetailsEl.find("[data-type='company']").find("input[name='company']").data("mousedown", false);
		
	},
	
	removeRandomIDAndEnableInput = function(metaDataForJS) {
		
		var randomUUID = metaDataForJS.randomUUID,
			randomUUIDForInput = metaDataForJS.randomUUIDForInput,
			type = metaDataForJS.type, operation = metaDataForJS.operation;
		
		if(!type)
			return;
		
		if(type !== 'contactMethod' && type !== 'location' ) {
			_contactDetailsEl.find("input[data-randomuuid='" + randomUUID +"']").removeAttr("data-randomuuid").attr("readonly", false);
			return;
		}
		
		
		switch(operation) {
		
			case "create" :
				
				updateDOMWithIDForContactMethodAndLocation(metaDataForJS);
				
				break;
			case "update" :
								
				_contactDetailsEl.find("li[data-randomuuid='"+ randomUUID+"']").
										  find("button.icon-trash-o").prop("disabled", false);
							
				_contactDetailsEl.find("li[data-randomuuid='"+randomUUID+"']").find("input").prop("readonly",false);
				
				if(type === 'location') {
					
					if(metaDataForJS.hasOwnProperty("eventKey") && metaDataForJS.eventKey == 9)
						sandbox.util.putCursorAtEnd(_contactDetailsEl.find("input[data-randomuuid='"+randomUUIDForInput+"']").nextAll("input:first"));
					
					_contactDetailsEl.find("input[data-randomuuid='"+randomUUIDForInput+"']").removeAttr("data-randomuuid");
				}
				
				_contactDetailsEl.find("li[data-randomuuid='"+randomUUID+"']").removeAttr("data-randomuuid");
				
				break;
			case "delete" :
				_contactDetailsEl.find("li[data-randomuuid="+ randomUUID+"]").remove();
				//For enabling other delete icons
				_contactDetailsEl.find("button.icon-trash-o").removeClass('hide');
				break;
			default :
				break;
		}		 
	},
	
	updateContactMethodTitle = function(event) {
		
		var title = sandbox.dom.trim(event.target.value);
		var contactMethodContainerEl = sandbox.dom(event.target).parent().parent();
		var contactMethodID = contactMethodContainerEl.attr("data-id");
		
		if(!title) {			
			contactMethodContainerEl.find("div:first").removeClass("error").addClass("error");
			return;
		} else {
			contactMethodContainerEl.find("div:first").removeClass("error");
		}
						
		if(!contactMethodID)
			return;
		
		var randomUUID = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, contactID : _contactID },
			contact = {}, linkedContactMethods = [], contactMethod = {};
	
		_arrayOfRandomUUID.push(randomUUID);
		
		contactMethod.id = contactMethodID;
		
		if(_mapOfStandardCMTitles.hasOwnProperty(title)) {			
			contactMethod.title = _mapOfStandardCMTitles[title].title;
		} else {
			contactMethod.title = title; 
		}
		
		linkedContactMethods.push(contactMethod);
		contact.linkedContactMethods = linkedContactMethods;
		
		contactMethodContainerEl.attr("data-randomuuid", randomUUID).find("input").attr("readonly", true);
		contactMethodContainerEl.find("button.icon-trash-o").prop("disabled", true);
		
		metaDataForJS.type = "contactMethod"; metaDataForJS.operation = "update";
		
		updateContact(contact, metaDataForJS);
	},
	
	updateContactMethodValue = function(event) {
		
		var inputEl = sandbox.dom(event.target);
		var contactMethodContainerEl = inputEl.parent().parent();
		var contactMethodID = contactMethodContainerEl.attr("data-id");
		var title = contactMethodContainerEl.find("input[data-type='title']").val();
		var value = sandbox.dom.trim(inputEl.val());
		
		if(!value)
			inputEl.removeClass("error").addClass("error");
		else
			inputEl.removeClass("error");
		
		if(!!contactMethodID && !value)
			return;
		
		var randomUUID = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, contactID : _contactID },
			contact = {}, linkedContactMethods = [], contactMethod = {};
	
		_arrayOfRandomUUID.push(randomUUID);
		metaDataForJS.type = "contactMethod";
		
		if(!!contactMethodID) {
			contactMethod.id = contactMethodID;			
			metaDataForJS.operation = "update";
		} else {
			metaDataForJS.operation = "create";
			contactMethod.type = sandbox.dom.trim(contactMethodContainerEl.attr("data-cmtype"));
			if(_mapOfStandardCMTitles.hasOwnProperty(title)) {		
				contactMethod.title = _mapOfStandardCMTitles[title].title;
			} else {
				contactMethod.title = title; 
			}

		}

		contactMethod.value = value;
		metaDataForJS.contactMethod = contactMethod;
		linkedContactMethods.push(contactMethod);
		
		contact.linkedContactMethods = linkedContactMethods;
		
		contactMethodContainerEl.attr("data-randomuuid", randomUUID).find("input").attr("readonly", true);
		contactMethodContainerEl.find("button.icon-trash-o").prop("disabled", true);		 
		
		updateContact(contact, metaDataForJS);
	},
	
	updateLocationTitle = function(event) {
		
		var title = sandbox.dom.trim(event.target.value);
		var locationContainerEl = sandbox.dom(event.target).parent().parent();
		var locationID = locationContainerEl.attr("data-id");
		
		if(!title) {
			locationContainerEl.find("div:first").removeClass("error").addClass("error");
			return;
		} else {
			locationContainerEl.find("div:first").removeClass("error");
		}			
		
		if(!locationID)
			return;
		
		var randomUUID = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, contactID : _contactID },
			contact = {}, linkedLocations = [], location = {};
	
		_arrayOfRandomUUID.push(randomUUID);
		
		location.id = locationID;
		
		if(_mapOfStandardLocationTitles.hasOwnProperty(title)) {			
			location.title = _mapOfStandardLocationTitles[title].title;
		} else {
			location.title = title; 
		}
		
		linkedLocations.push(location);
		contact.linkedLocations = linkedLocations;
		
		locationContainerEl.attr("data-randomuuid", randomUUID).find("input").attr("readonly", true);	
		locationContainerEl.find("button.icon-trash-o").prop("disabled", true);
		
		metaDataForJS.type = "location"; metaDataForJS.operation = 'update';
		
		updateContact(contact, metaDataForJS);
	},
	
	updateDOMWithIDForContactMethodAndLocation = function(metaDataForJS) {
		
		var type = metaDataForJS.type,
			operation = metaDataForJS.operation,
			randomUUID = metaDataForJS.randomUUID,
			randomUUIDForInput = metaDataForJS.randomUUIDForInput;
		
		if(operation !== 'create')
			return;
		
		var contact = sandbox.cache.get("contacts")[_contactID];
		switch(type) {
			case "contactMethod" :
				
				var tempObj = metaDataForJS.contactMethod,
					contactMethodType = tempObj.type,
					contactMethodValue = tempObj.value,
					linkedContactMethods = contact.linkedContactMethods;
				
				sandbox.dom.each(linkedContactMethods, function(index, contactMethod) {
					
					if(contactMethod.type === contactMethodType && contactMethod.value === contactMethodValue) {
						_contactDetailsEl.find("li[data-randomuuid='" + randomUUID +"']").attr("data-id", contactMethod.id);
						_contactDetailsEl.find("li[data-randomuuid='" + randomUUID +"']").find("button.icon-trash-o").removeClass('hide');
						return false;
					}
				});
				
				break;
			case "location" :
				
				var tempObj = metaDataForJS.location,
					address = tempObj.address,
					linkedLocations = contact.linkedLocations;
			
				sandbox.dom.each(linkedLocations, function(index, location) {
					
					if(location.address === address) {
						_contactDetailsEl.find("li[data-randomuuid='" + randomUUID +"']").attr("data-id", location.id);
						_contactDetailsEl.find("li[data-randomuuid='" + randomUUID +"']").find("button.icon-trash-o").removeClass('hide');
						return false;
					}
				});
			
				break;
			default :
				break;
		}
		
		_contactDetailsEl.find("li[data-randomuuid="+ randomUUID+"]")
		  						  .find("button.icon-trash-o").prop("disabled", false);
		
		_contactDetailsEl.find("li[data-randomuuid="+ randomUUID+"]").find("input").attr("readonly", false);
		
		if(type === 'location') {
			
			if(metaDataForJS.hasOwnProperty("eventKey") && metaDataForJS.eventKey == 9)
				sandbox.util.putCursorAtEnd(_contactDetailsEl.find("input[data-randomuuid='"+randomUUIDForInput+"']").nextAll("input:first"));
			
			_contactDetailsEl.find("input[data-randomuuid='"+randomUUIDForInput+"']").removeAttr("data-randomuuid");
		}
		
		_contactDetailsEl.find("li[data-randomuuid="+ randomUUID+"]").removeAttr("data-randomuuid");

	},
	
	updateLocationValue = function(event) {
		
		var inputEl = sandbox.dom(event.target);
		var locationContainerEl = inputEl.parent().parent();
		var locationID = locationContainerEl.attr("data-id");
		var title = locationContainerEl.find("input[data-type='title']").val();
		var value = sandbox.dom.trim(inputEl.val());
		var type = sandbox.dom.trim(inputEl.attr("name"));
		
	/*	if(!value)
			inputEl.removeClass("error").addClass("error");
		else
			inputEl.removeClass("error");
		
		if(!!locationID && !value)	
			return; */
		
		var randomUUID = sandbox.util.generateUUID(), randomUUIDForInput = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, randomUUIDForInput : randomUUIDForInput, contactID : _contactID },
			contact = {}, linkedLocations = [], location = {};
	
		_arrayOfRandomUUID.push(randomUUID);
		metaDataForJS.type = "location";
		metaDataForJS.eventKey = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
		
		if(!!locationID) {
			location.id = locationID;
			metaDataForJS.operation = 'update';
		} else {
			metaDataForJS.operation = 'create';
			if(_mapOfStandardLocationTitles.hasOwnProperty(title)) {		
				location.title = _mapOfStandardLocationTitles[title].title;
			} else {
				location.title = title; 
			}
		}

		location[type] = value;
		metaDataForJS.location = location;
		linkedLocations.push(location);
		
		contact.linkedLocations = linkedLocations;
		
		inputEl.attr("data-randomuuid", randomUUIDForInput);
		locationContainerEl.attr("data-randomuuid", randomUUID).find("input").attr("readonly", true);
		locationContainerEl.find("button.icon-trash-o").prop("disabled", true);
		
		 updateContact(contact, metaDataForJS);
	},
	
	deleteContactMethod = function(event) {
				
		var contactMethodContainerEl = sandbox.dom(event.target).parent().parent();
		var contactMethodID = contactMethodContainerEl.attr("data-id");
		
		
		if(!contactMethodID) {
			contactMethodContainerEl.remove();
			return;
		}
		
		//For disabling other delete icons
		_contactDetailsEl.find("button.icon-trash-o").addClass('hide');
		
		var randomUUID = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, contactID : _contactID },
			contact = {}, linkedContactMethods = [], contactMethod = {};

		_arrayOfRandomUUID.push(randomUUID);
	
		contactMethod.id = contactMethodID;	
		contactMethod.deleted = true;
		linkedContactMethods.push(contactMethod);
		
		contact.linkedContactMethods = linkedContactMethods;
		
		contactMethodContainerEl.attr("data-randomuuid", randomUUID).find("input").attr("readonly", true);
		contactMethodContainerEl.find("button.icon-trash-o").prop("disabled", true);
		
		metaDataForJS.type = "contactMethod"; metaDataForJS.operation = 'delete';
				
		updateContact(contact, metaDataForJS);
		
	},
	
	deleteLocation = function(event) {
		
		var locationContainerEl = sandbox.dom(event.target).parent().parent();
		var locationID = locationContainerEl.attr("data-id");
		
		if(!locationID) {
			locationContainerEl.remove();
			return;
		}
		
		
		//For disabling other delete icons
		_contactDetailsEl.find("button.icon-trash-o").addClass('hide');
			
		var randomUUID = sandbox.util.generateUUID(),
			metaDataForJS = { randomUUID : randomUUID, contactID : _contactID },
			contact = {}, linkedLocations = [], location = {};
	
		_arrayOfRandomUUID.push(randomUUID);
				
		location.id = locationID;
		location.deleted = true;
		linkedLocations.push(location);
		
		contact.linkedLocations = linkedLocations;
		
		locationContainerEl.attr("data-randomuuid", randomUUID).find("input").attr("readonly", true);
		locationContainerEl.find("button.icon-trash-o").prop("disabled", true);
		
		metaDataForJS.type = "location"; metaDataForJS.operation = 'delete';
		
		updateContact(contact, metaDataForJS);		
	},
	
	showUpdatedPhoto = function(data) {
		
		var contactID = data.contactID;
		if(contactID !== _contactID)
			return;
		
		var photoID = sandbox.cache.get("contacts")[_contactID].photoID;
		
		if(!photoID)
			return;
		
		_contactDetailsEl.find("img[data-type = 'contact-photo']").attr("src", photoID);
	},
	
	makeCompanyEditable = function(event) {
		
		var companyName,
			companyId;
		
		_contactDetailsEl.find(".company-link").hide();	
		companyName = _contactDetailsEl.find(".company-link a").text();
		companyId = _contactDetailsEl.find(".company-link a").data("companyId");
		
		_contactDetailsEl.find("[data-type='company'] input[name='company']").val(companyName)
			.removeAttr("data-randomuuid")
			.attr("data-oldcompanyid", companyId)
			.attr("data-newcompanyid", '')
			.attr("readonly", false).show().focus();
		
	},
	
	showWebPopup = function(webAddress){
		
		var myUrl = /https:/;
	
		var size=sandbox.dom.trim(webAddress).search(myUrl);
		if ((size==-1))
		 { 
			  webAddress1 = webAddress.replace("http://","");
			  webAddress2 = webAddress1.replace("www.","");
			  window.open('http://'+webAddress2);				
		 }
		else
			window.open(webAddress);
	}, 
	
	deleteContact = function(contactID){
		
		var contactID = contactID["contactID"], data = {}, cacheObj = {}, 
		contactObj = sandbox.cache.get('contacts')[contactID], linkedTasks = [];
	       		
     
		if( contactObj.hasOwnProperty('linkedtasks') )
			linkedTasks = contactObj['linkedtasks'];
		
		
		sandbox.alert.message({text:"Deleting...", type:"info", time:3000});
		
		data['contactID'] = contactID;
		data['tasks'] = linkedTasks;
		
		sandbox.ajax.request({url:"/deleteContactDetails",method:"POST", endpoint:"/deleteContactDetails", data:data , callBack:deleteContactCallBack});
	}, 
	
	getToCcAndBccDetailForHistory = function(data){	
		
		var mapData = data.mapData;
		var historyComments = data.historyComments;
		
		var historyData = '';
		var to = '', cc = '', bcc = '', from = '', subject = '';
		
		if(!!mapData['from']) {
			from = mapData['from'];
			from = from.replace(/</g,'(');
			from = from.replace(/>/g,')');		
			historyData = '<div><b>From : </b><span class="history_from">'+from+'</span></div>';
		}
		
		if(!!mapData['subject']) {
			subject = mapData['subject'];
			historyData = historyData+'<div><b>Subject : </b><span class="history_subject">'+subject+'</span></div>';
		}
		
		if(!!mapData['to']) {
			to = mapData['to'];
			to = to.replace(/</g,'(');
			to = to.replace(/>/g,')');		
			historyData = historyData+'<div><b>To : </b><span class="history_to">'+to+'</span></div>';
		}
		
		if(!!mapData['cc']) {
			cc = mapData['cc'];
			cc = cc.replace(/</g,'(');
			cc = cc.replace(/>/g,')');
			historyData = historyData+'<div><b>Cc : </b><span class="history_cc">'+cc+'</span></div>';
		}
		
		if(!!mapData['bcc']) {
			bcc = mapData['bcc'];
			bcc = bcc.replace(/</g,'(');
			bcc = bcc.replace(/>/g,')');
			historyData = historyData+'<div><b>Bcc : </b><span class="history_bcc">'+bcc+'</span></div>';
		}
		
		if(!!historyData)
			historyComments = historyData + historyComments;

		return historyComments;
		
	},
	
	historyForContactMailOperation = function(data){
		
		if(sandbox.util.isEmptyObject(data))
			return;		

		
		var linkedContacts = [];
		
		 _mailInformation = data.mailInformation;
				 
		linkedContacts.push(_mailInformation.entityID)
		sandbox.alert.message({text :" Updating Comments for Contact,please wait...", type:"success", time: 5000});

		var accountID = sandbox.cache.get("accountID");
		var historyComments  = "<b> Message : </b><br><br>" + _mailInformation.mailContents;
		var resolutionComments = _mailInformation.subject;
		
		var mapHistoryData = {}, emailAttachment = '';
		
		mapHistoryData['subject'] = _mailInformation.subject;
		mapHistoryData['from'] = _mailInformation.from;
		mapHistoryData['to'] = _mailInformation.to;
		mapHistoryData['cc'] = _mailInformation.cc;
		mapHistoryData['bcc'] = _mailInformation.bcc;

		historyComments = getToCcAndBccDetailForHistory({ mapData : mapHistoryData, historyComments :historyComments});			
		historyComments = "<div class='mailContents'>" + historyComments + "</div>";

//		sandbox.dom.each(_mailInformation.attachments,function(id,document){	
//
//			sandbox.dom.each(_mailInformation.documents,function(documentID , fileInfo){
//				
//				if(document.name == fileInfo.name)
//					emailAttachment = emailAttachment + "<li data-document-id='"+documentID+"'  data-document-size='"+ document.size+"'  data-document-name='"+ document.name+"'> <label class=\"attachmentName\" style=\"text-decoration:underline; cursor: pointer\" onclick=\"downloadLinkedFile('"+ documentID + "')\"><strong style=\"color:#15c;\">"+document.name+"</strong><strong style=\"color:#777;\"> ("+Math.floor((document.size)/1024)+"K) </strong></label></li>";
//			});
//			
//		});
		
		
		var listOfUploadedDocumentID = (_mailInformation.listOfUploadedDocumentID)?_mailInformation.listOfUploadedDocumentID:[];
				
		
		if(listOfUploadedDocumentID.length)
		{
		     for(var i = 0 ; i< listOfUploadedDocumentID.length; i++)
		    	 {
		    	 	var documentID = listOfUploadedDocumentID[i];
		    	 	var document = _mailInformation.documents[documentID];
		    	 	if(!!document)
						emailAttachment = emailAttachment + "<li data-document-id='"+documentID+"'  data-document-size='"+ document.size+"'  data-document-name='"+ document.name+"'> <label class=\"attachmentName\" style=\"text-decoration:underline; cursor: pointer\" onclick=\"downloadLinkedFile('"+ documentID + "')\"><strong style=\"color:#15c;\">"+document.name+"</strong><strong style=\"color:#777;\"> ("+Math.ceil((document.size)/1024)+"K) </strong></label></li>";
		    	 
		    	 }
		}

		if(emailAttachment != '' && !sandbox.util.isEmptyObject(emailAttachment))
		{
			emailAttachment = "<div class=\"outboundemail_attachment\"><p><b>" + listOfUploadedDocumentID.length + " Attachments</b></p><ul class=\"emailAttachment\">" + emailAttachment + "</ul></div>";
			historyComments = historyComments + emailAttachment;
		}
		    history.departmentID = sandbox.cache.get("selectedDepartmentID");
			history.historyComments = historyComments;
			history.type = 'sent';
			history.ownerID = sandbox.cache.get("loggedInUserID");
			history.ownerName = sandbox.cache.get("loggedInUserName");
			history.entityType = _mailInformation.entityType;
			history.linkedContacts = linkedContacts;
			history.resolutionComments = _mailInformation.subject;
			
			history.taskComments = 'Email (' + _mailInformation.to + ')'

 		    sandbox.ajax.requestDCM({url:"/services/data/v2.0/objects/History/insertHistory?apikey="+accountID, method:"POST", endpoint: "/insertHistory", data:history , callBack : historyForMailOperationCallBack});
	},
	
	historyForMailOperationCallBack = function(response){
		
		sandbox.publish("add-history",{ entityType : response.entityType, entityID : _mailInformation.entityID, history : response.history});

	},
	
	deleteContactCallBack = function(resultObject){
				
		
		var contactID = resultObject.contactID, listOfContactID = [], nextContactID = '', cacheObj = {},  
		mapOfDeal = {}, mapOfDealFromCache = {}, indexOfContactIDInArray = 0, 
		data = {}, linkedTasks = [], taskId  = '',removeEl = '',
		selectedContactsView = '';
		
		if(sandbox.util.isEmptyObject(resultObject) && !resultObject.success){	
			sandbox.alert.message({text:"Server Error , plz refresh ... ", type:"error", time:5000});
			return;
		}
		
		mapOfDealFromCache = sandbox.cache.get("deals");
		
		if(resultObject.hasOwnProperty('deal') && !sandbox.util.isEmptyObject(mapOfDealFromCache)){
			
			mapOfDeal = resultObject.deal;
			
			sandbox.dom.each(mapOfDeal,function(key,value){
			   
				if(mapOfDealFromCache.hasOwnProperty(key))
					mapOfDealFromCache[key] = value; 
			});
		}
		
		if(resultObject.hasOwnProperty('task') && !sandbox.util.isEmptyObject(resultObject.task)){
			linkedTasks = resultObject['task'];
			
			if(!sandbox.util.isEmptyObject(linkedTasks)){
				
				for(var i = 0, j=linkedTasks.length; i<j; i+=1){
					
					var linkedTasksObj;
					
					taskID = linkedTasks[i];
					
					if(!sandbox.util.isEmptyObject(sandbox.cache.get('tasks')))
						delete sandbox.cache.get('tasks')[taskID];
					
					sandbox.dom('#DataTables_Table_2 tbody').find('.tasklist_90208cae-1554-4e28-bf16-4cafccf4fa6f').remove();
					
					cacheObj = sandbox.cache.get('contacts')[contactID];
					
					linkedTasksObj = cacheObj['linkedTasks'];
					
					if(!sandbox.util.isEmptyObject(linkedTasksObj)){
						
						for(var k = 0; K< linkedTasksObj.length; K++){
							
							if(taskID == linkedTasksObj[k]){
								removeEl = linkedTasksObj.slice(i,1);
								break;
							}
								
						}
					
					}
				}
			}
		}
		
		var type = sandbox.url.page();
		var id = sandbox.url.entityID();
		
		
		var deletedContact = sandbox.cache.get("contacts")[contactID];
		var linkedContact = {};
		
		if(deletedContact.hasOwnProperty('linkedContacts')){
			
			var linkedContactsArray = deletedContact['linkedContacts'];
			
			if(!sandbox.util.isEmptyObject(linkedContactsArray)){
				
				sandbox.dom.each(linkedContactsArray,function(index,value){
					
					linkedContact = sandbox.cache.get('contacts')[value];
					
					if(!sandbox.util.isEmptyObject(linkedContact)){
						
						var linkedContactsForObj = linkedContact['linkedContacts'];
						var i = linkedContactsForObj.indexOf(contactID);
						linkedContactsForObj.splice(i,1);
						
						linkedContact['linkedContacts'] = linkedContactsForObj;
						sandbox.cache.get("contacts")[value] = linkedContact;
						
					}
				});
			}
			
		}
		
		//TODO - This needs to be published to contacts tab module
		var nextContactID = sandbox.dom("#customerListContainer").find('#contact_'+contactID).next().attr('id');
		
		//sandbox.publish('display-contacts-info');
		
		if(nextContactID == null || nextContactID == undefined || nextContactID == 'fetchMore'){
			
			nextContactID = sandbox.dom("#customerListContainer").find('#contact_'+contactID).prev().attr('id');
			if(nextContactID == null || nextContactID == undefined )
			{
				sandbox.publish("remove-contacts-ui-cache", {listOfContactID:[contactID], category:_category});
				window.location.hash = "#contacts";
				return;
			}
		}
	   
		sandbox.publish("remove-contacts-ui-cache", {listOfContactID:[contactID], category:_category});
		nextContactID = nextContactID.replace('contact_',"");
        sandbox.dom('#customerListContainer').find('#contact_'+nextContactID).click();
		sandbox.publish('display-contact-details',{contactID:nextContactID});
		return;
		
	},
	
	executeDeferredJobs = function(){
		
		var hash,i,l,map;
		hash = (!!sandbox.url.entityID()) ? "#"+sandbox.url.page()+"/"+sandbox.url.entityID() : "#"+sandbox.url.page();
		l = _deferredFuncCalls.length;
		
		if(l != 0){
	    		for(i=0;i<l;i++){
	    			map = _deferredFuncCalls[i];
	    			if(!!map.hash && hash == map.hash)
	    				map.func.apply(map.thisObj, map.args);
	    			
	    			_deferredFuncCalls.splice(i,1);
	    			i--;l--;
	    		}
    		}
	},
	
	triggerClickEventForContact = function(data) {
		
		_isNewlyCreatedContact = data.isNewlyCreatedContact;
		_keyCodeForContactNameInput = data.keyCodeForContactNameInput;
		sandbox.dom(_customerListContainerEl + " li#contact_"+data.contactID).trigger('click');
	};
	
	
	return {
		
		init : function() {
			_self = this;
			
			_mapOfStandardCMTitleToLabel['phone'] = {"mobile" : "Mobile Phone", "work" : "Work Phone", "home" : "Home Phone", "main" : "Main Phone", "phone" : "Phone"};	
			_mapOfStandardCMTitleToLabel['fax'] = {"work" : "Work Fax", "home" : "Home Fax", "main" : "Main Fax", "fax" : "Fax"};
			_mapOfStandardCMTitleToLabel['email'] = {"personal" : "Personal Email", "work" : "Work Email", "email" : "Email"};
			_mapOfStandardCMTitleToLabel['social'] = {"facebook" : "Facebook", "twitter" : "Twitter", "linkedin" : "LinkedIn", "google plus" : "Google plus", "social" : "Social"};
			
			_mapOfStandardLocationTitleToLabel['home'] = {"title":"Home Address"};
			_mapOfStandardLocationTitleToLabel['office'] = {"title":"Office Address"};
			
			_mapOfStandardCMTitles['Mobile Phone'] = {"type":"phone","title":"mobile"};
			_mapOfStandardCMTitles['Work Phone'] = {"type":"phone","title":"work"};
			_mapOfStandardCMTitles['Home Phone'] = {"type":"phone","title":"home"};
			_mapOfStandardCMTitles['Main Phone'] = {"type":"phone","title":"main"};
			_mapOfStandardCMTitles['Work Fax'] = {"type":"fax","title":"work"};
			_mapOfStandardCMTitles['Home Fax'] = {"type":"fax","title":"home"};
			_mapOfStandardCMTitles['Main Fax'] = {"type":"fax","title":"main"};
			_mapOfStandardCMTitles['Personal Email'] = {"type":"email","title":"personal"};
			_mapOfStandardCMTitles['Work Email'] = {"type":"email","title":"work"};
			_mapOfStandardCMTitles['Facebook'] = {"type":"social","title":"facebook"};
			_mapOfStandardCMTitles['Twitter'] = {"type":"social","title":"twitter"};
			_mapOfStandardCMTitles['Google Plus'] = {"type":"social","title":"google plus"};
			_mapOfStandardCMTitles['LinkedIn'] = {"type":"social","title":"linkedin"};
						
			_mapOfStandardLocationTitles['Home Address'] = {"title":"home"};
			_mapOfStandardLocationTitles['Office Address'] = {"title":"office"};
			
			sandbox.subscribe("fieldInfo-cache-updated", setStandardFieldInfo);
			sandbox.subscribe("display-contact-details", _self.displayContactDetails);
			sandbox.subscribe("show-create-contact-template", _self.showCreateContactTemplate);
			sandbox.subscribe("contact-tab-photo-uploaded", showUpdatedPhoto);
			sandbox.subscribe(sandbox.moduleName+"-email-sent",historyForContactMailOperation);//contactsTabAutoSave-email-sent
			sandbox.subscribe("trigger-click-event-contact", triggerClickEventForContact);
			sandbox.subscribe("tags-cache-updated", function(){
				_isWaitingForTags = false;
				executeDeferredJobs();
			});
			_contactDetailsEl = sandbox.dom("#contact-details");		
						
			// To Click event for button element when ENTER key is pressed on any input element			
			_contactDetailsEl.on("keypress", "input", function(event) {

				if(event.keyCode === 13) {
					
					if(sandbox.dom(event.target).attr("name") === "company") {

						sandbox.dom(event.target).trigger("contact.tab.company:update");
						sandbox.dom(event.target).parent().trigger("contact.tab.company.search.results:hide");
					} else
						event.preventDefault();
				}
									
			});			
			
//			_contactDetailsEl.on("contact.tab.company.search.results:toggle", "[data-type='company'] div.dropdown", function(event) {
//				
//				var element = _contactDetailsEl.find("[data-type='company']").find("div.dropdown");
//				if(element.is(".show"))
//					_contactDetailsEl.find("[data-type='company']").find("div.dropdown").trigger("contact.tab.company.search.results:hide");
//				else
//					_contactDetailsEl.find("[data-type='company']").find("div.dropdown").trigger("contact.tab.company.search.results:show");
//			});
			
			_contactDetailsEl.on("contact.tab.company.search.results:show", "[data-type='company'] div.dropdown", function(event) {
				setTimeout(function(){
					if(_contactDetailsEl.find("[data-type='company'] input[name='company']").is(':focus'))
						_contactDetailsEl.find("[data-type='company']").find("div.dropdown").addClass("open");
					
				}, 10);
				
			});
			
			_contactDetailsEl.on("contact.tab.company.search.results:hide", "[data-type='company'] div.dropdown", function(event) {
				_contactDetailsEl.find("[data-type='company']").find("div.dropdown").removeClass("open");
			});
					
//			_contactDetailsEl.on("focusout", "input[name='company']", function(event) {
//				_contactDetailsEl.find("[data-type='company']").find("div.dropdown").trigger("contact.tab.company.search.results:hide");
//			});
			
			_contactDetailsEl.on("click", "input[name='source']", function(e){
					var ul = sandbox.dom(e.target).next("ul.dropdown-menu");
					if(ul.children().length > 0)
						ul.addClass("show");
			});
			
			_contactDetailsEl.on("blur","input[name='company']",function(event) {
					
				/*	var mouseDownTriggered = _contactDetailsEl.find("[data-type='company']").find("input[name='company']").data("mousedown");
					var suggestionList = _contactDetailsEl.find("[data-type='company']").find("ul.dropdown-menu li");
					
					var companyName = _contactDetailsEl.find("[data-type='company']").find("input[name='company']").val();
					
					if(!!mouseDownTriggered || suggestionList.length > 0) {
						sandbox.dom(event.target).parent().trigger("contact.tab.company.search.results:hide");
						return;
					}  */
				
					sandbox.dom(this).hide();
					_contactDetailsEl.find(".company-link").show();
					_contactDetailsEl.find(".company-link a").text(sandbox.dom(this).val());
					sandbox.dom(event.target).parent().trigger("contact.tab.company.search.results:hide");
					sandbox.dom(event.target).trigger("contact.tab.company:update");
					
			});			
					
			_contactDetailsEl.on("click",".company-link .icon-times", function(event) {
					makeCompanyEditable(event);
			});

				
			_contactDetailsEl.on("click", "[data-type='source' ] ul li", function(e){
					
					var value;
					if(e.target.tagName == "A")
						value = e.target.innerHTML;
					else
						value = sandbox.dom(e.target).children[0].innerHTML;
					sandbox.dom(e.target).parents("ul").prev("input.dropdown-input").val(value).trigger("change");
					sandbox.dom(e.target).parents("ul").removeClass("show");
				});
		        
			_contactDetailsEl.on("click", "[data-type='contactMethod'] ul li a, [data-type='location'] ul li a", function(event) {
				
				var title = event.target.innerHTML;
				
				if(title === 'Custom') {
					sandbox.dom(event.target).parent().parent().parent().find("input[data-type='title']").val("").trigger("click").focus();
				} else {
					sandbox.dom(event.target).parent().parent().parent().find("input[data-type='title']").val(event.target.innerHTML).trigger("change");
				}						
			});
			
			_contactDetailsEl.on("keyup", "[data-type='company'] input[name='company']", function(event) {
				
				var key = event.keyCode, liSelected, tempLi, first, last, newLi, selectedCompanyID, companyName,
					ul = sandbox.dom(event.target).siblings("ul.dropdown-menu"),
					inputEl = sandbox.dom(event.target),
					oldCompanyID = inputEl.attr("data-oldcompanyid");
				
				var companyName = inputEl.val();
					  companyName = sandbox.dom.trim(companyName);
					  

				if(companyName == "")
				{
					ul.remove();
					return;
				}	
				if(key == 13)
					return;
				
				if((key == 40 || key == 38) && ul.children().length > 0){
					
					liSelected = ul.find("li.selected-contact");
					first = ul.find("li:first-child");
					last = ul.find("li:last-child");
					
					if(key == 38){
						
						if(liSelected.length == 0)
							newLi = last.addClass("selected-contact");
						else{
							tempLi = sandbox.dom(liSelected).removeClass("selected-contact").prev();
							if(tempLi.length == 0)
								newLi = last.addClass("selected-contact");
							else
								newLi = tempLi.addClass("selected-contact");
						}
					}
					else if(key == 40){
						
						if(liSelected.length == 0)
							newLi = first.addClass("selected-contact");
						else{
							tempLi = sandbox.dom(liSelected).removeClass("selected-contact").next();
							if(tempLi.length == 0)
								newLi = first.addClass("selected-contact");
							else
								newLi = tempLi.addClass("selected-contact");
						}
					}
					
					ul.children().removeClass("selected-by-arrow-key selected-by-hover");
					newLi.addClass("selected-by-arrow-key");

					selectedCompanyID = newLi.find("span.btn").data("selectcompanyid");
					inputEl.attr("arrow-selected-companyid", selectedCompanyID).removeAttr("hover-selected-companyid");
					companyName = newLi.find("span a").html();
					inputEl.val(companyName);
					return;
				}
				
				searchCompany(event);
			});
			
			_contactDetailsEl.on("mouseover", "[data-type='company'] div.dropdown ul li", function(event) {
				
				var li = sandbox.dom(this),
					companyID = li.find("span.btn").data("selectcompanyid"),
					companyName = li.find("span a").html();
				
				li.siblings().removeClass("selected-contact selected-by-arrow-key selected-by-hover");
				li.addClass("selected-contact selected-by-hover");
				_contactDetailsEl.find("[data-type='company'] input[name='company']").removeAttr("arrow-selected-companyid").attr("hover-selected-companyid",companyID).val(companyName);
			});
			
			_contactDetailsEl.on("mousedown", "[data-type='company'] div.dropdown ul li span.btn", function(event) {
				
				var selectedCompanyID = event.target.dataset.selectcompanyid,
					companyName = sandbox.dom(event.target).parent().find("span a").html(),
					inputEl = _contactDetailsEl.find("[data-type='company']").find("input[name='company']");
				//_contactDetailsEl.find("[data-type='company'] div.dropdown").find("ul").remove();
				
				//adding flag to prevent blur trigger
				inputEl.data("mousedown", true);
				
				var oldCompanyID = inputEl.attr("data-oldcompanyid");
				
				if(oldCompanyID == selectedCompanyID)
					return;
				
				inputEl.attr("data-newcompanyid", selectedCompanyID).val(companyName).trigger("contact.tab.company:update");
				
				_contactDetailsEl.find("[data-type='company']").find("div.dropdown").trigger("contact.tab.company.search.results:hide");
										  
				//inputEl.trigger("contact.tab.company:update");
			});
			
			_contactDetailsEl.on("mousedown", "[data-type='company'] div.dropdown ul li span.contactinfo a", function(event) {
				sandbox.window.open(sandbox.dom(this).attr("href"),"_blank");
			});
			
			_contactDetailsEl.on("click", "#create-or-update-contact-footer div ul li a", function(event) {	

				insertSelectedHtmlBasedOnType(event);
			});
			
			_contactDetailsEl.on("click", "#contact-tab-upload-photo", function(event) {
				if(!!_contactID)
					sandbox.publish("show-upload-photo-popup", { type : "contact_picture", contactID : _contactID, entityType : "contact", entityID : _contactID});				
			});
			
			//AutoSave
			
			_contactDetailsEl.on("keydown", "input[name='name']", function(event) {
				
				_keyCodeForContactNameInput = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
			});
			
			_contactDetailsEl.on("change", "input[name='name']", function(event) {
				
				var name = sandbox.dom.trim(event.target.value);
				if(!name) {
					sandbox.alert.message({text:"Contact name can't be empty", type: "warning", time : 4000});
					sandbox.dom(event.target).focus();
					return;
				}
				
				saveContactName(name);
			});
			
			_contactDetailsEl.on("change", "input[name='title']", function(event) {
				
				//console.info("Title :" + event.target.value);
				var title = sandbox.dom.trim(event.target.value);
				saveContactTitle(title);
			});
						
			_contactDetailsEl.on("tokenfield:initialize", "[data-type='tags'] input", function(event) {
				_isTagsPluginInitialized = true;
			});
			
			_contactDetailsEl.on("tokenfield:createtoken", "[data-type='tags'] input", function(event) {
				
				var tagName = event.attrs.value;
				var array = [];
				
				if(sandbox.util.containsSpecialChars(tagName)){
					event.preventDefault();
					sandbox.alert.message({text:"Tag name contains invalid character", type: "warning", time : 3000});
					return;
				}
					
				
				if(_contactDetailsEl.find("[data-type='tags'] input").is(':disabled')) {
					event.preventDefault();
					return;
				}
				
				_contactDetailsEl.find("[data-type='tags'] input").tokenfield('disable');
				
				var existingTokens = sandbox.dom(this).tokenfield('getTokens');
			    sandbox.dom.each(existingTokens, function(index, token) {
			        if (token.value === tagName)
			            event.preventDefault();
			        
			        array.push(token.value);
			    });
			    
				if(array.indexOf(event.attrs.value) !== -1) {
					sandbox.alert.message({text:"Same tag can't be added again", type: "warning", time : 3000});
					_contactDetailsEl.find("[data-type='tags'] input").tokenfield('enable');
					event.preventDefault();
				}
			});

			_contactDetailsEl.on("tokenfield:createdtoken", "[data-type='tags'] input", function(event) {
				
				//console.info(" Tag Created : " + event.attrs.value);
				var tagName = event.attrs.value;
				
				if(!_isTagsPluginInitialized) {
					_tagsAdded.push(tagName);
					return;
				}					
								
				saveCreatedTags(tagName);
			});
			
			_contactDetailsEl.on("tokenfield:removedtoken", "[data-type='tags'] input", function(event) {
				
				var removedTag = sandbox.dom.trim(event.attrs.value);
				
				saveRemovedTags(removedTag);
				var index = _tagsAdded.indexOf(removedTag);
				if (index > -1) {
				    _tagsAdded.splice(index, 1);
				}
				
			});
			
			_contactDetailsEl.on("changed.bs.select", "[data-select='products-option']", function(event, clickedIndex, newValue, oldValue) {
				
				var productID = _contactDetailsEl.find("select[data-select='products-option']").find("option:selected").attr("value");
				updateContactProduct(productID);
			});
			
			_contactDetailsEl.on("contact.tab.company:update", "[data-type='company'] input[name='company']", function(event) {
								
				var companyName = sandbox.dom.trim(sandbox.dom(event.target).val()),
					oldCompanyID = sandbox.dom(event.target).attr("data-oldcompanyid"),
					newCompanyID = sandbox.dom(event.target).attr("data-newcompanyid"),
					ul = sandbox.dom(event.target).siblings("ul.dropdown-menu");
				
				
				
				if(ul.length > 0){
					
					if(ul.find("li.selected-by-arrow-key").length == 1){
						
						if(sandbox.dom(event.target).val() == ul.find("li.selected-by-arrow-key span a").html()){
							newCompanyID = ul.find("li.selected-by-arrow-key span.btn").data("selectcompanyid");
							sandbox.dom(event.target).attr("data-newcompanyid", newCompanyID);
						}
						
					}
					else if(ul.find("li.selected-by-hover").length == 1){
						
						if(sandbox.dom(event.target).val() == ul.find("li.selected-by-hover span a").html()){
							newCompanyID = ul.find("li.selected-by-hover span.btn").data("selectcompanyid");
							sandbox.dom(event.target).attr("data-newcompanyid", newCompanyID);
						}
						
					}

					sandbox.dom(this).removeAttr("arrow-selected-companyid").removeAttr("hover-selected-companyid");
					ul.children().removeClass("selected-by-arrow-key selected-by-hover");
				}
				
				updateCompanyForPerson(companyName, oldCompanyID, newCompanyID);
			});
			
			_contactDetailsEl.on("change", "input[name='source']", function(event) {
				
				//console.info("Source :" + event.target.value);
				var source = sandbox.dom.trim(event.target.value);
				saveContactSource(source);
			});
			
			_contactDetailsEl.on("change", "[data-type='contactMethod'] input[data-type='title']", function(event) {
				
				//console.info("ContactMethod Label :" + event.target.value);
						
				updateContactMethodTitle(event);
			});

			_contactDetailsEl.on("change", "[data-type='contactMethod'] input[name='phone']," +
						  "[data-type='contactMethod'] input[name='fax']," +
							  "[data-type='contactMethod'] input[name='email']," +
							  "[data-type='contactMethod'] input[name='social']," +
							  "[data-type='contactMethod'] input[name='web']", function(event) {
				
				
				//console.info("ContactMethod Value :" + event.target.value);
				
				updateContactMethodValue(event);
			});
			
			//DOMCharacterDataModified - Event
			_contactDetailsEl.on("change", "[data-type='location'] input[data-type='title']", function(event) {
				
				//console.info("Location Label :" + event.target.value);
				
				updateLocationTitle(event);
			});
			
		 	_contactDetailsEl.on("keydown", "[data-type='location'] input[name='address']," +
					  "[data-type='location'] input[name='city']," +
						  "[data-type='location'] input[name='state']," +
						  "[data-type='location'] input[name='country']," +
						  "[data-type='location'] input[name='zip']", function(event) {
				
		 		_keyCodeForContactAddressInput = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
			});
			
			_contactDetailsEl.on("change", "[data-type='location'] input[name='address']," +
						  "[data-type='location'] input[name='city']," +
							  "[data-type='location'] input[name='state']," +
							  "[data-type='location'] input[name='country']," +
							  "[data-type='location'] input[name='zip']", function(event) {
				
				if(_keyCodeForContactAddressInput == 9)
					event.keyCode = 9;
				
				updateLocationValue(event);
			});
			
			_contactDetailsEl.on("click", "[data-type='contactMethod'] div button.icon-trash-o", function(event) {				
				deleteContactMethod(event);
			});
			
			_contactDetailsEl.on("click", "[data-type='location'] div button.icon-trash-o", function() {
				deleteLocation(event);
			});
			
			
			sandbox.dom('#contacts').on('mouseover','#contact-details ul',function(){
				
				var currentEl, attr;
				
				sandbox.dom(this).find('li').each(function(){
					
					current = sandbox.dom(this);
					attr = sandbox.dom(current).attr("data-cmtype");
					
					if (attr == "phone" || attr == "web" || attr == "social" || attr == "email") {
						
						switch(attr) {
						
						case "phone":
							if(sandbox.util.getFeatureAvailablityStatus('dialOut') && !!sandbox.dom(current).find("div .icon-phone7").parent().find('input').val().trim() && !sandbox.dom(current).find("div .icon-phone7").parent().find('input').is(":focus"))
								sandbox.dom(current).find("div .icon-phone7").removeClass('hide');
							break;
						case "web":
							if(!!sandbox.dom(current).find("div .icon-earth").parent().find('input').val().trim() && !sandbox.dom(current).find("div .icon-earth").parent().find('input').is(":focus"))
								sandbox.dom(current).find('div .icon-earth').removeClass('hide');
							break;
						case "social":
							if(!!sandbox.dom(current).find("div .icon-link2").parent().find('input').val().trim() && !sandbox.dom(current).find("div .icon-link2").parent().find('input').is(":focus"))
								sandbox.dom(current).find('div .icon-link2').removeClass('hide');
							break;
						case "email":
							if(!!sandbox.dom(current).find("div .icon-envelope-o").parent().find('input').val().trim() && !sandbox.dom(current).find("div .icon-envelope-o").parent().find('input').is(":focus"))
								sandbox.dom(current).find('div .icon-envelope-o').removeClass('hide');
							break;
						}
					}
				});
			});
			
			sandbox.dom('#contacts').on('mouseout','#contact-details ul',function(){
				
				sandbox.dom(this).find('[data-cmtype="phone"]').find("div .icon-phone7").addClass('hide');
				sandbox.dom(this).find('[data-cmtype="web"]').find('div .icon-earth').addClass('hide');
				sandbox.dom(this).find('[data-cmtype="social"]').find('div .icon-link2').addClass('hide');
				sandbox.dom(this).find('[data-cmtype="email"]').find('div .icon-envelope-o').addClass('hide');
				
			});
			
			
			_contactDetailsEl.on('click','ul [data-cmtype="web"] div .icon-earth',function(){
		    	
		    	var webAddress = sandbox.dom(this).parent().find('input').val();
		    	showWebPopup(webAddress);
		    });
			
			_contactDetailsEl.on('click','ul [data-cmtype="social"] div .icon-link2',function(){
				
				var webAddress = sandbox.dom(this).parent().find('input').val();
				showWebPopup(webAddress);
				
			});
			
			_contactDetailsEl.on('click','ul [data-cmtype="email"] div .icon-envelope-o',function(){
				
				var email = sandbox.dom(this).parent().find('input').val();
				sandbox.publish('show-email-popup', {  
					                                  entityType : 'contact', 
					                                  entityID : _contactID,
					                                  contactID : _contactID,
					                                  to : [email],
					                                  moduleName : sandbox.moduleName
					                                 });
				
			});
			
			_contactDetailsEl.on('click','ul [data-cmtype="phone"] div .icon-phone7',function(){
				
				var phoneNo = sandbox.dom(this).parent().find('input').val();
				sandbox.publish('dial-phoneNo',{entityType :'contact' , entityID : _contactID , phoneNo : phoneNo});
			
			});
			
			sandbox.dom("#contacts").on('click','#customerListContainer li code.icon-trash-o',function(){
				
				var accountSettings = JSON.parse(sandbox.cache.get("accountSettings")["featuresAvailabilityStatus"]),
				    featureAvailabiltyForAccount = accountSettings["deleteContacts"],
	                contactID = sandbox.dom(this).attr('id').replace('delete_','');

									
				if(!featureAvailabiltyForAccount)
					{
					  sandbox.alert.dialog({text:"This feature is disabled for your account.", type:"ok"});
					  return;
					}
				                 
              sandbox.alert.dialog({text:"Are you sure you want to delete this contact? All information associated with this contact will be permanently deleted. There is no undo.", type:"ok/c", confirm:deleteContact , data:{contactID:contactID}});
              sandbox.publish("update-analytics",{category:"Delete",action:'Contact', label: sandbox.cache.get("loggedInUserEmail")+ "-" +sandbox.cache.get("accountID") });	
			});			
		
		},
		
		destroy : function() {
			sandbox.unsubscribe();
		},
		
		showCreateContactTemplate : function(data) {
			showCreateContactTemplate(data);
		},
		
		displayContactDetails : function(data) {
			displayContactDetails(data);
		}
	};
});


DSCRM.Core.registerModule("export-contacts",["url","cache","alert","util","ajax"] ,function(sandbox) {
	
	var _exportAllContactsBtn = sandbox.dom("#exportContacts"),
		
		confirmContactsExport = function(){
			
			var accountSettings = JSON.parse(sandbox.cache.get("accountSettings")["featuresAvailabilityStatus"]),
	    		isfeatureEnabled = accountSettings["exportContacts"];
			
			if(!isfeatureEnabled){
				sandbox.alert.dialog({text:"This feature is disabled for your account.", type:"ok"});
				return;
			}
			
			sandbox.alert.dialog({text:"Are you sure you want to export the contacts? If you press OK, Contacts will be exported and you will receive email notification on completion.", type:"ok/c", confirm:exportAllContacts , data:{}});
			
		},
		
		exportAllContacts = function(){
			
			var params = '', 
				departmentID = sandbox.cache.get("selectedDepartmentID");
		
			if(!!departmentID)
				params = params + '&departmentID=' + departmentID;
    	
			sandbox.ajax.requestForFORMData({method:"POST", url:'/exportContacts', data:params, respType:"json"});
		};
	
	return {
		init : function() {
			//Interface for export all contacts
			sandbox.subscribe("export-all-contacts", confirmContactsExport );
			//Event handler for export all contacts btn in contacts page
			_exportAllContactsBtn.on('click',confirmContactsExport);
			
		}	
	};
});
